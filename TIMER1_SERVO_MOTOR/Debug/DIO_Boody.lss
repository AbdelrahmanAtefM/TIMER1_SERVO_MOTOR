
DIO_Boody.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  000043fe  00004492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080019a  0080019a  000045cc  2**0
                  ALLOC
  3 .stab         000043c8  00000000  00000000  000045cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018bb  00000000  00000000  00008994  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a24f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000a40f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000a623  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000cc35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000e103  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f410  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010311  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 21 	call	0x4256	; 0x4256 <main>
      8a:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 eb 21 	jmp	0x43d6	; 0x43d6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e6 57       	subi	r30, 0x76	; 118
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <M_TIMER1_void_Pwm1Int>:
///***************** INCLUDES **********//
#include "TIMER1_Int.h"
///***************** Functions **********//

void M_TIMER1_void_Pwm1Int(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
   //// ***** To enable  pin OC1A(PD5) direction to output
   M_DIO_void_SetPinDirection(PORTD_ID, PIN5, OUTPUT);
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	65 e0       	ldi	r22, 0x05	; 5
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
   ////TO enable TIMER1 FAST PWM(ICR1)
	// Clear WGM10 in TCCR1A_REG
	ClrBit(TCCR1A_REG ,WGM10);
     efc:	af e4       	ldi	r26, 0x4F	; 79
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ef e4       	ldi	r30, 0x4F	; 79
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8e 7f       	andi	r24, 0xFE	; 254
     f08:	8c 93       	st	X, r24
	// Set   WGM11 in TCCR1A_REG
	SetBit(TCCR1A_REG ,WGM11);
     f0a:	af e4       	ldi	r26, 0x4F	; 79
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ef e4       	ldi	r30, 0x4F	; 79
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	82 60       	ori	r24, 0x02	; 2
     f16:	8c 93       	st	X, r24
	// Set   WGM12 in TCCR1B_REG
	SetBit(TCCR1B_REG ,WGM12);
     f18:	ae e4       	ldi	r26, 0x4E	; 78
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ee e4       	ldi	r30, 0x4E	; 78
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 60       	ori	r24, 0x08	; 8
     f24:	8c 93       	st	X, r24
	// Set   WGM13 in TCCR1B_REG
	SetBit(TCCR1B_REG ,WGM13);
     f26:	ae e4       	ldi	r26, 0x4E	; 78
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ee e4       	ldi	r30, 0x4E	; 78
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 61       	ori	r24, 0x10	; 16
     f32:	8c 93       	st	X, r24

#if   TIMER1_FAST_PWM1_MODE  == NON_Inverted
	////TO enable TIMER1 FAST PWM(ICR1) NON INVERTED MODE
	// Set   COM1A1 in TCCR1A_REG
	SetBit(TCCR1A_REG ,COM1A1);
     f34:	af e4       	ldi	r26, 0x4F	; 79
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ef e4       	ldi	r30, 0x4F	; 79
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	8c 93       	st	X, r24
	// Clear COM1A0 in TCCR1A_REG
	ClrBit(TCCR1A_REG ,COM1A0);
     f42:	af e4       	ldi	r26, 0x4F	; 79
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ef e4       	ldi	r30, 0x4F	; 79
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7b       	andi	r24, 0xBF	; 191
     f4e:	8c 93       	st	X, r24
	SetBit(TCCR1B_REG ,COM1A1);
	// Set COM1A0 in TCCR1A_REG
	SetBit(TCCR1A_REG ,COM1A0);
#endif

}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <M_TIMER1_void_Pwm1SetFrequancy>:
void M_TIMER1_void_Pwm1SetFrequancy(u32 Local_u32Frequancy)
{
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <M_TIMER1_void_Pwm1SetFrequancy+0xa>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <M_TIMER1_void_Pwm1SetFrequancy+0xc>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	69 83       	std	Y+1, r22	; 0x01
     f68:	7a 83       	std	Y+2, r23	; 0x02
     f6a:	8b 83       	std	Y+3, r24	; 0x03
     f6c:	9c 83       	std	Y+4, r25	; 0x04
    ICR1_REG = ((F_OSC * 1000000)/TIMER1_PRESCALER)/Local_u32Frequancy;
     f6e:	06 e4       	ldi	r16, 0x46	; 70
     f70:	10 e0       	ldi	r17, 0x00	; 0
     f72:	84 e2       	ldi	r24, 0x24	; 36
     f74:	94 ef       	ldi	r25, 0xF4	; 244
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	3a 81       	ldd	r19, Y+2	; 0x02
     f7e:	4b 81       	ldd	r20, Y+3	; 0x03
     f80:	5c 81       	ldd	r21, Y+4	; 0x04
     f82:	bc 01       	movw	r22, r24
     f84:	cd 01       	movw	r24, r26
     f86:	0e 94 75 21 	call	0x42ea	; 0x42ea <__udivmodsi4>
     f8a:	da 01       	movw	r26, r20
     f8c:	c9 01       	movw	r24, r18
     f8e:	f8 01       	movw	r30, r16
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	08 95       	ret

00000fa6 <M_TIMER1_void_Pwm1SetDutycycle>:
void M_TIMER1_void_Pwm1SetDutycycle(f32 Local_u8DutySycle)
{
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <M_TIMER1_void_Pwm1SetDutycycle+0xa>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <M_TIMER1_void_Pwm1SetDutycycle+0xc>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	69 83       	std	Y+1, r22	; 0x01
     fb8:	7a 83       	std	Y+2, r23	; 0x02
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	9c 83       	std	Y+4, r25	; 0x04
#if    TIMER1_FAST_PWM1_MODE  == NON_Inverted
		OCR1A_REG = (((Local_u8DutySycle * ICR1_REG)/100)-1);
     fbe:	0a e4       	ldi	r16, 0x4A	; 74
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	e6 e4       	ldi	r30, 0x46	; 70
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	cc 01       	movw	r24, r24
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	29 81       	ldd	r18, Y+1	; 0x01
     fe2:	3a 81       	ldd	r19, Y+2	; 0x02
     fe4:	4b 81       	ldd	r20, Y+3	; 0x03
     fe6:	5c 81       	ldd	r21, Y+4	; 0x04
     fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	48 ec       	ldi	r20, 0xC8	; 200
     ffa:	52 e4       	ldi	r21, 0x42	; 66
     ffc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	f8 01       	movw	r30, r16
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	80 83       	st	Z, r24

#elif  TIMER1_FAST_PWM1_MODE  == Inverted

#endif
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	08 95       	ret

0000103c <M_TIMER1_void_Pwm1Start>:
void M_TIMER1_void_Pwm1Start(void)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	    ClrBit(TCCR1B_REG , CS11);
	    SetBit(TCCR1B_REG , CS12);

#elif TIMER1_PRESCALER == 256
  ////******To select clock in 256 clear (CS11 ,CS10) and Set (CS12) in TCCR1B_REG
	    ClrBit(TCCR1B_REG , CS10);
    1044:	ae e4       	ldi	r26, 0x4E	; 78
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ee e4       	ldi	r30, 0x4E	; 78
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8e 7f       	andi	r24, 0xFE	; 254
    1050:	8c 93       	st	X, r24
		ClrBit(TCCR1B_REG , CS11);
    1052:	ae e4       	ldi	r26, 0x4E	; 78
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ee e4       	ldi	r30, 0x4E	; 78
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	8c 93       	st	X, r24
		SetBit(TCCR1B_REG , CS12);
    1060:	ae e4       	ldi	r26, 0x4E	; 78
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ee e4       	ldi	r30, 0x4E	; 78
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	84 60       	ori	r24, 0x04	; 4
    106c:	8c 93       	st	X, r24

#endif

}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <M_TIMER1_void_Pwm1Stop>:
void M_TIMER1_void_Pwm1Stop(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	////*** To stop timer clear  three bits ( CS12 ,CS11 ,CS10) in TCCR1B_REG
	 ClrBit(TCCR1B_REG , CS10);
    107c:	ae e4       	ldi	r26, 0x4E	; 78
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ee e4       	ldi	r30, 0x4E	; 78
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8e 7f       	andi	r24, 0xFE	; 254
    1088:	8c 93       	st	X, r24
	 ClrBit(TCCR1B_REG , CS11);
    108a:	ae e4       	ldi	r26, 0x4E	; 78
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ee e4       	ldi	r30, 0x4E	; 78
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8d 7f       	andi	r24, 0xFD	; 253
    1096:	8c 93       	st	X, r24
	 ClrBit(TCCR1B_REG , CS12);
    1098:	ae e4       	ldi	r26, 0x4E	; 78
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ee e4       	ldi	r30, 0x4E	; 78
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8b 7f       	andi	r24, 0xFB	; 251
    10a4:	8c 93       	st	X, r24

}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <M_TIMER0_void_Timer0Int>:
u32 MTimer0_u32NumOfCM =0;
void (*CallBack)(void);
///***************** FUNCTIONS **********//
/// M_TIMER0_void_Timer0Int is a function to initialize Timer0///
void M_TIMER0_void_Timer0Int(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
   /// To enable TIMER0 overflow INT
   // Set TOIEO in TIMSK_REG
	  SetBit(TIMSK_REG , TOIE0);
#elif TIMER0_MODE == CTC_MODE
	  /// To Enable CTC_MODE clear WGM00 and  set WGM01 in TCCR0_REG
	  	  ClrBit(TCCR0_REG ,WGM00 );
    10b4:	a3 e5       	ldi	r26, 0x53	; 83
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e3 e5       	ldi	r30, 0x53	; 83
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 7b       	andi	r24, 0xBF	; 191
    10c0:	8c 93       	st	X, r24
	  	  SetBit(TCCR0_REG ,WGM01 );
    10c2:	a3 e5       	ldi	r26, 0x53	; 83
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e3 e5       	ldi	r30, 0x53	; 83
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	88 60       	ori	r24, 0x08	; 8
    10ce:	8c 93       	st	X, r24
	  /// To enable TIMER0 compare match INT
	   // Set OCIE0 in TIMSK_REG
	  	 SetBit(TIMSK_REG , OCIE0);
    10d0:	a9 e5       	ldi	r26, 0x59	; 89
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e9 e5       	ldi	r30, 0x59	; 89
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	8c 93       	st	X, r24
#endif //// end if for  TIMER0_MODE

}
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <M_TIMER0_U8_Timer0SetTime>:
///M_TIMER0_U8_Timer0SetTime function to set time
void M_TIMER0_U8_Timer0SetTime(u32 Loacl_u8DesierdTime_ms)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	2d 97       	sbiw	r28, 0x0d	; 13
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	6a 87       	std	Y+10, r22	; 0x0a
    10fa:	7b 87       	std	Y+11, r23	; 0x0b
    10fc:	8c 87       	std	Y+12, r24	; 0x0c
    10fe:	9d 87       	std	Y+13, r25	; 0x0d

	/// time of the tick  time
    u32 Local_u32TickTime = TIMER0_PRESCALER / FOSC ;  /// results will be in micro sec
    1100:	80 e4       	ldi	r24, 0x40	; 64
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e0       	ldi	r26, 0x00	; 0
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	8e 83       	std	Y+6, r24	; 0x06
    110a:	9f 83       	std	Y+7, r25	; 0x07
    110c:	a8 87       	std	Y+8, r26	; 0x08
    110e:	b9 87       	std	Y+9, r27	; 0x09
    /// the number of the total ticks
    u32 Local_u32TotalTicks =  (Loacl_u8DesierdTime_ms *1000) / Local_u32TickTime;
    1110:	8a 85       	ldd	r24, Y+10	; 0x0a
    1112:	9b 85       	ldd	r25, Y+11	; 0x0b
    1114:	ac 85       	ldd	r26, Y+12	; 0x0c
    1116:	bd 85       	ldd	r27, Y+13	; 0x0d
    1118:	28 ee       	ldi	r18, 0xE8	; 232
    111a:	33 e0       	ldi	r19, 0x03	; 3
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 37 21 	call	0x426e	; 0x426e <__mulsi3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	2e 81       	ldd	r18, Y+6	; 0x06
    112e:	3f 81       	ldd	r19, Y+7	; 0x07
    1130:	48 85       	ldd	r20, Y+8	; 0x08
    1132:	59 85       	ldd	r21, Y+9	; 0x09
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 75 21 	call	0x42ea	; 0x42ea <__udivmodsi4>
    113c:	da 01       	movw	r26, r20
    113e:	c9 01       	movw	r24, r18
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	9b 83       	std	Y+3, r25	; 0x03
    1144:	ac 83       	std	Y+4, r26	; 0x04
    1146:	bd 83       	std	Y+5, r27	; 0x05
    	 //// TCNT0_REG will start from the reminded ticks number
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
    	 MTimer0_u32NumOfOV++;
     }
#elif TIMER0_MODE == CTC_MODE
     u8 Local_8uCounter = 255;
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <M_TIMER0_U8_Timer0SetTime+0x70>
     while(Local_u32TotalTicks % Local_8uCounter)
     {
    	 Local_8uCounter--;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	81 50       	subi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
    	 MTimer0_u32NumOfOV++;
     }
#elif TIMER0_MODE == CTC_MODE
     u8 Local_8uCounter = 255;
     while(Local_u32TotalTicks % Local_8uCounter)
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	9b 81       	ldd	r25, Y+3	; 0x03
    1162:	ac 81       	ldd	r26, Y+4	; 0x04
    1164:	bd 81       	ldd	r27, Y+5	; 0x05
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 75 21 	call	0x42ea	; 0x42ea <__udivmodsi4>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	a1 05       	cpc	r26, r1
    1176:	b1 05       	cpc	r27, r1
    1178:	51 f7       	brne	.-44     	; 0x114e <M_TIMER0_U8_Timer0SetTime+0x6a>
     {
    	 Local_8uCounter--;
     }
     MTimer0_u32NumOfCM = Local_u32TotalTicks /Local_8uCounter ;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	ac 81       	ldd	r26, Y+4	; 0x04
    118a:	bd 81       	ldd	r27, Y+5	; 0x05
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 75 21 	call	0x42ea	; 0x42ea <__udivmodsi4>
    1194:	da 01       	movw	r26, r20
    1196:	c9 01       	movw	r24, r18
    1198:	80 93 9f 01 	sts	0x019F, r24
    119c:	90 93 a0 01 	sts	0x01A0, r25
    11a0:	a0 93 a1 01 	sts	0x01A1, r26
    11a4:	b0 93 a2 01 	sts	0x01A2, r27
     OCR0_REG = Local_8uCounter - 1;
    11a8:	ec e5       	ldi	r30, 0x5C	; 92
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	81 50       	subi	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24

#endif
}
    11b2:	2d 96       	adiw	r28, 0x0d	; 13
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <M_TIMER0_void_Timer0Start>:
/// M_TIMER0_void_Timer0Start to let Timer0 start

void M_TIMER0_void_Timer0Start(void)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
	/// Selecting prescaler
#if  TIMER0_PRESCALER == 1024       /// 1024 mode
	 /// set   CS00 in TCCR0_REG
	    SetBit(TCCR0_REG , CS00);
    11cc:	a3 e5       	ldi	r26, 0x53	; 83
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e3 e5       	ldi	r30, 0x53	; 83
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	8c 93       	st	X, r24
     /// clear CS01 in TCCR0_REG
        ClrBit(TCCR0_REG , CS01);
    11da:	a3 e5       	ldi	r26, 0x53	; 83
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e3 e5       	ldi	r30, 0x53	; 83
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8d 7f       	andi	r24, 0xFD	; 253
    11e6:	8c 93       	st	X, r24
     /// set   CS02 in TCCR0_REG
        SetBit(TCCR0_REG , CS02);
    11e8:	a3 e5       	ldi	r26, 0x53	; 83
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e3 e5       	ldi	r30, 0x53	; 83
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	8c 93       	st	X, r24
        SetBit(TCCR0_REG , CS01);
	/// clear CS00 in TCCR0_REG
        ClrBit(TCCR0_REG , CS00);
#endif //// end if for  PRESCALER

}
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <M_TIMER0_void_Timer0Stop>:
///M_TIMER0_void_Timer0Stop to stop Timer0
void M_TIMER0_void_Timer0Stop(void)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
	///clear the three bits (CS00 , CS01 ,CS02 )
	ClrBit(TCCR0_REG , CS00);
    1204:	a3 e5       	ldi	r26, 0x53	; 83
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e3 e5       	ldi	r30, 0x53	; 83
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8e 7f       	andi	r24, 0xFE	; 254
    1210:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS01);
    1212:	a3 e5       	ldi	r26, 0x53	; 83
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e3 e5       	ldi	r30, 0x53	; 83
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8d 7f       	andi	r24, 0xFD	; 253
    121e:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS02);
    1220:	a3 e5       	ldi	r26, 0x53	; 83
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e3 e5       	ldi	r30, 0x53	; 83
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8b 7f       	andi	r24, 0xFB	; 251
    122c:	8c 93       	st	X, r24
}
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <M_TIMER0_void_Pwm0Int>:



/////****M_TIMER0_void_Pwm0Int function to initialize PWM0
void M_TIMER0_void_Pwm0Int(void)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	////******set direction of  pin PB3(OC0) to OUTPUT
	M_DIO_void_SetPinDirection(PORTB_ID, PIN3, OUTPUT);
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	63 e0       	ldi	r22, 0x03	; 3
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>


#endif   //// ****** End of TIMER0_FAST_PWM_MODE
#elif TIMER0_PWM_MODE == PHASE_CORRECT
	/// To Enable FAST PMW0 set( WGM01 & WGM00 )in TCCR0_REG
	 SetBit(TCCR0_REG ,WGM00 );
    1246:	a3 e5       	ldi	r26, 0x53	; 83
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e3 e5       	ldi	r30, 0x53	; 83
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	8c 93       	st	X, r24
	 ClrBit(TCCR0_REG ,WGM01 );
    1254:	a3 e5       	ldi	r26, 0x53	; 83
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e3 e5       	ldi	r30, 0x53	; 83
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	8c 93       	st	X, r24
	 ////******** TIMER0 PHASE CORRECT PWM  MODE*******//
#if    TIMER0_PWM_PHASE_CORRECT  == NON_INVERTED
    /// To select  TIMER0_PWM_PHASE_CORRECT  INVERTED Mode set(COM01) and clear(COM00) in TCCR0_REG
	  SetBit(TCCR0_REG ,COM01 );
    1262:	a3 e5       	ldi	r26, 0x53	; 83
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e3 e5       	ldi	r30, 0x53	; 83
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 62       	ori	r24, 0x20	; 32
    126e:	8c 93       	st	X, r24
	  ClrBit(TCCR0_REG ,COM00 );
    1270:	a3 e5       	ldi	r26, 0x53	; 83
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e3 e5       	ldi	r30, 0x53	; 83
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8f 7e       	andi	r24, 0xEF	; 239
    127c:	8c 93       	st	X, r24


#endif   //// ****** TIMER0_PWM_PHASE_CORRECT

#endif    //// ****** End of TIMER0_PWM_MODE
}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <M_TIMER0_void_Pwm0SetDutyCycle>:
/////****M_TIMER0_void_Pwm0SetDutySycle function to set duty cycle for  PWM0
void M_TIMER0_void_Pwm0SetDutyCycle(u8 Local_u8DutySycle)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01

#endif

#elif TIMER0_PWM_MODE == PHASE_CORRECT
#if    TIMER0_PWM_PHASE_CORRECT  == NON_INVERTED
	OCR0_REG = ((Local_u8DutySycle * 255 )/100);
    1290:	ec e5       	ldi	r30, 0x5C	; 92
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	48 2f       	mov	r20, r24
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	ca 01       	movw	r24, r20
    129c:	9c 01       	movw	r18, r24
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	c9 01       	movw	r24, r18
    12a4:	96 95       	lsr	r25
    12a6:	98 2f       	mov	r25, r24
    12a8:	88 27       	eor	r24, r24
    12aa:	97 95       	ror	r25
    12ac:	87 95       	ror	r24
    12ae:	82 1b       	sub	r24, r18
    12b0:	93 0b       	sbc	r25, r19
    12b2:	84 0f       	add	r24, r20
    12b4:	95 1f       	adc	r25, r21
    12b6:	24 e6       	ldi	r18, 0x64	; 100
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	b9 01       	movw	r22, r18
    12bc:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__divmodhi4>
    12c0:	cb 01       	movw	r24, r22
    12c2:	80 83       	st	Z, r24
#elif  TIMER0_PWM_PHASE_CORRECT  == INVERTED

#endif  //// ****** TIMER0_PWM_PHASE_CORRECT
#endif  //// ****** End of TIMER0_PWM_MODE

}
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <M_TIMER0_void_Pwm0Start>:

///*********M_TIMER0_void_Pwm0Start to Start PWM0
void M_TIMER0_void_Pwm0Start(void)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_void_Timer0Start();
    12d4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <M_TIMER0_void_Timer0Start>
}
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <M_TIMER0_void_Pwm0Stop>:
///*******M_TIMER0_void_Pwm0Stop to stop PWM0
void M_TIMER0_void_Pwm0Stop(void)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_void_Timer0Stop();
    12e6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <M_TIMER0_void_Timer0Stop>
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <M_TIMER0_void_Timer0SetCallBack>:

/// M_TIMER0_void_Timer0SetCallBack to set callback function
void M_TIMER0_void_Timer0SetCallBack(void (*Local_Ptr)(void))
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <M_TIMER0_void_Timer0SetCallBack+0x6>
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	89 83       	std	Y+1, r24	; 0x01
	CallBack = Local_Ptr;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	90 93 aa 01 	sts	0x01AA, r25
    1306:	80 93 a9 01 	sts	0x01A9, r24

}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <__vector_10>:
}

#elif TIMER0_MODE == CTC_MODE

ISR(TIMER0_COMP_vect)
{
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Conter =0;
	    Local_u32Conter ++;
    133e:	80 91 a3 01 	lds	r24, 0x01A3
    1342:	90 91 a4 01 	lds	r25, 0x01A4
    1346:	a0 91 a5 01 	lds	r26, 0x01A5
    134a:	b0 91 a6 01 	lds	r27, 0x01A6
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	a1 1d       	adc	r26, r1
    1352:	b1 1d       	adc	r27, r1
    1354:	80 93 a3 01 	sts	0x01A3, r24
    1358:	90 93 a4 01 	sts	0x01A4, r25
    135c:	a0 93 a5 01 	sts	0x01A5, r26
    1360:	b0 93 a6 01 	sts	0x01A6, r27
	  if(Local_u32Conter ==  MTimer0_u32NumOfCM)
    1364:	20 91 a3 01 	lds	r18, 0x01A3
    1368:	30 91 a4 01 	lds	r19, 0x01A4
    136c:	40 91 a5 01 	lds	r20, 0x01A5
    1370:	50 91 a6 01 	lds	r21, 0x01A6
    1374:	80 91 9f 01 	lds	r24, 0x019F
    1378:	90 91 a0 01 	lds	r25, 0x01A0
    137c:	a0 91 a1 01 	lds	r26, 0x01A1
    1380:	b0 91 a2 01 	lds	r27, 0x01A2
    1384:	28 17       	cp	r18, r24
    1386:	39 07       	cpc	r19, r25
    1388:	4a 07       	cpc	r20, r26
    138a:	5b 07       	cpc	r21, r27
    138c:	69 f4       	brne	.+26     	; 0x13a8 <__vector_10+0x94>
	  {
           CallBack();
    138e:	e0 91 a9 01 	lds	r30, 0x01A9
    1392:	f0 91 aa 01 	lds	r31, 0x01AA
    1396:	09 95       	icall
		  Local_u32Conter =0;
    1398:	10 92 a3 01 	sts	0x01A3, r1
    139c:	10 92 a4 01 	sts	0x01A4, r1
    13a0:	10 92 a5 01 	sts	0x01A5, r1
    13a4:	10 92 a6 01 	sts	0x01A6, r1
	  }
}
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <M_GIE_void_GIE_EN>:
#include "GIE_Int.h"

/// *************** Functions  ************//
/// M_GIE_void_GIEEn function to Enable general interrupt
void M_GIE_void_GIE_EN (void)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
	///set I_BIT in SREG_REG
	SetBit(SREG_REG,I_BIT);
    13d6:	af e5       	ldi	r26, 0x5F	; 95
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ef e5       	ldi	r30, 0x5F	; 95
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	80 68       	ori	r24, 0x80	; 128
    13e2:	8c 93       	st	X, r24
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <M_GIE_void_GIE_DIS>:
/// M_GIE_void_GIEDIS function to Disable general interrupt
void M_GIE_void_GIE_DIS (void)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	///clear I_BIT in SREG_REG
	ClrBit(SREG_REG,I_BIT);
    13f2:	af e5       	ldi	r26, 0x5F	; 95
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ef e5       	ldi	r30, 0x5F	; 95
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 77       	andi	r24, 0x7F	; 127
    13fe:	8c 93       	st	X, r24
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <M_EXTI_IN0_void_EXTI_INT0EN>:

void (*EXTI_INT0_CallBack)(void);
/// **************Functions********//
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Enable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0EN(void)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    ///Enable internal interrupt for INT0
        SetBit(GICR_REG,INT0);
    140e:	ab e5       	ldi	r26, 0x5B	; 91
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	eb e5       	ldi	r30, 0x5B	; 91
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 64       	ori	r24, 0x40	; 64
    141a:	8c 93       	st	X, r24
////  Interrupt 0 (INT0) Sense Control
/// Interrupt Request on Falling_Edge
#if SENSE_CONTROL   == Falling_Edge
	/// Set bit ISC01  on MCUCR_REG
	SetBit(MCUCR_REG ,ISC01);
    141c:	a5 e5       	ldi	r26, 0x55	; 85
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e5       	ldi	r30, 0x55	; 85
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	82 60       	ori	r24, 0x02	; 2
    1428:	8c 93       	st	X, r24
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
    142a:	a5 e5       	ldi	r26, 0x55	; 85
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e5       	ldi	r30, 0x55	; 85
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8e 7f       	andi	r24, 0xFE	; 254
    1436:	8c 93       	st	X, r24
	/// Set bit ISC01  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC01);
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
#endif
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <M_EXTI_IN0_void_EXTI_INT0DIS>:
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Disable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0DIS()
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	///Disable internal interrupt
	    ClrBit(GICR_REG,INT0);
    1446:	ab e5       	ldi	r26, 0x5B	; 91
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	eb e5       	ldi	r30, 0x5B	; 91
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8f 7b       	andi	r24, 0xBF	; 191
    1452:	8c 93       	st	X, r24
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <M_EXTI_INT0_void_Set_CallBack>:
///************** M_EXTI_INT0_void_Set_CallBack Function ********//
void M_EXTI_INT0_void_Set_CallBack (void (*local_ptr)(void))
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <M_EXTI_INT0_void_Set_CallBack+0x6>
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
	EXTI_INT0_CallBack = local_ptr;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	90 93 ac 01 	sts	0x01AC, r25
    1470:	80 93 ab 01 	sts	0x01AB, r24

}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <__vector_1>:

ISR(INT0_vect)
{
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	EXTI_INT0_CallBack();
    14a8:	e0 91 ab 01 	lds	r30, 0x01AB
    14ac:	f0 91 ac 01 	lds	r31, 0x01AC
    14b0:	09 95       	icall
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	ff 91       	pop	r31
    14b8:	ef 91       	pop	r30
    14ba:	bf 91       	pop	r27
    14bc:	af 91       	pop	r26
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	7f 91       	pop	r23
    14c4:	6f 91       	pop	r22
    14c6:	5f 91       	pop	r21
    14c8:	4f 91       	pop	r20
    14ca:	3f 91       	pop	r19
    14cc:	2f 91       	pop	r18
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti

000014d8 <M_DIO_void_SetPinDirection>:
 */
#include "DIO_Int.h"

///  M_DIO_void_SetPinDirection takes 3 arguments PORT , PIN & DIRECTION
void M_DIO_void_SetPinDirection (u8 port , u8 pin , u8 direction)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	29 97       	sbiw	r28, 0x09	; 9
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	6a 83       	std	Y+2, r22	; 0x02
    14f0:	4b 83       	std	Y+3, r20	; 0x03
	//// SWITCH too determine the Direction of Pin
	switch (direction)
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	39 87       	std	Y+9, r19	; 0x09
    14fa:	28 87       	std	Y+8, r18	; 0x08
    14fc:	88 85       	ldd	r24, Y+8	; 0x08
    14fe:	99 85       	ldd	r25, Y+9	; 0x09
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	39 f0       	breq	.+14     	; 0x1512 <M_DIO_void_SetPinDirection+0x3a>
    1504:	28 85       	ldd	r18, Y+8	; 0x08
    1506:	39 85       	ldd	r19, Y+9	; 0x09
    1508:	21 30       	cpi	r18, 0x01	; 1
    150a:	31 05       	cpc	r19, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <M_DIO_void_SetPinDirection+0x38>
    150e:	76 c0       	rjmp	.+236    	; 0x15fc <M_DIO_void_SetPinDirection+0x124>
    1510:	e4 c0       	rjmp	.+456    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
		{
	 /// case  INPUT means that the Direction of Pin  = 0
		 case INPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3f 83       	std	Y+7, r19	; 0x07
    151a:	2e 83       	std	Y+6, r18	; 0x06
    151c:	8e 81       	ldd	r24, Y+6	; 0x06
    151e:	9f 81       	ldd	r25, Y+7	; 0x07
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	91 05       	cpc	r25, r1
    1524:	61 f1       	breq	.+88     	; 0x157e <M_DIO_void_SetPinDirection+0xa6>
    1526:	2e 81       	ldd	r18, Y+6	; 0x06
    1528:	3f 81       	ldd	r19, Y+7	; 0x07
    152a:	23 30       	cpi	r18, 0x03	; 3
    152c:	31 05       	cpc	r19, r1
    152e:	34 f4       	brge	.+12     	; 0x153c <M_DIO_void_SetPinDirection+0x64>
    1530:	8e 81       	ldd	r24, Y+6	; 0x06
    1532:	9f 81       	ldd	r25, Y+7	; 0x07
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	69 f0       	breq	.+26     	; 0x1554 <M_DIO_void_SetPinDirection+0x7c>
    153a:	cf c0       	rjmp	.+414    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
    153c:	2e 81       	ldd	r18, Y+6	; 0x06
    153e:	3f 81       	ldd	r19, Y+7	; 0x07
    1540:	23 30       	cpi	r18, 0x03	; 3
    1542:	31 05       	cpc	r19, r1
    1544:	89 f1       	breq	.+98     	; 0x15a8 <M_DIO_void_SetPinDirection+0xd0>
    1546:	8e 81       	ldd	r24, Y+6	; 0x06
    1548:	9f 81       	ldd	r25, Y+7	; 0x07
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	91 05       	cpc	r25, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <M_DIO_void_SetPinDirection+0x7a>
    1550:	40 c0       	rjmp	.+128    	; 0x15d2 <M_DIO_void_SetPinDirection+0xfa>
    1552:	c3 c0       	rjmp	.+390    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                        /// Port A
			 		ClrBit(DDRA,pin);                  /// clear pin value set it to 0
    1554:	aa e3       	ldi	r26, 0x3A	; 58
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ea e3       	ldi	r30, 0x3A	; 58
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <M_DIO_void_SetPinDirection+0x9a>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <M_DIO_void_SetPinDirection+0x96>
    1576:	80 95       	com	r24
    1578:	84 23       	and	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	ae c0       	rjmp	.+348    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
				break ;
			 	case PORTB_ID :                        /// Port B
			 		ClrBit(DDRB,pin);                 /// clear pin value set it to 0
    157e:	a7 e3       	ldi	r26, 0x37	; 55
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e7 e3       	ldi	r30, 0x37	; 55
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <M_DIO_void_SetPinDirection+0xc4>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <M_DIO_void_SetPinDirection+0xc0>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	99 c0       	rjmp	.+306    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTC_ID :                       /// Port C
			 		ClrBit(DDRC,pin);                /// clear pin value set it to 0
    15a8:	a4 e3       	ldi	r26, 0x34	; 52
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <M_DIO_void_SetPinDirection+0xee>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <M_DIO_void_SetPinDirection+0xea>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	84 c0       	rjmp	.+264    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTD_ID :                       /// Port D
			 		ClrBit(DDRD,pin);                /// clear pin value set it to 0
    15d2:	a1 e3       	ldi	r26, 0x31	; 49
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e1 e3       	ldi	r30, 0x31	; 49
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <M_DIO_void_SetPinDirection+0x118>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <M_DIO_void_SetPinDirection+0x114>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	6f c0       	rjmp	.+222    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
		break;        /////// break case INPUT

		/// case  INPUT means that the Direction of Pin = 1
		 case OUTPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3d 83       	std	Y+5, r19	; 0x05
    1604:	2c 83       	std	Y+4, r18	; 0x04
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	91 05       	cpc	r25, r1
    160e:	51 f1       	breq	.+84     	; 0x1664 <M_DIO_void_SetPinDirection+0x18c>
    1610:	2c 81       	ldd	r18, Y+4	; 0x04
    1612:	3d 81       	ldd	r19, Y+5	; 0x05
    1614:	23 30       	cpi	r18, 0x03	; 3
    1616:	31 05       	cpc	r19, r1
    1618:	34 f4       	brge	.+12     	; 0x1626 <M_DIO_void_SetPinDirection+0x14e>
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	61 f0       	breq	.+24     	; 0x163c <M_DIO_void_SetPinDirection+0x164>
    1624:	5a c0       	rjmp	.+180    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
    1626:	2c 81       	ldd	r18, Y+4	; 0x04
    1628:	3d 81       	ldd	r19, Y+5	; 0x05
    162a:	23 30       	cpi	r18, 0x03	; 3
    162c:	31 05       	cpc	r19, r1
    162e:	71 f1       	breq	.+92     	; 0x168c <M_DIO_void_SetPinDirection+0x1b4>
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	91 05       	cpc	r25, r1
    1638:	e9 f1       	breq	.+122    	; 0x16b4 <M_DIO_void_SetPinDirection+0x1dc>
    163a:	4f c0       	rjmp	.+158    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                   /// Port A
			 		SetBit(DDRA,pin);             /// SET pin value set it to 1
    163c:	aa e3       	ldi	r26, 0x3A	; 58
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ea e3       	ldi	r30, 0x3A	; 58
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <M_DIO_void_SetPinDirection+0x182>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <M_DIO_void_SetPinDirection+0x17e>
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	3b c0       	rjmp	.+118    	; 0x16da <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTA_ID

			 	case PORTB_ID :                  /// Port B
			 		SetBit(DDRB,pin);           /// SET pin value set it to 1
    1664:	a7 e3       	ldi	r26, 0x37	; 55
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e7 e3       	ldi	r30, 0x37	; 55
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <M_DIO_void_SetPinDirection+0x1aa>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <M_DIO_void_SetPinDirection+0x1a6>
    1686:	84 2b       	or	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	27 c0       	rjmp	.+78     	; 0x16da <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTB_ID

			 	case PORTC_ID :                  /// Port C
			 		SetBit(DDRC,pin);            /// SET pin value set it to 1
    168c:	a4 e3       	ldi	r26, 0x34	; 52
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e4 e3       	ldi	r30, 0x34	; 52
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <M_DIO_void_SetPinDirection+0x1d2>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <M_DIO_void_SetPinDirection+0x1ce>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	13 c0       	rjmp	.+38     	; 0x16da <M_DIO_void_SetPinDirection+0x202>
			 	break ;        /////// break case PORTC_ID

			 	case PORTD_ID :                  /// Port D
			 		SetBit(DDRD,pin);           /// SET pin value set it to 1
    16b4:	a1 e3       	ldi	r26, 0x31	; 49
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e1 e3       	ldi	r30, 0x31	; 49
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <M_DIO_void_SetPinDirection+0x1fa>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <M_DIO_void_SetPinDirection+0x1f6>
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24

		 default:       /*  Do nothing */        break;
		       ///* default of switch (direction) */
		}

}
    16da:	29 96       	adiw	r28, 0x09	; 9
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <M_DIO_void_SetPinValue>:



void M_DIO_void_SetPinValue(u8 port , u8 pin , u8 value)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	29 97       	sbiw	r28, 0x09	; 9
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	6a 83       	std	Y+2, r22	; 0x02
    1704:	4b 83       	std	Y+3, r20	; 0x03
	  /// SWITCH too determine the Value of the Pin
		switch (value)
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	39 87       	std	Y+9, r19	; 0x09
    170e:	28 87       	std	Y+8, r18	; 0x08
    1710:	88 85       	ldd	r24, Y+8	; 0x08
    1712:	99 85       	ldd	r25, Y+9	; 0x09
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	39 f0       	breq	.+14     	; 0x1726 <M_DIO_void_SetPinValue+0x3a>
    1718:	28 85       	ldd	r18, Y+8	; 0x08
    171a:	39 85       	ldd	r19, Y+9	; 0x09
    171c:	21 30       	cpi	r18, 0x01	; 1
    171e:	31 05       	cpc	r19, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <M_DIO_void_SetPinValue+0x38>
    1722:	76 c0       	rjmp	.+236    	; 0x1810 <M_DIO_void_SetPinValue+0x124>
    1724:	e4 c0       	rjmp	.+456    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
		{
		   /// case  LOW means that the Value of Pin = 0
          case LOW :
        	  //// SWITCH too determine the Port of the Pin
			       switch (port)
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3f 83       	std	Y+7, r19	; 0x07
    172e:	2e 83       	std	Y+6, r18	; 0x06
    1730:	8e 81       	ldd	r24, Y+6	; 0x06
    1732:	9f 81       	ldd	r25, Y+7	; 0x07
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	91 05       	cpc	r25, r1
    1738:	61 f1       	breq	.+88     	; 0x1792 <M_DIO_void_SetPinValue+0xa6>
    173a:	2e 81       	ldd	r18, Y+6	; 0x06
    173c:	3f 81       	ldd	r19, Y+7	; 0x07
    173e:	23 30       	cpi	r18, 0x03	; 3
    1740:	31 05       	cpc	r19, r1
    1742:	34 f4       	brge	.+12     	; 0x1750 <M_DIO_void_SetPinValue+0x64>
    1744:	8e 81       	ldd	r24, Y+6	; 0x06
    1746:	9f 81       	ldd	r25, Y+7	; 0x07
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	91 05       	cpc	r25, r1
    174c:	69 f0       	breq	.+26     	; 0x1768 <M_DIO_void_SetPinValue+0x7c>
    174e:	cf c0       	rjmp	.+414    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
    1750:	2e 81       	ldd	r18, Y+6	; 0x06
    1752:	3f 81       	ldd	r19, Y+7	; 0x07
    1754:	23 30       	cpi	r18, 0x03	; 3
    1756:	31 05       	cpc	r19, r1
    1758:	89 f1       	breq	.+98     	; 0x17bc <M_DIO_void_SetPinValue+0xd0>
    175a:	8e 81       	ldd	r24, Y+6	; 0x06
    175c:	9f 81       	ldd	r25, Y+7	; 0x07
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <M_DIO_void_SetPinValue+0x7a>
    1764:	40 c0       	rjmp	.+128    	; 0x17e6 <M_DIO_void_SetPinValue+0xfa>
    1766:	c3 c0       	rjmp	.+390    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
			       	{
			       	case PORTA_ID :                  /// Port A
			       		ClrBit(PORTA,pin);          ///  clear pin value set it to 0
    1768:	ab e3       	ldi	r26, 0x3B	; 59
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	eb e3       	ldi	r30, 0x3B	; 59
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <M_DIO_void_SetPinValue+0x9a>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <M_DIO_void_SetPinValue+0x96>
    178a:	80 95       	com	r24
    178c:	84 23       	and	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	ae c0       	rjmp	.+348    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
			       	break ;             /////// break case PORTA_ID

			       	case PORTB_ID :                 /// Port B
			       		ClrBit(PORTB,pin);          /// clear pin value set it to 0
    1792:	a8 e3       	ldi	r26, 0x38	; 56
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e8 e3       	ldi	r30, 0x38	; 56
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <M_DIO_void_SetPinValue+0xc4>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <M_DIO_void_SetPinValue+0xc0>
    17b4:	80 95       	com	r24
    17b6:	84 23       	and	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	99 c0       	rjmp	.+306    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
			       	break ;          /////// break case PORTB_ID

			       	case PORTC_ID :                 /// Port C
			       		ClrBit(PORTC,pin);          /// clear pin value set it to 0
    17bc:	a5 e3       	ldi	r26, 0x35	; 53
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e3       	ldi	r30, 0x35	; 53
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <M_DIO_void_SetPinValue+0xee>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <M_DIO_void_SetPinValue+0xea>
    17de:	80 95       	com	r24
    17e0:	84 23       	and	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	84 c0       	rjmp	.+264    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
			       	break ;         /////// break case PORTC_ID

			       	case PORTD_ID :                 /// Port D
			       		ClrBit(PORTD,pin);         /// clear pin value set it to 0
    17e6:	a2 e3       	ldi	r26, 0x32	; 50
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e2 e3       	ldi	r30, 0x32	; 50
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <M_DIO_void_SetPinValue+0x118>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <M_DIO_void_SetPinValue+0x114>
    1808:	80 95       	com	r24
    180a:	84 23       	and	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	6f c0       	rjmp	.+222    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
		 break;   /////// break case LOW

		 /// case  HIGH means that the Value of Pin = 1
		 case HIGH :
			 //// SWITCH too determine the Port of the Pin
			        switch (port)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3d 83       	std	Y+5, r19	; 0x05
    1818:	2c 83       	std	Y+4, r18	; 0x04
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	91 05       	cpc	r25, r1
    1822:	51 f1       	breq	.+84     	; 0x1878 <M_DIO_void_SetPinValue+0x18c>
    1824:	2c 81       	ldd	r18, Y+4	; 0x04
    1826:	3d 81       	ldd	r19, Y+5	; 0x05
    1828:	23 30       	cpi	r18, 0x03	; 3
    182a:	31 05       	cpc	r19, r1
    182c:	34 f4       	brge	.+12     	; 0x183a <M_DIO_void_SetPinValue+0x14e>
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	91 05       	cpc	r25, r1
    1836:	61 f0       	breq	.+24     	; 0x1850 <M_DIO_void_SetPinValue+0x164>
    1838:	5a c0       	rjmp	.+180    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	23 30       	cpi	r18, 0x03	; 3
    1840:	31 05       	cpc	r19, r1
    1842:	71 f1       	breq	.+92     	; 0x18a0 <M_DIO_void_SetPinValue+0x1b4>
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	91 05       	cpc	r25, r1
    184c:	e9 f1       	breq	.+122    	; 0x18c8 <M_DIO_void_SetPinValue+0x1dc>
    184e:	4f c0       	rjmp	.+158    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
			        	{
			        	case PORTA_ID :                /// Port A
			        		SetBit(PORTA,pin);         /// SET pin value set it to 1
    1850:	ab e3       	ldi	r26, 0x3B	; 59
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	eb e3       	ldi	r30, 0x3B	; 59
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <M_DIO_void_SetPinValue+0x182>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <M_DIO_void_SetPinValue+0x17e>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	3b c0       	rjmp	.+118    	; 0x18ee <M_DIO_void_SetPinValue+0x202>
			        	break ;             /////// break case PORTA_ID

			        	case PORTB_ID :                 /// Port B
			        		SetBit(PORTB,pin);         /// SET pin value set it to 1
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <M_DIO_void_SetPinValue+0x1aa>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <M_DIO_void_SetPinValue+0x1a6>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	27 c0       	rjmp	.+78     	; 0x18ee <M_DIO_void_SetPinValue+0x202>
			        	break ;          /////// break case PORTB_ID

			        	case PORTC_ID :                /// Port C
			        		SetBit(PORTC,pin);        /// SET pin value set it to 1
    18a0:	a5 e3       	ldi	r26, 0x35	; 53
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e5 e3       	ldi	r30, 0x35	; 53
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <M_DIO_void_SetPinValue+0x1d2>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <M_DIO_void_SetPinValue+0x1ce>
    18c2:	84 2b       	or	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	13 c0       	rjmp	.+38     	; 0x18ee <M_DIO_void_SetPinValue+0x202>
			        	break ;        /////// break case PORTC_ID

			        	case PORTD_ID :               /// Port D
			        		SetBit(PORTD,pin);        /// SET pin value set it to 1
    18c8:	a2 e3       	ldi	r26, 0x32	; 50
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <M_DIO_void_SetPinValue+0x1fa>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <M_DIO_void_SetPinValue+0x1f6>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
		break;         /////// break case HIGH

		default:   /*  Do nothing */       break;
		///* default of switch (value) */
		}
}
    18ee:	29 96       	adiw	r28, 0x09	; 9
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <M_DIO_void_PinTog>:
    //// Toggle Pin function //////
void M_DIO_void_PinTog(u8 port , u8 pin)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <M_DIO_void_PinTog+0x6>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <M_DIO_void_PinTog+0x8>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	6a 83       	std	Y+2, r22	; 0x02
	//// SWITCH too determine the Port of the Pin
	switch (port)
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3c 83       	std	Y+4, r19	; 0x04
    1918:	2b 83       	std	Y+3, r18	; 0x03
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	82 30       	cpi	r24, 0x02	; 2
    1920:	91 05       	cpc	r25, r1
    1922:	51 f1       	breq	.+84     	; 0x1978 <M_DIO_void_PinTog+0x78>
    1924:	2b 81       	ldd	r18, Y+3	; 0x03
    1926:	3c 81       	ldd	r19, Y+4	; 0x04
    1928:	23 30       	cpi	r18, 0x03	; 3
    192a:	31 05       	cpc	r19, r1
    192c:	34 f4       	brge	.+12     	; 0x193a <M_DIO_void_PinTog+0x3a>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	91 05       	cpc	r25, r1
    1936:	61 f0       	breq	.+24     	; 0x1950 <M_DIO_void_PinTog+0x50>
    1938:	5a c0       	rjmp	.+180    	; 0x19ee <M_DIO_void_PinTog+0xee>
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	3c 81       	ldd	r19, Y+4	; 0x04
    193e:	23 30       	cpi	r18, 0x03	; 3
    1940:	31 05       	cpc	r19, r1
    1942:	71 f1       	breq	.+92     	; 0x19a0 <M_DIO_void_PinTog+0xa0>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	84 30       	cpi	r24, 0x04	; 4
    194a:	91 05       	cpc	r25, r1
    194c:	e9 f1       	breq	.+122    	; 0x19c8 <M_DIO_void_PinTog+0xc8>
    194e:	4f c0       	rjmp	.+158    	; 0x19ee <M_DIO_void_PinTog+0xee>
		{

		  case PORTA_ID :                           /// Port A
			  TogBit(PORTA,pin);                    /// Toggle pin value
    1950:	ab e3       	ldi	r26, 0x3B	; 59
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	eb e3       	ldi	r30, 0x3B	; 59
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <M_DIO_void_PinTog+0x6e>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <M_DIO_void_PinTog+0x6a>
    1972:	84 27       	eor	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	3b c0       	rjmp	.+118    	; 0x19ee <M_DIO_void_PinTog+0xee>
		  break ;                       //// break case PORTA_ID

		  case PORTB_ID :                            /// Port B
			  TogBit(PORTB,pin);                     /// Toggle pin value
    1978:	a8 e3       	ldi	r26, 0x38	; 56
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e8 e3       	ldi	r30, 0x38	; 56
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <M_DIO_void_PinTog+0x96>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <M_DIO_void_PinTog+0x92>
    199a:	84 27       	eor	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	27 c0       	rjmp	.+78     	; 0x19ee <M_DIO_void_PinTog+0xee>
		  break ;                      /// / break case PORTB_ID

		  case PORTC_ID :                           /// Port C
			  TogBit(PORTC,pin);                   /// Toggle pin value
    19a0:	a5 e3       	ldi	r26, 0x35	; 53
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e5 e3       	ldi	r30, 0x35	; 53
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <M_DIO_void_PinTog+0xbe>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <M_DIO_void_PinTog+0xba>
    19c2:	84 27       	eor	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	13 c0       	rjmp	.+38     	; 0x19ee <M_DIO_void_PinTog+0xee>
		  break ;                       ///break case PORTC_ID

		  case PORTD_ID :                          /// Port D
			  TogBit(PORTD,pin);                    /// Toggle pin value
    19c8:	a2 e3       	ldi	r26, 0x32	; 50
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e2 e3       	ldi	r30, 0x32	; 50
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <M_DIO_void_PinTog+0xe6>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <M_DIO_void_PinTog+0xe2>
    19ea:	84 27       	eor	r24, r20
    19ec:	8c 93       	st	X, r24
		  break ;                       ///break case PORTD_ID

		  default :       /*  Do nothing */      break;
		  ///* default of switch (port) */
		}
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <M_DIO_U8_PinRead>:
u8 M_DIO_U8_PinRead(u8 port , u8 pin)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <M_DIO_U8_PinRead+0x6>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <M_DIO_U8_PinRead+0x8>
    1a04:	0f 92       	push	r0
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
    1a0c:	6b 83       	std	Y+3, r22	; 0x03
	/// local variable
	u8 local_u8_PinValue = 0;
    1a0e:	19 82       	std	Y+1, r1	; 0x01
	//// SWITCH too determine the Port of the Pin
		switch (port)
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	3d 83       	std	Y+5, r19	; 0x05
    1a18:	2c 83       	std	Y+4, r18	; 0x04
    1a1a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a1c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a1e:	42 30       	cpi	r20, 0x02	; 2
    1a20:	51 05       	cpc	r21, r1
    1a22:	41 f1       	breq	.+80     	; 0x1a74 <M_DIO_U8_PinRead+0x78>
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	34 f4       	brge	.+12     	; 0x1a3a <M_DIO_U8_PinRead+0x3e>
    1a2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a30:	3d 81       	ldd	r19, Y+5	; 0x05
    1a32:	21 30       	cpi	r18, 0x01	; 1
    1a34:	31 05       	cpc	r19, r1
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <M_DIO_U8_PinRead+0x54>
    1a38:	52 c0       	rjmp	.+164    	; 0x1ade <M_DIO_U8_PinRead+0xe2>
    1a3a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a3c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a3e:	43 30       	cpi	r20, 0x03	; 3
    1a40:	51 05       	cpc	r21, r1
    1a42:	51 f1       	breq	.+84     	; 0x1a98 <M_DIO_U8_PinRead+0x9c>
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	9d 81       	ldd	r25, Y+5	; 0x05
    1a48:	84 30       	cpi	r24, 0x04	; 4
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	b9 f1       	breq	.+110    	; 0x1abc <M_DIO_U8_PinRead+0xc0>
    1a4e:	47 c0       	rjmp	.+142    	; 0x1ade <M_DIO_U8_PinRead+0xe2>
			{

			  case PORTA_ID :                           /// Port A
				  local_u8_PinValue = GetBit(PINA,pin);                    /// Read pin value
    1a50:	e9 e3       	ldi	r30, 0x39	; 57
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a9 01       	movw	r20, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <M_DIO_U8_PinRead+0x6c>
    1a64:	55 95       	asr	r21
    1a66:	47 95       	ror	r20
    1a68:	8a 95       	dec	r24
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <M_DIO_U8_PinRead+0x68>
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	35 c0       	rjmp	.+106    	; 0x1ade <M_DIO_U8_PinRead+0xe2>
			  break ;                       //// break case PORTA_ID

			  case PORTB_ID :                            /// Port B
				  local_u8_PinValue = GetBit(PINB,pin);                     /// Read pin value
    1a74:	e6 e3       	ldi	r30, 0x36	; 54
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a9 01       	movw	r20, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <M_DIO_U8_PinRead+0x90>
    1a88:	55 95       	asr	r21
    1a8a:	47 95       	ror	r20
    1a8c:	8a 95       	dec	r24
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <M_DIO_U8_PinRead+0x8c>
    1a90:	ca 01       	movw	r24, r20
    1a92:	81 70       	andi	r24, 0x01	; 1
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	23 c0       	rjmp	.+70     	; 0x1ade <M_DIO_U8_PinRead+0xe2>
			  break ;                      /// / break case PORTB_ID

			  case PORTC_ID :                           /// Port C
				  local_u8_PinValue = GetBit(PINC,pin);                   /// Read pin value
    1a98:	e3 e3       	ldi	r30, 0x33	; 51
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a9 01       	movw	r20, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <M_DIO_U8_PinRead+0xb4>
    1aac:	55 95       	asr	r21
    1aae:	47 95       	ror	r20
    1ab0:	8a 95       	dec	r24
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <M_DIO_U8_PinRead+0xb0>
    1ab4:	ca 01       	movw	r24, r20
    1ab6:	81 70       	andi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	11 c0       	rjmp	.+34     	; 0x1ade <M_DIO_U8_PinRead+0xe2>
			  break ;                       ///break case PORTC_ID

			  case PORTD_ID :                          /// Port D
				  local_u8_PinValue = GetBit(PIND,pin);                    /// Read pin value
    1abc:	e0 e3       	ldi	r30, 0x30	; 48
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a9 01       	movw	r20, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <M_DIO_U8_PinRead+0xd8>
    1ad0:	55 95       	asr	r21
    1ad2:	47 95       	ror	r20
    1ad4:	8a 95       	dec	r24
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <M_DIO_U8_PinRead+0xd4>
    1ad8:	ca 01       	movw	r24, r20
    1ada:	81 70       	andi	r24, 0x01	; 1
    1adc:	89 83       	std	Y+1, r24	; 0x01
			  break ;                       ///break case PORTD_ID

			  default :       /*  Do nothing */      break;
			  ///* default of switch (port) */
			}
   return local_u8_PinValue;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <M_ADC_void_AdcInt>:


u16 x =0;

void M_ADC_void_AdcInt(void)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
#if V_REF == AVCC
	/// Selecting voltage reference to AVCC
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG, REFS0);
    1af8:	a7 e2       	ldi	r26, 0x27	; 39
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e7 e2       	ldi	r30, 0x27	; 39
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 64       	ori	r24, 0x40	; 64
    1b04:	8c 93       	st	X, r24
	// clear REFS0 bit in ADMUX_REG
	ClrBit(ADMUX_REG ,REFS1);
    1b06:	a7 e2       	ldi	r26, 0x27	; 39
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e7 e2       	ldi	r30, 0x27	; 39
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 77       	andi	r24, 0x7F	; 127
    1b12:	8c 93       	st	X, r24
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG ,REFS1);
#endif
	/// selecting Adjustment  Result
	// Clear ADLAR bit on ADMUX_REG to select right adjust result
	ClrBit(ADMUX_REG , ADLAR);
    1b14:	a7 e2       	ldi	r26, 0x27	; 39
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e7 e2       	ldi	r30, 0x27	; 39
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8f 7d       	andi	r24, 0xDF	; 223
    1b20:	8c 93       	st	X, r24
	/// selecting  channel
	// clear the four bit (MUX4 MUX3 MUX2 MUX1 MUX0 ) to select ADC0
	ClrBit(ADMUX_REG , MUX0);
    1b22:	a7 e2       	ldi	r26, 0x27	; 39
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e7 e2       	ldi	r30, 0x27	; 39
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8e 7f       	andi	r24, 0xFE	; 254
    1b2e:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX1);
    1b30:	a7 e2       	ldi	r26, 0x27	; 39
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e7 e2       	ldi	r30, 0x27	; 39
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	8d 7f       	andi	r24, 0xFD	; 253
    1b3c:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX2);
    1b3e:	a7 e2       	ldi	r26, 0x27	; 39
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e7 e2       	ldi	r30, 0x27	; 39
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8b 7f       	andi	r24, 0xFB	; 251
    1b4a:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX3);
    1b4c:	a7 e2       	ldi	r26, 0x27	; 39
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e7 e2       	ldi	r30, 0x27	; 39
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	87 7f       	andi	r24, 0xF7	; 247
    1b58:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX4);
    1b5a:	a7 e2       	ldi	r26, 0x27	; 39
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e7 e2       	ldi	r30, 0x27	; 39
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8f 7e       	andi	r24, 0xEF	; 239
    1b66:	8c 93       	st	X, r24

	//// select  Prescaler
	// To select 128 as devision factor C the three bit (ADPS2 ADPS1 ADPS0 ) on  ADCSRA_REG to
	SetBit(ADCSRA_REG , ADPS0 );
    1b68:	a6 e2       	ldi	r26, 0x26	; 38
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e6 e2       	ldi	r30, 0x26	; 38
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	81 60       	ori	r24, 0x01	; 1
    1b74:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1b76:	a6 e2       	ldi	r26, 0x26	; 38
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e6 e2       	ldi	r30, 0x26	; 38
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	82 60       	ori	r24, 0x02	; 2
    1b82:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1b84:	a6 e2       	ldi	r26, 0x26	; 38
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e6 e2       	ldi	r30, 0x26	; 38
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	82 60       	ori	r24, 0x02	; 2
    1b90:	8c 93       	st	X, r24

	/// To Enable Auto Trigger mode -> free running mode
	// set ADATE bit in  ADCSRA_REG
	 SetBit(ADCSRA_REG , ADATE );
    1b92:	a6 e2       	ldi	r26, 0x26	; 38
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e6 e2       	ldi	r30, 0x26	; 38
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 62       	ori	r24, 0x20	; 32
    1b9e:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS2 );
    1ba0:	a0 e5       	ldi	r26, 0x50	; 80
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e0 e5       	ldi	r30, 0x50	; 80
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	8f 77       	andi	r24, 0x7F	; 127
    1bac:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS1 );
    1bae:	a0 e5       	ldi	r26, 0x50	; 80
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e0 e5       	ldi	r30, 0x50	; 80
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8f 7b       	andi	r24, 0xBF	; 191
    1bba:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS0 );
    1bbc:	a0 e5       	ldi	r26, 0x50	; 80
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e0 e5       	ldi	r30, 0x50	; 80
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8f 7d       	andi	r24, 0xDF	; 223
    1bc8:	8c 93       	st	X, r24

	///Enable the ADC circuit
	//set bit ADEN on ADCSRA_REG
	SetBit(ADCSRA_REG , ADEN );
    1bca:	a6 e2       	ldi	r26, 0x26	; 38
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e6 e2       	ldi	r30, 0x26	; 38
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 68       	ori	r24, 0x80	; 128
    1bd6:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG ,ADSC );     //// to start conversion
    M_GIE_void_GIE_EN();          //// to enable  general interrupt
	SetBit(ADCSRA_REG ,ADIE );   //// to enable  ADC interrupt

#endif
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <M_ADC_u16_AdcRead>:
#if  ADC_MODE ==  ADC_POL
u16 M_ADC_u16_AdcRead(void)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
	//u16 Local_u16_value = 0;
	////////to start conversion
	//set ADSC bit in  ADCSRA_REG
	SetBit(ADCSRA_REG ,ADSC );
    1be6:	a6 e2       	ldi	r26, 0x26	; 38
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e6 e2       	ldi	r30, 0x26	; 38
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 64       	ori	r24, 0x40	; 64
    1bf2:	8c 93       	st	X, r24

   /// check  ADC Interrupt Flag to see if conversion completed or not
  	while(GetBit(ADCSRA_REG, ADIF) == 0);
    1bf4:	e6 e2       	ldi	r30, 0x26	; 38
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	82 95       	swap	r24
    1bfc:	8f 70       	andi	r24, 0x0F	; 15
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	81 70       	andi	r24, 0x01	; 1
    1c04:	90 70       	andi	r25, 0x00	; 0
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	a9 f3       	breq	.-22     	; 0x1bf4 <M_ADC_u16_AdcRead+0x16>
	return ADC_REG ;
    1c0a:	e4 e2       	ldi	r30, 0x24	; 36
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <H_TEMPSENSOR_void_TempSensorInt>:
 *      Author: AbdelRahman Atef
 */
#include "DIO_Int.h"
#include "TEMPSENSOR_Int.h"
void H_TEMPSENSOR_void_TempSensorInt(void)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
     M_DIO_void_SetPinDirection(PORTA_ID, PIN0, INPUT);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <H_TEMPSENSOR_void_TempSensorRead>:
u8 H_TEMPSENSOR_void_TempSensorRead(void)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <H_TEMPSENSOR_void_TempSensorRead+0x6>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
  u8 local_u8_AdcReading=0;
    1c3a:	1a 82       	std	Y+2, r1	; 0x02
  local_u8_AdcReading = M_ADC_u16_AdcRead();
    1c3c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <M_ADC_u16_AdcRead>
    1c40:	8a 83       	std	Y+2, r24	; 0x02
  u8 Temp =	  (((u32)local_u8_AdcReading * 500 )/1023);
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e0       	ldi	r26, 0x00	; 0
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	24 ef       	ldi	r18, 0xF4	; 244
    1c4e:	31 e0       	ldi	r19, 0x01	; 1
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 37 21 	call	0x426e	; 0x426e <__mulsi3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	2f ef       	ldi	r18, 0xFF	; 255
    1c62:	33 e0       	ldi	r19, 0x03	; 3
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 75 21 	call	0x42ea	; 0x42ea <__udivmodsi4>
    1c70:	da 01       	movw	r26, r20
    1c72:	c9 01       	movw	r24, r18
    1c74:	89 83       	std	Y+1, r24	; 0x01
  return Temp;
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <H_SSD_Void_SsdInt>:

#include "SSD_int.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_SSD_Void_SsdInt(void)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
	///******_Setting SSEG_LED_A_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_A_PORT, SSEG_LED_A_PIN, OUTPUT);
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_B_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_B_PORT, SSEG_LED_B_PIN, OUTPUT);
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	61 e0       	ldi	r22, 0x01	; 1
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_C_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_C_PORT, SSEG_LED_C_PIN, OUTPUT);
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	62 e0       	ldi	r22, 0x02	; 2
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_D_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_D_PORT, SSEG_LED_D_PIN, OUTPUT);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	63 e0       	ldi	r22, 0x03	; 3
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_E_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_E_PORT, SSEG_LED_E_PIN, OUTPUT);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	64 e0       	ldi	r22, 0x04	; 4
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_F_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_F_PORT, SSEG_LED_F_PIN, OUTPUT);
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	65 e0       	ldi	r22, 0x05	; 5
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_G_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_G_PORT, SSEG_LED_G_PIN, OUTPUT);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	66 e0       	ldi	r22, 0x06	; 6
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>

	///******_Setting SSEG_DOT_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_DOT_PORT  , SSEG_DOT_PIN  , OUTPUT);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	67 e0       	ldi	r22, 0x07	; 7
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>


	///******_Setting SSEG_EN1_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN1_PORT  , SSEG_EN1_PIN   , OUTPUT);
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	66 e0       	ldi	r22, 0x06	; 6
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_EN2_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN2_PORT  , SSEG_EN2_PIN   , OUTPUT);
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
    1ce6:	67 e0       	ldi	r22, 0x07	; 7
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>


}
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <H_SSD_Void_SsdDisplay>:

void H_SSD_Void_SsdDisplay(u8 Local_u8_Num)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	a4 97       	sbiw	r28, 0x24	; 36
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	88 a3       	std	Y+32, r24	; 0x20
  ///***** Local_u8_Units is a local variable to get Units number *******//
	 u8 Local_u8_Units = Local_u8_Num %10;
    1d0a:	88 a1       	ldd	r24, Y+32	; 0x20
    1d0c:	9a e0       	ldi	r25, 0x0A	; 10
    1d0e:	69 2f       	mov	r22, r25
    1d10:	0e 94 56 21 	call	0x42ac	; 0x42ac <__udivmodqi4>
    1d14:	89 2f       	mov	r24, r25
    1d16:	8f 8f       	std	Y+31, r24	; 0x1f
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
    1d18:	88 a1       	ldd	r24, Y+32	; 0x20
    1d1a:	9a e0       	ldi	r25, 0x0A	; 10
    1d1c:	69 2f       	mov	r22, r25
    1d1e:	0e 94 56 21 	call	0x42ac	; 0x42ac <__udivmodqi4>
    1d22:	8e 8f       	std	Y+30, r24	; 0x1e
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    1d24:	1d 8e       	std	Y+29, r1	; 0x1d
    1d26:	77 c4       	rjmp	.+2286   	; 0x2616 <H_SSD_Void_SsdDisplay+0x922>
	 	{
///********* switch case to Display the Units number ***********//
	 switch (Local_u8_Units)
    1d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	3c a3       	std	Y+36, r19	; 0x24
    1d30:	2b a3       	std	Y+35, r18	; 0x23
    1d32:	8b a1       	ldd	r24, Y+35	; 0x23
    1d34:	9c a1       	ldd	r25, Y+36	; 0x24
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	91 05       	cpc	r25, r1
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <H_SSD_Void_SsdDisplay+0x4a>
    1d3c:	d7 c0       	rjmp	.+430    	; 0x1eec <H_SSD_Void_SsdDisplay+0x1f8>
    1d3e:	2b a1       	ldd	r18, Y+35	; 0x23
    1d40:	3c a1       	ldd	r19, Y+36	; 0x24
    1d42:	25 30       	cpi	r18, 0x05	; 5
    1d44:	31 05       	cpc	r19, r1
    1d46:	ec f4       	brge	.+58     	; 0x1d82 <H_SSD_Void_SsdDisplay+0x8e>
    1d48:	8b a1       	ldd	r24, Y+35	; 0x23
    1d4a:	9c a1       	ldd	r25, Y+36	; 0x24
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <H_SSD_Void_SsdDisplay+0x60>
    1d52:	60 c0       	rjmp	.+192    	; 0x1e14 <H_SSD_Void_SsdDisplay+0x120>
    1d54:	2b a1       	ldd	r18, Y+35	; 0x23
    1d56:	3c a1       	ldd	r19, Y+36	; 0x24
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <H_SSD_Void_SsdDisplay+0x74>
    1d5e:	8b a1       	ldd	r24, Y+35	; 0x23
    1d60:	9c a1       	ldd	r25, Y+36	; 0x24
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	99 f1       	breq	.+102    	; 0x1dcc <H_SSD_Void_SsdDisplay+0xd8>
    1d66:	99 c1       	rjmp	.+818    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
    1d68:	2b a1       	ldd	r18, Y+35	; 0x23
    1d6a:	3c a1       	ldd	r19, Y+36	; 0x24
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <H_SSD_Void_SsdDisplay+0x80>
    1d72:	74 c0       	rjmp	.+232    	; 0x1e5c <H_SSD_Void_SsdDisplay+0x168>
    1d74:	8b a1       	ldd	r24, Y+35	; 0x23
    1d76:	9c a1       	ldd	r25, Y+36	; 0x24
    1d78:	83 30       	cpi	r24, 0x03	; 3
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <H_SSD_Void_SsdDisplay+0x8c>
    1d7e:	92 c0       	rjmp	.+292    	; 0x1ea4 <H_SSD_Void_SsdDisplay+0x1b0>
    1d80:	8c c1       	rjmp	.+792    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
    1d82:	2b a1       	ldd	r18, Y+35	; 0x23
    1d84:	3c a1       	ldd	r19, Y+36	; 0x24
    1d86:	27 30       	cpi	r18, 0x07	; 7
    1d88:	31 05       	cpc	r19, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <H_SSD_Void_SsdDisplay+0x9a>
    1d8c:	1b c1       	rjmp	.+566    	; 0x1fc4 <H_SSD_Void_SsdDisplay+0x2d0>
    1d8e:	8b a1       	ldd	r24, Y+35	; 0x23
    1d90:	9c a1       	ldd	r25, Y+36	; 0x24
    1d92:	88 30       	cpi	r24, 0x08	; 8
    1d94:	91 05       	cpc	r25, r1
    1d96:	6c f4       	brge	.+26     	; 0x1db2 <H_SSD_Void_SsdDisplay+0xbe>
    1d98:	2b a1       	ldd	r18, Y+35	; 0x23
    1d9a:	3c a1       	ldd	r19, Y+36	; 0x24
    1d9c:	25 30       	cpi	r18, 0x05	; 5
    1d9e:	31 05       	cpc	r19, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <H_SSD_Void_SsdDisplay+0xb0>
    1da2:	c8 c0       	rjmp	.+400    	; 0x1f34 <H_SSD_Void_SsdDisplay+0x240>
    1da4:	8b a1       	ldd	r24, Y+35	; 0x23
    1da6:	9c a1       	ldd	r25, Y+36	; 0x24
    1da8:	86 30       	cpi	r24, 0x06	; 6
    1daa:	91 05       	cpc	r25, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <H_SSD_Void_SsdDisplay+0xbc>
    1dae:	e6 c0       	rjmp	.+460    	; 0x1f7c <H_SSD_Void_SsdDisplay+0x288>
    1db0:	74 c1       	rjmp	.+744    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
    1db2:	2b a1       	ldd	r18, Y+35	; 0x23
    1db4:	3c a1       	ldd	r19, Y+36	; 0x24
    1db6:	28 30       	cpi	r18, 0x08	; 8
    1db8:	31 05       	cpc	r19, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <H_SSD_Void_SsdDisplay+0xca>
    1dbc:	27 c1       	rjmp	.+590    	; 0x200c <H_SSD_Void_SsdDisplay+0x318>
    1dbe:	8b a1       	ldd	r24, Y+35	; 0x23
    1dc0:	9c a1       	ldd	r25, Y+36	; 0x24
    1dc2:	89 30       	cpi	r24, 0x09	; 9
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <H_SSD_Void_SsdDisplay+0xd6>
    1dc8:	45 c1       	rjmp	.+650    	; 0x2054 <H_SSD_Void_SsdDisplay+0x360>
    1dca:	67 c1       	rjmp	.+718    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	 {
	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	62 e0       	ldi	r22, 0x02	; 2
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	63 e0       	ldi	r22, 0x03	; 3
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	64 e0       	ldi	r22, 0x04	; 4
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	65 e0       	ldi	r22, 0x05	; 5
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	66 e0       	ldi	r22, 0x06	; 6
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    1e12:	43 c1       	rjmp	.+646    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	61 e0       	ldi	r22, 0x01	; 1
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	62 e0       	ldi	r22, 0x02	; 2
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	63 e0       	ldi	r22, 0x03	; 3
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	64 e0       	ldi	r22, 0x04	; 4
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	65 e0       	ldi	r22, 0x05	; 5
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	66 e0       	ldi	r22, 0x06	; 6
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    1e5a:	1f c1       	rjmp	.+574    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	62 e0       	ldi	r22, 0x02	; 2
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	63 e0       	ldi	r22, 0x03	; 3
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	64 e0       	ldi	r22, 0x04	; 4
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	65 e0       	ldi	r22, 0x05	; 5
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	66 e0       	ldi	r22, 0x06	; 6
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    1ea2:	fb c0       	rjmp	.+502    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	61 e0       	ldi	r22, 0x01	; 1
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	62 e0       	ldi	r22, 0x02	; 2
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	63 e0       	ldi	r22, 0x03	; 3
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	64 e0       	ldi	r22, 0x04	; 4
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	65 e0       	ldi	r22, 0x05	; 5
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	66 e0       	ldi	r22, 0x06	; 6
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    1eea:	d7 c0       	rjmp	.+430    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	62 e0       	ldi	r22, 0x02	; 2
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	63 e0       	ldi	r22, 0x03	; 3
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	64 e0       	ldi	r22, 0x04	; 4
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	65 e0       	ldi	r22, 0x05	; 5
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	66 e0       	ldi	r22, 0x06	; 6
    1f2c:	41 e0       	ldi	r20, 0x01	; 1
    1f2e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    1f32:	b3 c0       	rjmp	.+358    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	62 e0       	ldi	r22, 0x02	; 2
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	63 e0       	ldi	r22, 0x03	; 3
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	64 e0       	ldi	r22, 0x04	; 4
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	65 e0       	ldi	r22, 0x05	; 5
    1f6a:	41 e0       	ldi	r20, 0x01	; 1
    1f6c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	66 e0       	ldi	r22, 0x06	; 6
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    1f7a:	8f c0       	rjmp	.+286    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	63 e0       	ldi	r22, 0x03	; 3
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	64 e0       	ldi	r22, 0x04	; 4
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	65 e0       	ldi	r22, 0x05	; 5
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	66 e0       	ldi	r22, 0x06	; 6
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    1fc2:	6b c0       	rjmp	.+214    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	61 e0       	ldi	r22, 0x01	; 1
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	62 e0       	ldi	r22, 0x02	; 2
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	63 e0       	ldi	r22, 0x03	; 3
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	64 e0       	ldi	r22, 0x04	; 4
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	65 e0       	ldi	r22, 0x05	; 5
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	66 e0       	ldi	r22, 0x06	; 6
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    200a:	47 c0       	rjmp	.+142    	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	61 e0       	ldi	r22, 0x01	; 1
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	62 e0       	ldi	r22, 0x02	; 2
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	63 e0       	ldi	r22, 0x03	; 3
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	64 e0       	ldi	r22, 0x04	; 4
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	65 e0       	ldi	r22, 0x05	; 5
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	66 e0       	ldi	r22, 0x06	; 6
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2052:	23 c0       	rjmp	.+70     	; 0x209a <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	61 e0       	ldi	r22, 0x01	; 1
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	63 e0       	ldi	r22, 0x03	; 3
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	64 e0       	ldi	r22, 0x04	; 4
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	65 e0       	ldi	r22, 0x05	; 5
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	66 e0       	ldi	r22, 0x06	; 6
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
  * To get units Numbers displayed on
  * Enable the SSEG_EN1_PIN = SetBit LOW
  * and
  * Disable the SSEG_EN2_PIN = SetBit HIGH
  */
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  LOW);
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	66 e0       	ldi	r22, 0x06	; 6
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	67 e0       	ldi	r22, 0x07	; 7
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 e8       	ldi	r26, 0x80	; 128
    20b4:	bf e3       	ldi	r27, 0x3F	; 63
    20b6:	89 8f       	std	Y+25, r24	; 0x19
    20b8:	9a 8f       	std	Y+26, r25	; 0x1a
    20ba:	ab 8f       	std	Y+27, r26	; 0x1b
    20bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	69 8d       	ldd	r22, Y+25	; 0x19
    20c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a e7       	ldi	r20, 0x7A	; 122
    20cc:	53 e4       	ldi	r21, 0x43	; 67
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	8d 8b       	std	Y+21, r24	; 0x15
    20d8:	9e 8b       	std	Y+22, r25	; 0x16
    20da:	af 8b       	std	Y+23, r26	; 0x17
    20dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20de:	6d 89       	ldd	r22, Y+21	; 0x15
    20e0:	7e 89       	ldd	r23, Y+22	; 0x16
    20e2:	8f 89       	ldd	r24, Y+23	; 0x17
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e8       	ldi	r20, 0x80	; 128
    20ec:	5f e3       	ldi	r21, 0x3F	; 63
    20ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f2:	88 23       	and	r24, r24
    20f4:	2c f4       	brge	.+10     	; 0x2100 <H_SSD_Void_SsdDisplay+0x40c>
		__ticks = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9c 8b       	std	Y+20, r25	; 0x14
    20fc:	8b 8b       	std	Y+19, r24	; 0x13
    20fe:	3f c0       	rjmp	.+126    	; 0x217e <H_SSD_Void_SsdDisplay+0x48a>
	else if (__tmp > 65535)
    2100:	6d 89       	ldd	r22, Y+21	; 0x15
    2102:	7e 89       	ldd	r23, Y+22	; 0x16
    2104:	8f 89       	ldd	r24, Y+23	; 0x17
    2106:	98 8d       	ldd	r25, Y+24	; 0x18
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	4c f5       	brge	.+82     	; 0x216a <H_SSD_Void_SsdDisplay+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	69 8d       	ldd	r22, Y+25	; 0x19
    211a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	51 e4       	ldi	r21, 0x41	; 65
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9c 8b       	std	Y+20, r25	; 0x14
    213e:	8b 8b       	std	Y+19, r24	; 0x13
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <H_SSD_Void_SsdDisplay+0x46c>
    2142:	89 e1       	ldi	r24, 0x19	; 25
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9a 8b       	std	Y+18, r25	; 0x12
    2148:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    214a:	89 89       	ldd	r24, Y+17	; 0x11
    214c:	9a 89       	ldd	r25, Y+18	; 0x12
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <H_SSD_Void_SsdDisplay+0x45a>
    2152:	9a 8b       	std	Y+18, r25	; 0x12
    2154:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	69 f7       	brne	.-38     	; 0x2142 <H_SSD_Void_SsdDisplay+0x44e>
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <H_SSD_Void_SsdDisplay+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	98 8b       	std	Y+16, r25	; 0x10
    2184:	8f 87       	std	Y+15, r24	; 0x0f
    2186:	8f 85       	ldd	r24, Y+15	; 0x0f
    2188:	98 89       	ldd	r25, Y+16	; 0x10
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <H_SSD_Void_SsdDisplay+0x496>
    218e:	98 8b       	std	Y+16, r25	; 0x10
    2190:	8f 87       	std	Y+15, r24	; 0x0f
	 	 	         _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  HIGH);
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	66 e0       	ldi	r22, 0x06	; 6
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>



///********* switch case to Display the Tens number ***********//
	 switch (Local_u8_Tens)
    219c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	3a a3       	std	Y+34, r19	; 0x22
    21a4:	29 a3       	std	Y+33, r18	; 0x21
    21a6:	89 a1       	ldd	r24, Y+33	; 0x21
    21a8:	9a a1       	ldd	r25, Y+34	; 0x22
    21aa:	84 30       	cpi	r24, 0x04	; 4
    21ac:	91 05       	cpc	r25, r1
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <H_SSD_Void_SsdDisplay+0x4be>
    21b0:	d7 c0       	rjmp	.+430    	; 0x2360 <H_SSD_Void_SsdDisplay+0x66c>
    21b2:	29 a1       	ldd	r18, Y+33	; 0x21
    21b4:	3a a1       	ldd	r19, Y+34	; 0x22
    21b6:	25 30       	cpi	r18, 0x05	; 5
    21b8:	31 05       	cpc	r19, r1
    21ba:	ec f4       	brge	.+58     	; 0x21f6 <H_SSD_Void_SsdDisplay+0x502>
    21bc:	89 a1       	ldd	r24, Y+33	; 0x21
    21be:	9a a1       	ldd	r25, Y+34	; 0x22
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	91 05       	cpc	r25, r1
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <H_SSD_Void_SsdDisplay+0x4d4>
    21c6:	60 c0       	rjmp	.+192    	; 0x2288 <H_SSD_Void_SsdDisplay+0x594>
    21c8:	29 a1       	ldd	r18, Y+33	; 0x21
    21ca:	3a a1       	ldd	r19, Y+34	; 0x22
    21cc:	22 30       	cpi	r18, 0x02	; 2
    21ce:	31 05       	cpc	r19, r1
    21d0:	2c f4       	brge	.+10     	; 0x21dc <H_SSD_Void_SsdDisplay+0x4e8>
    21d2:	89 a1       	ldd	r24, Y+33	; 0x21
    21d4:	9a a1       	ldd	r25, Y+34	; 0x22
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	99 f1       	breq	.+102    	; 0x2240 <H_SSD_Void_SsdDisplay+0x54c>
    21da:	99 c1       	rjmp	.+818    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
    21dc:	29 a1       	ldd	r18, Y+33	; 0x21
    21de:	3a a1       	ldd	r19, Y+34	; 0x22
    21e0:	22 30       	cpi	r18, 0x02	; 2
    21e2:	31 05       	cpc	r19, r1
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <H_SSD_Void_SsdDisplay+0x4f4>
    21e6:	74 c0       	rjmp	.+232    	; 0x22d0 <H_SSD_Void_SsdDisplay+0x5dc>
    21e8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ea:	9a a1       	ldd	r25, Y+34	; 0x22
    21ec:	83 30       	cpi	r24, 0x03	; 3
    21ee:	91 05       	cpc	r25, r1
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <H_SSD_Void_SsdDisplay+0x500>
    21f2:	92 c0       	rjmp	.+292    	; 0x2318 <H_SSD_Void_SsdDisplay+0x624>
    21f4:	8c c1       	rjmp	.+792    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
    21f6:	29 a1       	ldd	r18, Y+33	; 0x21
    21f8:	3a a1       	ldd	r19, Y+34	; 0x22
    21fa:	27 30       	cpi	r18, 0x07	; 7
    21fc:	31 05       	cpc	r19, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <H_SSD_Void_SsdDisplay+0x50e>
    2200:	1b c1       	rjmp	.+566    	; 0x2438 <H_SSD_Void_SsdDisplay+0x744>
    2202:	89 a1       	ldd	r24, Y+33	; 0x21
    2204:	9a a1       	ldd	r25, Y+34	; 0x22
    2206:	88 30       	cpi	r24, 0x08	; 8
    2208:	91 05       	cpc	r25, r1
    220a:	6c f4       	brge	.+26     	; 0x2226 <H_SSD_Void_SsdDisplay+0x532>
    220c:	29 a1       	ldd	r18, Y+33	; 0x21
    220e:	3a a1       	ldd	r19, Y+34	; 0x22
    2210:	25 30       	cpi	r18, 0x05	; 5
    2212:	31 05       	cpc	r19, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <H_SSD_Void_SsdDisplay+0x524>
    2216:	c8 c0       	rjmp	.+400    	; 0x23a8 <H_SSD_Void_SsdDisplay+0x6b4>
    2218:	89 a1       	ldd	r24, Y+33	; 0x21
    221a:	9a a1       	ldd	r25, Y+34	; 0x22
    221c:	86 30       	cpi	r24, 0x06	; 6
    221e:	91 05       	cpc	r25, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <H_SSD_Void_SsdDisplay+0x530>
    2222:	e6 c0       	rjmp	.+460    	; 0x23f0 <H_SSD_Void_SsdDisplay+0x6fc>
    2224:	74 c1       	rjmp	.+744    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
    2226:	29 a1       	ldd	r18, Y+33	; 0x21
    2228:	3a a1       	ldd	r19, Y+34	; 0x22
    222a:	28 30       	cpi	r18, 0x08	; 8
    222c:	31 05       	cpc	r19, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <H_SSD_Void_SsdDisplay+0x53e>
    2230:	27 c1       	rjmp	.+590    	; 0x2480 <H_SSD_Void_SsdDisplay+0x78c>
    2232:	89 a1       	ldd	r24, Y+33	; 0x21
    2234:	9a a1       	ldd	r25, Y+34	; 0x22
    2236:	89 30       	cpi	r24, 0x09	; 9
    2238:	91 05       	cpc	r25, r1
    223a:	09 f4       	brne	.+2      	; 0x223e <H_SSD_Void_SsdDisplay+0x54a>
    223c:	45 c1       	rjmp	.+650    	; 0x24c8 <H_SSD_Void_SsdDisplay+0x7d4>
    223e:	67 c1       	rjmp	.+718    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	 {

	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	62 e0       	ldi	r22, 0x02	; 2
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	63 e0       	ldi	r22, 0x03	; 3
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	64 e0       	ldi	r22, 0x04	; 4
    226c:	41 e0       	ldi	r20, 0x01	; 1
    226e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	65 e0       	ldi	r22, 0x05	; 5
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	66 e0       	ldi	r22, 0x06	; 6
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2286:	43 c1       	rjmp	.+646    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	61 e0       	ldi	r22, 0x01	; 1
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	62 e0       	ldi	r22, 0x02	; 2
    22a0:	41 e0       	ldi	r20, 0x01	; 1
    22a2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	63 e0       	ldi	r22, 0x03	; 3
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	64 e0       	ldi	r22, 0x04	; 4
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	65 e0       	ldi	r22, 0x05	; 5
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	66 e0       	ldi	r22, 0x06	; 6
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    22ce:	1f c1       	rjmp	.+574    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	62 e0       	ldi	r22, 0x02	; 2
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	63 e0       	ldi	r22, 0x03	; 3
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	64 e0       	ldi	r22, 0x04	; 4
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	65 e0       	ldi	r22, 0x05	; 5
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	66 e0       	ldi	r22, 0x06	; 6
    2310:	41 e0       	ldi	r20, 0x01	; 1
    2312:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2316:	fb c0       	rjmp	.+502    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	41 e0       	ldi	r20, 0x01	; 1
    231e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	61 e0       	ldi	r22, 0x01	; 1
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	62 e0       	ldi	r22, 0x02	; 2
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	63 e0       	ldi	r22, 0x03	; 3
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	64 e0       	ldi	r22, 0x04	; 4
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	65 e0       	ldi	r22, 0x05	; 5
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	66 e0       	ldi	r22, 0x06	; 6
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    235e:	d7 c0       	rjmp	.+430    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	62 e0       	ldi	r22, 0x02	; 2
    2378:	41 e0       	ldi	r20, 0x01	; 1
    237a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	63 e0       	ldi	r22, 0x03	; 3
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	64 e0       	ldi	r22, 0x04	; 4
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	65 e0       	ldi	r22, 0x05	; 5
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	66 e0       	ldi	r22, 0x06	; 6
    23a0:	41 e0       	ldi	r20, 0x01	; 1
    23a2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    23a6:	b3 c0       	rjmp	.+358    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	62 e0       	ldi	r22, 0x02	; 2
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	63 e0       	ldi	r22, 0x03	; 3
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	64 e0       	ldi	r22, 0x04	; 4
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	65 e0       	ldi	r22, 0x05	; 5
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	66 e0       	ldi	r22, 0x06	; 6
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    23ee:	8f c0       	rjmp	.+286    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	41 e0       	ldi	r20, 0x01	; 1
    23f6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	62 e0       	ldi	r22, 0x02	; 2
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	63 e0       	ldi	r22, 0x03	; 3
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	64 e0       	ldi	r22, 0x04	; 4
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	65 e0       	ldi	r22, 0x05	; 5
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	66 e0       	ldi	r22, 0x06	; 6
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2436:	6b c0       	rjmp	.+214    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	62 e0       	ldi	r22, 0x02	; 2
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	63 e0       	ldi	r22, 0x03	; 3
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	64 e0       	ldi	r22, 0x04	; 4
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	65 e0       	ldi	r22, 0x05	; 5
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	66 e0       	ldi	r22, 0x06	; 6
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    247e:	47 c0       	rjmp	.+142    	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	41 e0       	ldi	r20, 0x01	; 1
    2490:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	62 e0       	ldi	r22, 0x02	; 2
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	63 e0       	ldi	r22, 0x03	; 3
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	64 e0       	ldi	r22, 0x04	; 4
    24ac:	41 e0       	ldi	r20, 0x01	; 1
    24ae:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	65 e0       	ldi	r22, 0x05	; 5
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	66 e0       	ldi	r22, 0x06	; 6
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    24c6:	23 c0       	rjmp	.+70     	; 0x250e <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	61 e0       	ldi	r22, 0x01	; 1
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	62 e0       	ldi	r22, 0x02	; 2
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	63 e0       	ldi	r22, 0x03	; 3
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	64 e0       	ldi	r22, 0x04	; 4
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	65 e0       	ldi	r22, 0x05	; 5
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	66 e0       	ldi	r22, 0x06	; 6
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
 * Disable the SSEG_EN1_PIN = SetBit HIGH
 * and
 * Enable the SSEG_EN2_PIN = SetBit LOW
 *
 */
     M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN, HIGH);
    250e:	83 e0       	ldi	r24, 0x03	; 3
    2510:	66 e0       	ldi	r22, 0x06	; 6
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	67 e0       	ldi	r22, 0x07	; 7
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	a0 e8       	ldi	r26, 0x80	; 128
    2528:	bf e3       	ldi	r27, 0x3F	; 63
    252a:	8b 87       	std	Y+11, r24	; 0x0b
    252c:	9c 87       	std	Y+12, r25	; 0x0c
    252e:	ad 87       	std	Y+13, r26	; 0x0d
    2530:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2532:	6b 85       	ldd	r22, Y+11	; 0x0b
    2534:	7c 85       	ldd	r23, Y+12	; 0x0c
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	9e 85       	ldd	r25, Y+14	; 0x0e
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4a e7       	ldi	r20, 0x7A	; 122
    2540:	53 e4       	ldi	r21, 0x43	; 67
    2542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	8f 83       	std	Y+7, r24	; 0x07
    254c:	98 87       	std	Y+8, r25	; 0x08
    254e:	a9 87       	std	Y+9, r26	; 0x09
    2550:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2552:	6f 81       	ldd	r22, Y+7	; 0x07
    2554:	78 85       	ldd	r23, Y+8	; 0x08
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e8       	ldi	r20, 0x80	; 128
    2560:	5f e3       	ldi	r21, 0x3F	; 63
    2562:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2566:	88 23       	and	r24, r24
    2568:	2c f4       	brge	.+10     	; 0x2574 <H_SSD_Void_SsdDisplay+0x880>
		__ticks = 1;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	3f c0       	rjmp	.+126    	; 0x25f2 <H_SSD_Void_SsdDisplay+0x8fe>
	else if (__tmp > 65535)
    2574:	6f 81       	ldd	r22, Y+7	; 0x07
    2576:	78 85       	ldd	r23, Y+8	; 0x08
    2578:	89 85       	ldd	r24, Y+9	; 0x09
    257a:	9a 85       	ldd	r25, Y+10	; 0x0a
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	3f ef       	ldi	r19, 0xFF	; 255
    2580:	4f e7       	ldi	r20, 0x7F	; 127
    2582:	57 e4       	ldi	r21, 0x47	; 71
    2584:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2588:	18 16       	cp	r1, r24
    258a:	4c f5       	brge	.+82     	; 0x25de <H_SSD_Void_SsdDisplay+0x8ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258c:	6b 85       	ldd	r22, Y+11	; 0x0b
    258e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2590:	8d 85       	ldd	r24, Y+13	; 0x0d
    2592:	9e 85       	ldd	r25, Y+14	; 0x0e
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
    25b4:	0f c0       	rjmp	.+30     	; 0x25d4 <H_SSD_Void_SsdDisplay+0x8e0>
    25b6:	89 e1       	ldi	r24, 0x19	; 25
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9c 83       	std	Y+4, r25	; 0x04
    25bc:	8b 83       	std	Y+3, r24	; 0x03
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <H_SSD_Void_SsdDisplay+0x8ce>
    25c6:	9c 83       	std	Y+4, r25	; 0x04
    25c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	69 f7       	brne	.-38     	; 0x25b6 <H_SSD_Void_SsdDisplay+0x8c2>
    25dc:	14 c0       	rjmp	.+40     	; 0x2606 <H_SSD_Void_SsdDisplay+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25de:	6f 81       	ldd	r22, Y+7	; 0x07
    25e0:	78 85       	ldd	r23, Y+8	; 0x08
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	9e 81       	ldd	r25, Y+6	; 0x06
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <H_SSD_Void_SsdDisplay+0x90a>
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	67 e0       	ldi	r22, 0x07	; 7
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	 u8 Local_u8_Units = Local_u8_Num %10;
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    2610:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2612:	8f 5f       	subi	r24, 0xFF	; 255
    2614:	8d 8f       	std	Y+29, r24	; 0x1d
    2616:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2618:	88 3c       	cpi	r24, 0xC8	; 200
    261a:	08 f4       	brcc	.+2      	; 0x261e <H_SSD_Void_SsdDisplay+0x92a>
    261c:	85 cb       	rjmp	.-2294   	; 0x1d28 <H_SSD_Void_SsdDisplay+0x34>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);

}
}
    261e:	a4 96       	adiw	r28, 0x24	; 36
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <H_SSD_Void_SsdDisplayCountDown>:
///***********to count down and display numbers*******/
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	00 d0       	rcall	.+0      	; 0x2636 <H_SSD_Void_SsdDisplayCountDown+0x6>
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	8a 83       	std	Y+2, r24	; 0x02

	   s8 Local_s8_Counter = 0;   ////for loop local counter
    263c:	19 82       	std	Y+1, r1	; 0x01
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	06 c0       	rjmp	.+12     	; 0x2650 <H_SSD_Void_SsdDisplayCountDown+0x20>
	     {
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <H_SSD_Void_SsdDisplay>
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{

	   s8 Local_s8_Counter = 0;   ////for loop local counter
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	81 50       	subi	r24, 0x01	; 1
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	88 23       	and	r24, r24
    2654:	bc f7       	brge	.-18     	; 0x2644 <H_SSD_Void_SsdDisplayCountDown+0x14>
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
		 }


}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <H_SERVOMOTOR_void_ServoMotorInt>:

////***************** FUNCTIONS **********//

////***************** Function to initialize the servo motor **********//
void H_SERVOMOTOR_void_ServoMotorInt(void)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Pwm1Int();
    2668:	0e 94 75 07 	call	0xeea	; 0xeea <M_TIMER1_void_Pwm1Int>
	M_TIMER1_void_Pwm1SetFrequancy(50);
    266c:	62 e3       	ldi	r22, 0x32	; 50
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 ab 07 	call	0xf56	; 0xf56 <M_TIMER1_void_Pwm1SetFrequancy>
}
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <H_SERVOMOTOR_void_ServoMotorSetAngel>:
////***************** Function to set angel of the servo motor **********//
void H_SERVOMOTOR_void_ServoMotorSetAngel(u8 Local_u8Angel)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	00 d0       	rcall	.+0      	; 0x2684 <H_SERVOMOTOR_void_ServoMotorSetAngel+0x6>
    2684:	00 d0       	rcall	.+0      	; 0x2686 <H_SERVOMOTOR_void_ServoMotorSetAngel+0x8>
    2686:	0f 92       	push	r0
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_f32DutyCycleValue = ((5.0 * Local_u8Angel) / 180.0) + 5.0;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	aa 27       	eor	r26, r26
    2696:	97 fd       	sbrc	r25, 7
    2698:	a0 95       	com	r26
    269a:	ba 2f       	mov	r27, r26
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 ea       	ldi	r20, 0xA0	; 160
    26b2:	50 e4       	ldi	r21, 0x40	; 64
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	44 e3       	ldi	r20, 0x34	; 52
    26c6:	53 e4       	ldi	r21, 0x43	; 67
    26c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 ea       	ldi	r20, 0xA0	; 160
    26da:	50 e4       	ldi	r21, 0x40	; 64
    26dc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	ab 83       	std	Y+3, r26	; 0x03
    26ea:	bc 83       	std	Y+4, r27	; 0x04
	M_TIMER1_void_Pwm1SetDutycycle(Local_f32DutyCycleValue);
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	ab 81       	ldd	r26, Y+3	; 0x03
    26f2:	bc 81       	ldd	r27, Y+4	; 0x04
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_TIMER1_void_Pwm1SetDutycycle>
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <H_SERVOMOTOR_void_ServoMotorStart>:
////***************** Function to start servo motor **********//
void H_SERVOMOTOR_void_ServoMotorStart(void)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Pwm1Start();
    2714:	0e 94 1e 08 	call	0x103c	; 0x103c <M_TIMER1_void_Pwm1Start>
}
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <H_SERVOMOTOR_void_ServoMotorStop>:
////***************** Function to stop servo motor **********//
void H_SERVOMOTOR_void_ServoMotorStop(void)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Pwm1Stop();
    2726:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_TIMER1_void_Pwm1Stop>
}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <H_PushButton_void_PushButtonInt>:
/*********Macros ************/

/********************************_FUNCTION _****************************/
///************_H_PushButton_void_PushButtonInt to set pin direction  _***********//
void H_PushButton_void_PushButtonInt(u8 Local_u8_PushButton)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <H_PushButton_void_PushButtonInt+0x6>
    2736:	0f 92       	push	r0
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	89 83       	std	Y+1, r24	; 0x01
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	3b 83       	std	Y+3, r19	; 0x03
    2746:	2a 83       	std	Y+2, r18	; 0x02
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	82 30       	cpi	r24, 0x02	; 2
    274e:	91 05       	cpc	r25, r1
    2750:	e1 f0       	breq	.+56     	; 0x278a <H_PushButton_void_PushButtonInt+0x5a>
    2752:	2a 81       	ldd	r18, Y+2	; 0x02
    2754:	3b 81       	ldd	r19, Y+3	; 0x03
    2756:	23 30       	cpi	r18, 0x03	; 3
    2758:	31 05       	cpc	r19, r1
    275a:	34 f4       	brge	.+12     	; 0x2768 <H_PushButton_void_PushButtonInt+0x38>
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	9b 81       	ldd	r25, Y+3	; 0x03
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	91 05       	cpc	r25, r1
    2764:	61 f0       	breq	.+24     	; 0x277e <H_PushButton_void_PushButtonInt+0x4e>
    2766:	22 c0       	rjmp	.+68     	; 0x27ac <H_PushButton_void_PushButtonInt+0x7c>
    2768:	2a 81       	ldd	r18, Y+2	; 0x02
    276a:	3b 81       	ldd	r19, Y+3	; 0x03
    276c:	23 30       	cpi	r18, 0x03	; 3
    276e:	31 05       	cpc	r19, r1
    2770:	91 f0       	breq	.+36     	; 0x2796 <H_PushButton_void_PushButtonInt+0x66>
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	9b 81       	ldd	r25, Y+3	; 0x03
    2776:	84 30       	cpi	r24, 0x04	; 4
    2778:	91 05       	cpc	r25, r1
    277a:	99 f0       	breq	.+38     	; 0x27a2 <H_PushButton_void_PushButtonInt+0x72>
    277c:	17 c0       	rjmp	.+46     	; 0x27ac <H_PushButton_void_PushButtonInt+0x7c>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Set PUSHBUTTON1_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN , INPUT);
    277e:	84 e0       	ldi	r24, 0x04	; 4
    2780:	62 e0       	ldi	r22, 0x02	; 2
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
    2788:	11 c0       	rjmp	.+34     	; 0x27ac <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Set PUSHBUTTON2_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN, INPUT);
    278a:	84 e0       	ldi	r24, 0x04	; 4
    278c:	63 e0       	ldi	r22, 0x03	; 3
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
    2794:	0b c0       	rjmp	.+22     	; 0x27ac <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Set PUSHBUTTON3_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN, INPUT);
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	64 e0       	ldi	r22, 0x04	; 4
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
    27a0:	05 c0       	rjmp	.+10     	; 0x27ac <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Set PUSHBUTTON4_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN, INPUT);
    27a2:	84 e0       	ldi	r24, 0x04	; 4
    27a4:	65 e0       	ldi	r22, 0x05	; 5
    27a6:	40 e0       	ldi	r20, 0x00	; 0
    27a8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <H_PushButton_u8_PushButtonRead>:
///************_H_PushButton_u8_PushButtonRead to Read pin value  _***********//
u8 H_PushButton_u8_PushButtonRead (u8 Local_u8_PushButton)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	ec 97       	sbiw	r28, 0x3c	; 60
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_PushButtonValue = 0;
    27ce:	19 ae       	std	Y+57, r1	; 0x39
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    27d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	3c af       	std	Y+60, r19	; 0x3c
    27d8:	2b af       	std	Y+59, r18	; 0x3b
    27da:	8b ad       	ldd	r24, Y+59	; 0x3b
    27dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    27de:	82 30       	cpi	r24, 0x02	; 2
    27e0:	91 05       	cpc	r25, r1
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <H_PushButton_u8_PushButtonRead+0x2e>
    27e4:	a2 c0       	rjmp	.+324    	; 0x292a <H_PushButton_u8_PushButtonRead+0x172>
    27e6:	2b ad       	ldd	r18, Y+59	; 0x3b
    27e8:	3c ad       	ldd	r19, Y+60	; 0x3c
    27ea:	23 30       	cpi	r18, 0x03	; 3
    27ec:	31 05       	cpc	r19, r1
    27ee:	34 f4       	brge	.+12     	; 0x27fc <H_PushButton_u8_PushButtonRead+0x44>
    27f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    27f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    27f4:	81 30       	cpi	r24, 0x01	; 1
    27f6:	91 05       	cpc	r25, r1
    27f8:	71 f0       	breq	.+28     	; 0x2816 <H_PushButton_u8_PushButtonRead+0x5e>
    27fa:	33 c2       	rjmp	.+1126   	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
    27fc:	2b ad       	ldd	r18, Y+59	; 0x3b
    27fe:	3c ad       	ldd	r19, Y+60	; 0x3c
    2800:	23 30       	cpi	r18, 0x03	; 3
    2802:	31 05       	cpc	r19, r1
    2804:	09 f4       	brne	.+2      	; 0x2808 <H_PushButton_u8_PushButtonRead+0x50>
    2806:	1b c1       	rjmp	.+566    	; 0x2a3e <H_PushButton_u8_PushButtonRead+0x286>
    2808:	8b ad       	ldd	r24, Y+59	; 0x3b
    280a:	9c ad       	ldd	r25, Y+60	; 0x3c
    280c:	84 30       	cpi	r24, 0x04	; 4
    280e:	91 05       	cpc	r25, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <H_PushButton_u8_PushButtonRead+0x5c>
    2812:	9f c1       	rjmp	.+830    	; 0x2b52 <H_PushButton_u8_PushButtonRead+0x39a>
    2814:	26 c2       	rjmp	.+1100   	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Read PUSHBUTTON1_PIN value  _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN );
    2816:	84 e0       	ldi	r24, 0x04	; 4
    2818:	62 e0       	ldi	r22, 0x02	; 2
    281a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    281e:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON1 _ ************//
		if(Local_u8_PushButtonValue == PRESSED) ///check if button is pressed
    2820:	89 ad       	ldd	r24, Y+57	; 0x39
    2822:	88 23       	and	r24, r24
    2824:	09 f0       	breq	.+2      	; 0x2828 <H_PushButton_u8_PushButtonRead+0x70>
    2826:	1d c2       	rjmp	.+1082   	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e7       	ldi	r26, 0x70	; 112
    282e:	b2 e4       	ldi	r27, 0x42	; 66
    2830:	8d ab       	std	Y+53, r24	; 0x35
    2832:	9e ab       	std	Y+54, r25	; 0x36
    2834:	af ab       	std	Y+55, r26	; 0x37
    2836:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6d a9       	ldd	r22, Y+53	; 0x35
    283a:	7e a9       	ldd	r23, Y+54	; 0x36
    283c:	8f a9       	ldd	r24, Y+55	; 0x37
    283e:	98 ad       	ldd	r25, Y+56	; 0x38
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a e7       	ldi	r20, 0x7A	; 122
    2846:	53 e4       	ldi	r21, 0x43	; 67
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	89 ab       	std	Y+49, r24	; 0x31
    2852:	9a ab       	std	Y+50, r25	; 0x32
    2854:	ab ab       	std	Y+51, r26	; 0x33
    2856:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2858:	69 a9       	ldd	r22, Y+49	; 0x31
    285a:	7a a9       	ldd	r23, Y+50	; 0x32
    285c:	8b a9       	ldd	r24, Y+51	; 0x33
    285e:	9c a9       	ldd	r25, Y+52	; 0x34
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <H_PushButton_u8_PushButtonRead+0xc2>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	98 ab       	std	Y+48, r25	; 0x30
    2876:	8f a7       	std	Y+47, r24	; 0x2f
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <H_PushButton_u8_PushButtonRead+0x140>
	else if (__tmp > 65535)
    287a:	69 a9       	ldd	r22, Y+49	; 0x31
    287c:	7a a9       	ldd	r23, Y+50	; 0x32
    287e:	8b a9       	ldd	r24, Y+51	; 0x33
    2880:	9c a9       	ldd	r25, Y+52	; 0x34
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <H_PushButton_u8_PushButtonRead+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6d a9       	ldd	r22, Y+53	; 0x35
    2894:	7e a9       	ldd	r23, Y+54	; 0x36
    2896:	8f a9       	ldd	r24, Y+55	; 0x37
    2898:	98 ad       	ldd	r25, Y+56	; 0x38
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	98 ab       	std	Y+48, r25	; 0x30
    28b8:	8f a7       	std	Y+47, r24	; 0x2f
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <H_PushButton_u8_PushButtonRead+0x122>
    28bc:	89 e1       	ldi	r24, 0x19	; 25
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9e a7       	std	Y+46, r25	; 0x2e
    28c2:	8d a7       	std	Y+45, r24	; 0x2d
    28c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    28c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <H_PushButton_u8_PushButtonRead+0x110>
    28cc:	9e a7       	std	Y+46, r25	; 0x2e
    28ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d2:	98 a9       	ldd	r25, Y+48	; 0x30
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	98 ab       	std	Y+48, r25	; 0x30
    28d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8f a5       	ldd	r24, Y+47	; 0x2f
    28dc:	98 a9       	ldd	r25, Y+48	; 0x30
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <H_PushButton_u8_PushButtonRead+0x104>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <H_PushButton_u8_PushButtonRead+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	69 a9       	ldd	r22, Y+49	; 0x31
    28e6:	7a a9       	ldd	r23, Y+50	; 0x32
    28e8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ea:	9c a9       	ldd	r25, Y+52	; 0x34
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	98 ab       	std	Y+48, r25	; 0x30
    28f6:	8f a7       	std	Y+47, r24	; 0x2f
    28f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fa:	98 a9       	ldd	r25, Y+48	; 0x30
    28fc:	9c a7       	std	Y+44, r25	; 0x2c
    28fe:	8b a7       	std	Y+43, r24	; 0x2b
    2900:	8b a5       	ldd	r24, Y+43	; 0x2b
    2902:	9c a5       	ldd	r25, Y+44	; 0x2c
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <H_PushButton_u8_PushButtonRead+0x14c>
    2908:	9c a7       	std	Y+44, r25	; 0x2c
    290a:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);      /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED)
    290c:	84 e0       	ldi	r24, 0x04	; 4
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2914:	88 23       	and	r24, r24
    2916:	09 f0       	breq	.+2      	; 0x291a <H_PushButton_u8_PushButtonRead+0x162>
    2918:	a4 c1       	rjmp	.+840    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
	   ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED);
    291a:	84 e0       	ldi	r24, 0x04	; 4
    291c:	62 e0       	ldi	r22, 0x02	; 2
    291e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2922:	88 23       	and	r24, r24
    2924:	d1 f3       	breq	.-12     	; 0x291a <H_PushButton_u8_PushButtonRead+0x162>
			    //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
				Local_u8_PushButtonValue = PRESSED;
    2926:	19 ae       	std	Y+57, r1	; 0x39
    2928:	9c c1       	rjmp	.+824    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON1 **************************///

		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Read PUSHBUTTON2_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN);
    292a:	84 e0       	ldi	r24, 0x04	; 4
    292c:	63 e0       	ldi	r22, 0x03	; 3
    292e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2932:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON2_ ************//
		if(Local_u8_PushButtonValue == PRESSED)    ///check if button is pressed
    2934:	89 ad       	ldd	r24, Y+57	; 0x39
    2936:	88 23       	and	r24, r24
    2938:	09 f0       	breq	.+2      	; 0x293c <H_PushButton_u8_PushButtonRead+0x184>
    293a:	93 c1       	rjmp	.+806    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a0 e7       	ldi	r26, 0x70	; 112
    2942:	b2 e4       	ldi	r27, 0x42	; 66
    2944:	8f a3       	std	Y+39, r24	; 0x27
    2946:	98 a7       	std	Y+40, r25	; 0x28
    2948:	a9 a7       	std	Y+41, r26	; 0x29
    294a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294c:	6f a1       	ldd	r22, Y+39	; 0x27
    294e:	78 a5       	ldd	r23, Y+40	; 0x28
    2950:	89 a5       	ldd	r24, Y+41	; 0x29
    2952:	9a a5       	ldd	r25, Y+42	; 0x2a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a e7       	ldi	r20, 0x7A	; 122
    295a:	53 e4       	ldi	r21, 0x43	; 67
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8b a3       	std	Y+35, r24	; 0x23
    2966:	9c a3       	std	Y+36, r25	; 0x24
    2968:	ad a3       	std	Y+37, r26	; 0x25
    296a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    296c:	6b a1       	ldd	r22, Y+35	; 0x23
    296e:	7c a1       	ldd	r23, Y+36	; 0x24
    2970:	8d a1       	ldd	r24, Y+37	; 0x25
    2972:	9e a1       	ldd	r25, Y+38	; 0x26
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5f e3       	ldi	r21, 0x3F	; 63
    297c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2980:	88 23       	and	r24, r24
    2982:	2c f4       	brge	.+10     	; 0x298e <H_PushButton_u8_PushButtonRead+0x1d6>
		__ticks = 1;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9a a3       	std	Y+34, r25	; 0x22
    298a:	89 a3       	std	Y+33, r24	; 0x21
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <H_PushButton_u8_PushButtonRead+0x254>
	else if (__tmp > 65535)
    298e:	6b a1       	ldd	r22, Y+35	; 0x23
    2990:	7c a1       	ldd	r23, Y+36	; 0x24
    2992:	8d a1       	ldd	r24, Y+37	; 0x25
    2994:	9e a1       	ldd	r25, Y+38	; 0x26
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	4c f5       	brge	.+82     	; 0x29f8 <H_PushButton_u8_PushButtonRead+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a6:	6f a1       	ldd	r22, Y+39	; 0x27
    29a8:	78 a5       	ldd	r23, Y+40	; 0x28
    29aa:	89 a5       	ldd	r24, Y+41	; 0x29
    29ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9a a3       	std	Y+34, r25	; 0x22
    29cc:	89 a3       	std	Y+33, r24	; 0x21
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <H_PushButton_u8_PushButtonRead+0x236>
    29d0:	89 e1       	ldi	r24, 0x19	; 25
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	98 a3       	std	Y+32, r25	; 0x20
    29d6:	8f 8f       	std	Y+31, r24	; 0x1f
    29d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29da:	98 a1       	ldd	r25, Y+32	; 0x20
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <H_PushButton_u8_PushButtonRead+0x224>
    29e0:	98 a3       	std	Y+32, r25	; 0x20
    29e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e4:	89 a1       	ldd	r24, Y+33	; 0x21
    29e6:	9a a1       	ldd	r25, Y+34	; 0x22
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	9a a3       	std	Y+34, r25	; 0x22
    29ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ee:	89 a1       	ldd	r24, Y+33	; 0x21
    29f0:	9a a1       	ldd	r25, Y+34	; 0x22
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	69 f7       	brne	.-38     	; 0x29d0 <H_PushButton_u8_PushButtonRead+0x218>
    29f6:	14 c0       	rjmp	.+40     	; 0x2a20 <H_PushButton_u8_PushButtonRead+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f8:	6b a1       	ldd	r22, Y+35	; 0x23
    29fa:	7c a1       	ldd	r23, Y+36	; 0x24
    29fc:	8d a1       	ldd	r24, Y+37	; 0x25
    29fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9a a3       	std	Y+34, r25	; 0x22
    2a0a:	89 a3       	std	Y+33, r24	; 0x21
    2a0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a10:	9e 8f       	std	Y+30, r25	; 0x1e
    2a12:	8d 8f       	std	Y+29, r24	; 0x1d
    2a14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <H_PushButton_u8_PushButtonRead+0x260>
    2a1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1e:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);        /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED)
    2a20:	84 e0       	ldi	r24, 0x04	; 4
    2a22:	63 e0       	ldi	r22, 0x03	; 3
    2a24:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2a28:	88 23       	and	r24, r24
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <H_PushButton_u8_PushButtonRead+0x276>
    2a2c:	1a c1       	rjmp	.+564    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
				while (M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED);
    2a2e:	84 e0       	ldi	r24, 0x04	; 4
    2a30:	63 e0       	ldi	r22, 0x03	; 3
    2a32:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2a36:	88 23       	and	r24, r24
    2a38:	d1 f3       	breq	.-12     	; 0x2a2e <H_PushButton_u8_PushButtonRead+0x276>
					//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
						Local_u8_PushButtonValue = PRESSED;
    2a3a:	19 ae       	std	Y+57, r1	; 0x39
    2a3c:	12 c1       	rjmp	.+548    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON2 **************************///

		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Read PUSHBUTTON3_PIN value   _***********//
		Local_u8_PushButtonValue =	M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN);
    2a3e:	84 e0       	ldi	r24, 0x04	; 4
    2a40:	64 e0       	ldi	r22, 0x04	; 4
    2a42:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2a46:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON3 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)     ///check if button is pressed
    2a48:	89 ad       	ldd	r24, Y+57	; 0x39
    2a4a:	88 23       	and	r24, r24
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <H_PushButton_u8_PushButtonRead+0x298>
    2a4e:	09 c1       	rjmp	.+530    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a0 e7       	ldi	r26, 0x70	; 112
    2a56:	b2 e4       	ldi	r27, 0x42	; 66
    2a58:	89 8f       	std	Y+25, r24	; 0x19
    2a5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a60:	69 8d       	ldd	r22, Y+25	; 0x19
    2a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4a e7       	ldi	r20, 0x7A	; 122
    2a6e:	53 e4       	ldi	r21, 0x43	; 67
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8d 8b       	std	Y+21, r24	; 0x15
    2a7a:	9e 8b       	std	Y+22, r25	; 0x16
    2a7c:	af 8b       	std	Y+23, r26	; 0x17
    2a7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a80:	6d 89       	ldd	r22, Y+21	; 0x15
    2a82:	7e 89       	ldd	r23, Y+22	; 0x16
    2a84:	8f 89       	ldd	r24, Y+23	; 0x17
    2a86:	98 8d       	ldd	r25, Y+24	; 0x18
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a94:	88 23       	and	r24, r24
    2a96:	2c f4       	brge	.+10     	; 0x2aa2 <H_PushButton_u8_PushButtonRead+0x2ea>
		__ticks = 1;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9c 8b       	std	Y+20, r25	; 0x14
    2a9e:	8b 8b       	std	Y+19, r24	; 0x13
    2aa0:	3f c0       	rjmp	.+126    	; 0x2b20 <H_PushButton_u8_PushButtonRead+0x368>
	else if (__tmp > 65535)
    2aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	4c f5       	brge	.+82     	; 0x2b0c <H_PushButton_u8_PushButtonRead+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aba:	69 8d       	ldd	r22, Y+25	; 0x19
    2abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e2       	ldi	r20, 0x20	; 32
    2ac8:	51 e4       	ldi	r21, 0x41	; 65
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9c 8b       	std	Y+20, r25	; 0x14
    2ae0:	8b 8b       	std	Y+19, r24	; 0x13
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <H_PushButton_u8_PushButtonRead+0x34a>
    2ae4:	89 e1       	ldi	r24, 0x19	; 25
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	9a 8b       	std	Y+18, r25	; 0x12
    2aea:	89 8b       	std	Y+17, r24	; 0x11
    2aec:	89 89       	ldd	r24, Y+17	; 0x11
    2aee:	9a 89       	ldd	r25, Y+18	; 0x12
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <H_PushButton_u8_PushButtonRead+0x338>
    2af4:	9a 8b       	std	Y+18, r25	; 0x12
    2af6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	8b 89       	ldd	r24, Y+19	; 0x13
    2afa:	9c 89       	ldd	r25, Y+20	; 0x14
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	9c 8b       	std	Y+20, r25	; 0x14
    2b00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	8b 89       	ldd	r24, Y+19	; 0x13
    2b04:	9c 89       	ldd	r25, Y+20	; 0x14
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <H_PushButton_u8_PushButtonRead+0x32c>
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <H_PushButton_u8_PushButtonRead+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b10:	8f 89       	ldd	r24, Y+23	; 0x17
    2b12:	98 8d       	ldd	r25, Y+24	; 0x18
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9c 8b       	std	Y+20, r25	; 0x14
    2b1e:	8b 8b       	std	Y+19, r24	; 0x13
    2b20:	8b 89       	ldd	r24, Y+19	; 0x13
    2b22:	9c 89       	ldd	r25, Y+20	; 0x14
    2b24:	98 8b       	std	Y+16, r25	; 0x10
    2b26:	8f 87       	std	Y+15, r24	; 0x0f
    2b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b2a:	98 89       	ldd	r25, Y+16	; 0x10
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <H_PushButton_u8_PushButtonRead+0x374>
    2b30:	98 8b       	std	Y+16, r25	; 0x10
    2b32:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);          /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED)
    2b34:	84 e0       	ldi	r24, 0x04	; 4
    2b36:	64 e0       	ldi	r22, 0x04	; 4
    2b38:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2b3c:	88 23       	and	r24, r24
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <H_PushButton_u8_PushButtonRead+0x38a>
    2b40:	90 c0       	rjmp	.+288    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED);
    2b42:	84 e0       	ldi	r24, 0x04	; 4
    2b44:	64 e0       	ldi	r22, 0x04	; 4
    2b46:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2b4a:	88 23       	and	r24, r24
    2b4c:	d1 f3       	breq	.-12     	; 0x2b42 <H_PushButton_u8_PushButtonRead+0x38a>
				//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					Local_u8_PushButtonValue = PRESSED;
    2b4e:	19 ae       	std	Y+57, r1	; 0x39
    2b50:	88 c0       	rjmp	.+272    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
	///*****************************break case PUSHBUTTON3 **************************///

		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Read PUSHBUTTON4_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN);
    2b52:	84 e0       	ldi	r24, 0x04	; 4
    2b54:	65 e0       	ldi	r22, 0x05	; 5
    2b56:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2b5a:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON4 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)      ///check if button is pressed
    2b5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b5e:	88 23       	and	r24, r24
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <H_PushButton_u8_PushButtonRead+0x3ac>
    2b62:	7f c0       	rjmp	.+254    	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	a0 e7       	ldi	r26, 0x70	; 112
    2b6a:	b2 e4       	ldi	r27, 0x42	; 66
    2b6c:	8b 87       	std	Y+11, r24	; 0x0b
    2b6e:	9c 87       	std	Y+12, r25	; 0x0c
    2b70:	ad 87       	std	Y+13, r26	; 0x0d
    2b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	4a e7       	ldi	r20, 0x7A	; 122
    2b82:	53 e4       	ldi	r21, 0x43	; 67
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	8f 83       	std	Y+7, r24	; 0x07
    2b8e:	98 87       	std	Y+8, r25	; 0x08
    2b90:	a9 87       	std	Y+9, r26	; 0x09
    2b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b94:	6f 81       	ldd	r22, Y+7	; 0x07
    2b96:	78 85       	ldd	r23, Y+8	; 0x08
    2b98:	89 85       	ldd	r24, Y+9	; 0x09
    2b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e8       	ldi	r20, 0x80	; 128
    2ba2:	5f e3       	ldi	r21, 0x3F	; 63
    2ba4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba8:	88 23       	and	r24, r24
    2baa:	2c f4       	brge	.+10     	; 0x2bb6 <H_PushButton_u8_PushButtonRead+0x3fe>
		__ticks = 1;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9e 83       	std	Y+6, r25	; 0x06
    2bb2:	8d 83       	std	Y+5, r24	; 0x05
    2bb4:	3f c0       	rjmp	.+126    	; 0x2c34 <H_PushButton_u8_PushButtonRead+0x47c>
	else if (__tmp > 65535)
    2bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb8:	78 85       	ldd	r23, Y+8	; 0x08
    2bba:	89 85       	ldd	r24, Y+9	; 0x09
    2bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	3f ef       	ldi	r19, 0xFF	; 255
    2bc2:	4f e7       	ldi	r20, 0x7F	; 127
    2bc4:	57 e4       	ldi	r21, 0x47	; 71
    2bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bca:	18 16       	cp	r1, r24
    2bcc:	4c f5       	brge	.+82     	; 0x2c20 <H_PushButton_u8_PushButtonRead+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e2       	ldi	r20, 0x20	; 32
    2bdc:	51 e4       	ldi	r21, 0x41	; 65
    2bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	9e 83       	std	Y+6, r25	; 0x06
    2bf4:	8d 83       	std	Y+5, r24	; 0x05
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <H_PushButton_u8_PushButtonRead+0x45e>
    2bf8:	89 e1       	ldi	r24, 0x19	; 25
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	9c 81       	ldd	r25, Y+4	; 0x04
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <H_PushButton_u8_PushButtonRead+0x44c>
    2c08:	9c 83       	std	Y+4, r25	; 0x04
    2c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	69 f7       	brne	.-38     	; 0x2bf8 <H_PushButton_u8_PushButtonRead+0x440>
    2c1e:	14 c0       	rjmp	.+40     	; 0x2c48 <H_PushButton_u8_PushButtonRead+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c20:	6f 81       	ldd	r22, Y+7	; 0x07
    2c22:	78 85       	ldd	r23, Y+8	; 0x08
    2c24:	89 85       	ldd	r24, Y+9	; 0x09
    2c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	9e 83       	std	Y+6, r25	; 0x06
    2c32:	8d 83       	std	Y+5, r24	; 0x05
    2c34:	8d 81       	ldd	r24, Y+5	; 0x05
    2c36:	9e 81       	ldd	r25, Y+6	; 0x06
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <H_PushButton_u8_PushButtonRead+0x488>
    2c44:	9a 83       	std	Y+2, r25	; 0x02
    2c46:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);         /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED)
    2c48:	84 e0       	ldi	r24, 0x04	; 4
    2c4a:	65 e0       	ldi	r22, 0x05	; 5
    2c4c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2c50:	88 23       	and	r24, r24
    2c52:	39 f4       	brne	.+14     	; 0x2c62 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED);
    2c54:	84 e0       	ldi	r24, 0x04	; 4
    2c56:	65 e0       	ldi	r22, 0x05	; 5
    2c58:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    2c5c:	88 23       	and	r24, r24
    2c5e:	d1 f3       	breq	.-12     	; 0x2c54 <H_PushButton_u8_PushButtonRead+0x49c>
				 //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					  Local_u8_PushButtonValue = PRESSED;
    2c60:	19 ae       	std	Y+57, r1	; 0x39

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

	return Local_u8_PushButtonValue  ;
    2c62:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2c64:	ec 96       	adiw	r28, 0x3c	; 60
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <H_LED_Void_LedInit>:
#include "LED_Int.h"
#include "LED_Priv.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_LED_Void_LedInit(u8 Local_u8_ledId)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <H_LED_Void_LedInit+0x6>
    2c7c:	0f 92       	push	r0
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_ledId)
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	3b 83       	std	Y+3, r19	; 0x03
    2c8c:	2a 83       	std	Y+2, r18	; 0x02
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	9b 81       	ldd	r25, Y+3	; 0x03
    2c92:	82 30       	cpi	r24, 0x02	; 2
    2c94:	91 05       	cpc	r25, r1
    2c96:	11 f1       	breq	.+68     	; 0x2cdc <H_LED_Void_LedInit+0x66>
    2c98:	2a 81       	ldd	r18, Y+2	; 0x02
    2c9a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c9c:	23 30       	cpi	r18, 0x03	; 3
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	34 f4       	brge	.+12     	; 0x2cae <H_LED_Void_LedInit+0x38>
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	91 05       	cpc	r25, r1
    2caa:	61 f0       	breq	.+24     	; 0x2cc4 <H_LED_Void_LedInit+0x4e>
    2cac:	22 c0       	rjmp	.+68     	; 0x2cf2 <H_LED_Void_LedInit+0x7c>
    2cae:	2a 81       	ldd	r18, Y+2	; 0x02
    2cb0:	3b 81       	ldd	r19, Y+3	; 0x03
    2cb2:	23 30       	cpi	r18, 0x03	; 3
    2cb4:	31 05       	cpc	r19, r1
    2cb6:	61 f0       	breq	.+24     	; 0x2cd0 <H_LED_Void_LedInit+0x5a>
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	84 30       	cpi	r24, 0x04	; 4
    2cbe:	91 05       	cpc	r25, r1
    2cc0:	99 f0       	breq	.+38     	; 0x2ce8 <H_LED_Void_LedInit+0x72>
    2cc2:	17 c0       	rjmp	.+46     	; 0x2cf2 <H_LED_Void_LedInit+0x7c>
	{
	///******_Setting RED_LED Pin direction to OUTPUT _***********///
	case RED_LED:
		M_DIO_void_SetPinDirection(RED_LED_PORT, RED_LED_PIN, OUTPUT);
    2cc4:	83 e0       	ldi	r24, 0x03	; 3
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
    2cce:	11 c0       	rjmp	.+34     	; 0x2cf2 <H_LED_Void_LedInit+0x7c>
		break;
	///******_Setting GRN_LED Pin direction to OUTPUT _***********///
	case GRN_LED :
		M_DIO_void_SetPinDirection(GRN_LED_PORT ,GRN_LED_PIN , OUTPUT);
    2cd0:	83 e0       	ldi	r24, 0x03	; 3
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
    2cda:	0b c0       	rjmp	.+22     	; 0x2cf2 <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting BLUE_LED Pin direction to OUTPUT _***********///
	case BLUE_LED:
		M_DIO_void_SetPinDirection(BLUE_LED_PORT,BLUE_LED_PIN ,OUTPUT);
    2cdc:	83 e0       	ldi	r24, 0x03	; 3
    2cde:	62 e0       	ldi	r22, 0x02	; 2
    2ce0:	41 e0       	ldi	r20, 0x01	; 1
    2ce2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
    2ce6:	05 c0       	rjmp	.+10     	; 0x2cf2 <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting YELLOW_LED Pin direction to OUTPUT _***********///
	case YELLOW_LED:
			M_DIO_void_SetPinDirection(YELLOW_LED_PORT,YELLOW_LED_PIN ,OUTPUT);
    2ce8:	83 e0       	ldi	r24, 0x03	; 3
    2cea:	63 e0       	ldi	r22, 0x03	; 3
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
			break;
	default :               /*****error*****/                      break;
	}

}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	08 95       	ret

00002cfe <H_LED_Void_LedOn>:
void H_LED_Void_LedOn(u8 Local_u8_led)
{
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <H_LED_Void_LedOn+0x6>
    2d04:	0f 92       	push	r0
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	3b 83       	std	Y+3, r19	; 0x03
    2d14:	2a 83       	std	Y+2, r18	; 0x02
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1a:	82 30       	cpi	r24, 0x02	; 2
    2d1c:	91 05       	cpc	r25, r1
    2d1e:	11 f1       	breq	.+68     	; 0x2d64 <H_LED_Void_LedOn+0x66>
    2d20:	2a 81       	ldd	r18, Y+2	; 0x02
    2d22:	3b 81       	ldd	r19, Y+3	; 0x03
    2d24:	23 30       	cpi	r18, 0x03	; 3
    2d26:	31 05       	cpc	r19, r1
    2d28:	34 f4       	brge	.+12     	; 0x2d36 <H_LED_Void_LedOn+0x38>
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	91 05       	cpc	r25, r1
    2d32:	61 f0       	breq	.+24     	; 0x2d4c <H_LED_Void_LedOn+0x4e>
    2d34:	22 c0       	rjmp	.+68     	; 0x2d7a <H_LED_Void_LedOn+0x7c>
    2d36:	2a 81       	ldd	r18, Y+2	; 0x02
    2d38:	3b 81       	ldd	r19, Y+3	; 0x03
    2d3a:	23 30       	cpi	r18, 0x03	; 3
    2d3c:	31 05       	cpc	r19, r1
    2d3e:	61 f0       	breq	.+24     	; 0x2d58 <H_LED_Void_LedOn+0x5a>
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	84 30       	cpi	r24, 0x04	; 4
    2d46:	91 05       	cpc	r25, r1
    2d48:	99 f0       	breq	.+38     	; 0x2d70 <H_LED_Void_LedOn+0x72>
    2d4a:	17 c0       	rjmp	.+46     	; 0x2d7a <H_LED_Void_LedOn+0x7c>
		{
	    ///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
		case RED_LED:
             M_DIO_void_SetPinValue(RED_LED_PORT, RED_LED_PIN, HIGH);
    2d4c:	83 e0       	ldi	r24, 0x03	; 3
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2d56:	11 c0       	rjmp	.+34     	; 0x2d7a <H_LED_Void_LedOn+0x7c>
		break;
		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
		case GRN_LED :
             M_DIO_void_SetPinValue(GRN_LED_PORT, GRN_LED_PIN, HIGH);
    2d58:	83 e0       	ldi	r24, 0x03	; 3
    2d5a:	61 e0       	ldi	r22, 0x01	; 1
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2d62:	0b c0       	rjmp	.+22     	; 0x2d7a <H_LED_Void_LedOn+0x7c>
        break;
        ///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
		case BLUE_LED :
             M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	62 e0       	ldi	r22, 0x02	; 2
    2d68:	41 e0       	ldi	r20, 0x01	; 1
    2d6a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2d6e:	05 c0       	rjmp	.+10     	; 0x2d7a <H_LED_Void_LedOn+0x7c>
   		break;
   		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
		case YELLOW_LED :
		             M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    2d70:	83 e0       	ldi	r24, 0x03	; 3
    2d72:	63 e0       	ldi	r22, 0x03	; 3
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		   		break;
		default :          /*****error*****/         break;
		}

}
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <H_LED_Void_LedOff>:
void H_LED_Void_LedOff(u8 Local_u8_led)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <H_LED_Void_LedOff+0x6>
    2d8c:	0f 92       	push	r0
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	28 2f       	mov	r18, r24
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	3b 83       	std	Y+3, r19	; 0x03
    2d9c:	2a 83       	std	Y+2, r18	; 0x02
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	9b 81       	ldd	r25, Y+3	; 0x03
    2da2:	82 30       	cpi	r24, 0x02	; 2
    2da4:	91 05       	cpc	r25, r1
    2da6:	b1 f0       	breq	.+44     	; 0x2dd4 <H_LED_Void_LedOff+0x4e>
    2da8:	2a 81       	ldd	r18, Y+2	; 0x02
    2daa:	3b 81       	ldd	r19, Y+3	; 0x03
    2dac:	23 30       	cpi	r18, 0x03	; 3
    2dae:	31 05       	cpc	r19, r1
    2db0:	34 f4       	brge	.+12     	; 0x2dbe <H_LED_Void_LedOff+0x38>
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	81 30       	cpi	r24, 0x01	; 1
    2db8:	91 05       	cpc	r25, r1
    2dba:	91 f0       	breq	.+36     	; 0x2de0 <H_LED_Void_LedOff+0x5a>
    2dbc:	22 c0       	rjmp	.+68     	; 0x2e02 <H_LED_Void_LedOff+0x7c>
    2dbe:	2a 81       	ldd	r18, Y+2	; 0x02
    2dc0:	3b 81       	ldd	r19, Y+3	; 0x03
    2dc2:	23 30       	cpi	r18, 0x03	; 3
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	91 f0       	breq	.+36     	; 0x2dec <H_LED_Void_LedOff+0x66>
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	9b 81       	ldd	r25, Y+3	; 0x03
    2dcc:	84 30       	cpi	r24, 0x04	; 4
    2dce:	91 05       	cpc	r25, r1
    2dd0:	99 f0       	breq	.+38     	; 0x2df8 <H_LED_Void_LedOff+0x72>
    2dd2:	17 c0       	rjmp	.+46     	; 0x2e02 <H_LED_Void_LedOff+0x7c>
			{
			///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
			case BLUE_LED:
				M_DIO_void_SetPinValue(BLUE_LED_PORT, BLUE_LED_PIN, LOW);
    2dd4:	83 e0       	ldi	r24, 0x03	; 3
    2dd6:	62 e0       	ldi	r22, 0x02	; 2
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2dde:	11 c0       	rjmp	.+34     	; 0x2e02 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			case RED_LED :
				M_DIO_void_SetPinValue(RED_LED_PORT ,RED_LED_PIN, LOW);
    2de0:	83 e0       	ldi	r24, 0x03	; 3
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	40 e0       	ldi	r20, 0x00	; 0
    2de6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2dea:	0b c0       	rjmp	.+22     	; 0x2e02 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
			case GRN_LED :
				M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    2dec:	83 e0       	ldi	r24, 0x03	; 3
    2dee:	61 e0       	ldi	r22, 0x01	; 1
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2df6:	05 c0       	rjmp	.+10     	; 0x2e02 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
			case YELLOW_LED :
			    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    2df8:	83 e0       	ldi	r24, 0x03	; 3
    2dfa:	63 e0       	ldi	r22, 0x03	; 3
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
					   		break;
			default :           /*****error*****/         break;
			}

}
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <H_LED_Void_LedTogg>:
void H_LED_Void_LedTogg(u8 Local_u8_led)
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <H_LED_Void_LedTogg+0x6>
    2e14:	0f 92       	push	r0
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	3b 83       	std	Y+3, r19	; 0x03
    2e24:	2a 83       	std	Y+2, r18	; 0x02
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2a:	82 30       	cpi	r24, 0x02	; 2
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	b1 f0       	breq	.+44     	; 0x2e5c <H_LED_Void_LedTogg+0x4e>
    2e30:	2a 81       	ldd	r18, Y+2	; 0x02
    2e32:	3b 81       	ldd	r19, Y+3	; 0x03
    2e34:	23 30       	cpi	r18, 0x03	; 3
    2e36:	31 05       	cpc	r19, r1
    2e38:	34 f4       	brge	.+12     	; 0x2e46 <H_LED_Void_LedTogg+0x38>
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	91 05       	cpc	r25, r1
    2e42:	89 f0       	breq	.+34     	; 0x2e66 <H_LED_Void_LedTogg+0x58>
    2e44:	1e c0       	rjmp	.+60     	; 0x2e82 <H_LED_Void_LedTogg+0x74>
    2e46:	2a 81       	ldd	r18, Y+2	; 0x02
    2e48:	3b 81       	ldd	r19, Y+3	; 0x03
    2e4a:	23 30       	cpi	r18, 0x03	; 3
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	81 f0       	breq	.+32     	; 0x2e70 <H_LED_Void_LedTogg+0x62>
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	9b 81       	ldd	r25, Y+3	; 0x03
    2e54:	84 30       	cpi	r24, 0x04	; 4
    2e56:	91 05       	cpc	r25, r1
    2e58:	81 f0       	breq	.+32     	; 0x2e7a <H_LED_Void_LedTogg+0x6c>
    2e5a:	13 c0       	rjmp	.+38     	; 0x2e82 <H_LED_Void_LedTogg+0x74>
		{
		  ///******_ Toggle  BLUE_LED Pin Value _***********///
		  case BLUE_LED:
			  M_DIO_void_PinTog(BLUE_LED_PORT, BLUE_LED_PIN);
    2e5c:	83 e0       	ldi	r24, 0x03	; 3
    2e5e:	62 e0       	ldi	r22, 0x02	; 2
    2e60:	0e 94 80 0c 	call	0x1900	; 0x1900 <M_DIO_void_PinTog>
    2e64:	0e c0       	rjmp	.+28     	; 0x2e82 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  RED_LED Pin Value _******************///
		  case RED_LED :
			  M_DIO_void_PinTog(RED_LED_PORT, RED_LED_PIN);
    2e66:	83 e0       	ldi	r24, 0x03	; 3
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	0e 94 80 0c 	call	0x1900	; 0x1900 <M_DIO_void_PinTog>
    2e6e:	09 c0       	rjmp	.+18     	; 0x2e82 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  GRN_LED Pin Value _******************///
		  case GRN_LED :
			  M_DIO_void_PinTog(GRN_LED_PORT, GRN_LED_PIN);
    2e70:	83 e0       	ldi	r24, 0x03	; 3
    2e72:	61 e0       	ldi	r22, 0x01	; 1
    2e74:	0e 94 80 0c 	call	0x1900	; 0x1900 <M_DIO_void_PinTog>
    2e78:	04 c0       	rjmp	.+8      	; 0x2e82 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  YELLOW_LED Pin Value _******************///
		  case YELLOW_LED :
			  M_DIO_void_PinTog(YELLOW_LED_PORT,YELLOW_LED_PIN);
    2e7a:	83 e0       	ldi	r24, 0x03	; 3
    2e7c:	63 e0       	ldi	r22, 0x03	; 3
    2e7e:	0e 94 80 0c 	call	0x1900	; 0x1900 <M_DIO_void_PinTog>
		  break;

		  default :   /*****error*****/          break;
		}

}
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	08 95       	ret

00002e8e <H_LED_Void_LedBlink>:
void H_LED_Void_LedBlink(u8 Local_u8_led)
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	eb 97       	sbiw	r28, 0x3b	; 59
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	89 af       	std	Y+57, r24	; 0x39
	///***switch case to loop on LEDs****//
     switch(Local_u8_led)
    2ea4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ea6:	28 2f       	mov	r18, r24
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	3b af       	std	Y+59, r19	; 0x3b
    2eac:	2a af       	std	Y+58, r18	; 0x3a
    2eae:	8a ad       	ldd	r24, Y+58	; 0x3a
    2eb0:	9b ad       	ldd	r25, Y+59	; 0x3b
    2eb2:	82 30       	cpi	r24, 0x02	; 2
    2eb4:	91 05       	cpc	r25, r1
    2eb6:	c9 f0       	breq	.+50     	; 0x2eea <H_LED_Void_LedBlink+0x5c>
    2eb8:	2a ad       	ldd	r18, Y+58	; 0x3a
    2eba:	3b ad       	ldd	r19, Y+59	; 0x3b
    2ebc:	23 30       	cpi	r18, 0x03	; 3
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	3c f4       	brge	.+14     	; 0x2ed0 <H_LED_Void_LedBlink+0x42>
    2ec2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ec4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	91 05       	cpc	r25, r1
    2eca:	09 f4       	brne	.+2      	; 0x2ece <H_LED_Void_LedBlink+0x40>
    2ecc:	8b c0       	rjmp	.+278    	; 0x2fe4 <H_LED_Void_LedBlink+0x156>
    2ece:	00 c2       	rjmp	.+1024   	; 0x32d0 <H_LED_Void_LedBlink+0x442>
    2ed0:	2a ad       	ldd	r18, Y+58	; 0x3a
    2ed2:	3b ad       	ldd	r19, Y+59	; 0x3b
    2ed4:	23 30       	cpi	r18, 0x03	; 3
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <H_LED_Void_LedBlink+0x4e>
    2eda:	01 c1       	rjmp	.+514    	; 0x30de <H_LED_Void_LedBlink+0x250>
    2edc:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ede:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ee0:	84 30       	cpi	r24, 0x04	; 4
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	09 f4       	brne	.+2      	; 0x2ee8 <H_LED_Void_LedBlink+0x5a>
    2ee6:	78 c1       	rjmp	.+752    	; 0x31d8 <H_LED_Void_LedBlink+0x34a>
    2ee8:	f3 c1       	rjmp	.+998    	; 0x32d0 <H_LED_Void_LedBlink+0x442>
	 	{
        ///******_ Blink  BLUE_LED Pin Value _******************///
	 	case BLUE_LED:
	 		///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    2eea:	83 e0       	ldi	r24, 0x03	; 3
    2eec:	62 e0       	ldi	r22, 0x02	; 2
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e5       	ldi	r25, 0x50	; 80
    2ef8:	a3 ec       	ldi	r26, 0xC3	; 195
    2efa:	b7 e4       	ldi	r27, 0x47	; 71
    2efc:	8d ab       	std	Y+53, r24	; 0x35
    2efe:	9e ab       	std	Y+54, r25	; 0x36
    2f00:	af ab       	std	Y+55, r26	; 0x37
    2f02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f04:	6d a9       	ldd	r22, Y+53	; 0x35
    2f06:	7e a9       	ldd	r23, Y+54	; 0x36
    2f08:	8f a9       	ldd	r24, Y+55	; 0x37
    2f0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4a e7       	ldi	r20, 0x7A	; 122
    2f12:	53 e4       	ldi	r21, 0x43	; 67
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	89 ab       	std	Y+49, r24	; 0x31
    2f1e:	9a ab       	std	Y+50, r25	; 0x32
    2f20:	ab ab       	std	Y+51, r26	; 0x33
    2f22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f24:	69 a9       	ldd	r22, Y+49	; 0x31
    2f26:	7a a9       	ldd	r23, Y+50	; 0x32
    2f28:	8b a9       	ldd	r24, Y+51	; 0x33
    2f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e8       	ldi	r20, 0x80	; 128
    2f32:	5f e3       	ldi	r21, 0x3F	; 63
    2f34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f38:	88 23       	and	r24, r24
    2f3a:	2c f4       	brge	.+10     	; 0x2f46 <H_LED_Void_LedBlink+0xb8>
		__ticks = 1;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	98 ab       	std	Y+48, r25	; 0x30
    2f42:	8f a7       	std	Y+47, r24	; 0x2f
    2f44:	3f c0       	rjmp	.+126    	; 0x2fc4 <H_LED_Void_LedBlink+0x136>
	else if (__tmp > 65535)
    2f46:	69 a9       	ldd	r22, Y+49	; 0x31
    2f48:	7a a9       	ldd	r23, Y+50	; 0x32
    2f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	3f ef       	ldi	r19, 0xFF	; 255
    2f52:	4f e7       	ldi	r20, 0x7F	; 127
    2f54:	57 e4       	ldi	r21, 0x47	; 71
    2f56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f5a:	18 16       	cp	r1, r24
    2f5c:	4c f5       	brge	.+82     	; 0x2fb0 <H_LED_Void_LedBlink+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f60:	7e a9       	ldd	r23, Y+54	; 0x36
    2f62:	8f a9       	ldd	r24, Y+55	; 0x37
    2f64:	98 ad       	ldd	r25, Y+56	; 0x38
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e2       	ldi	r20, 0x20	; 32
    2f6c:	51 e4       	ldi	r21, 0x41	; 65
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	98 ab       	std	Y+48, r25	; 0x30
    2f84:	8f a7       	std	Y+47, r24	; 0x2f
    2f86:	0f c0       	rjmp	.+30     	; 0x2fa6 <H_LED_Void_LedBlink+0x118>
    2f88:	89 e1       	ldi	r24, 0x19	; 25
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9e a7       	std	Y+46, r25	; 0x2e
    2f8e:	8d a7       	std	Y+45, r24	; 0x2d
    2f90:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f92:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <H_LED_Void_LedBlink+0x106>
    2f98:	9e a7       	std	Y+46, r25	; 0x2e
    2f9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	98 ab       	std	Y+48, r25	; 0x30
    2fa4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	69 f7       	brne	.-38     	; 0x2f88 <H_LED_Void_LedBlink+0xfa>
    2fae:	14 c0       	rjmp	.+40     	; 0x2fd8 <H_LED_Void_LedBlink+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	98 ab       	std	Y+48, r25	; 0x30
    2fc2:	8f a7       	std	Y+47, r24	; 0x2f
    2fc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc8:	9c a7       	std	Y+44, r25	; 0x2c
    2fca:	8b a7       	std	Y+43, r24	; 0x2b
    2fcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fce:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <H_LED_Void_LedBlink+0x142>
    2fd4:	9c a7       	std	Y+44, r25	; 0x2c
    2fd6:	8b a7       	std	Y+43, r24	; 0x2b
	 		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
	 		///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, LOW);
    2fd8:	83 e0       	ldi	r24, 0x03	; 3
    2fda:	62 e0       	ldi	r22, 0x02	; 2
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2fe2:	76 c1       	rjmp	.+748    	; 0x32d0 <H_LED_Void_LedBlink+0x442>
	 	break;
	    ///******_ Blink  RED_LED Pin Value _******************///
		case RED_LED :
			///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, HIGH);
    2fe4:	83 e0       	ldi	r24, 0x03	; 3
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	41 e0       	ldi	r20, 0x01	; 1
    2fea:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	90 e5       	ldi	r25, 0x50	; 80
    2ff2:	a3 ec       	ldi	r26, 0xC3	; 195
    2ff4:	b7 e4       	ldi	r27, 0x47	; 71
    2ff6:	8f a3       	std	Y+39, r24	; 0x27
    2ff8:	98 a7       	std	Y+40, r25	; 0x28
    2ffa:	a9 a7       	std	Y+41, r26	; 0x29
    2ffc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffe:	6f a1       	ldd	r22, Y+39	; 0x27
    3000:	78 a5       	ldd	r23, Y+40	; 0x28
    3002:	89 a5       	ldd	r24, Y+41	; 0x29
    3004:	9a a5       	ldd	r25, Y+42	; 0x2a
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	4a e7       	ldi	r20, 0x7A	; 122
    300c:	53 e4       	ldi	r21, 0x43	; 67
    300e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	8b a3       	std	Y+35, r24	; 0x23
    3018:	9c a3       	std	Y+36, r25	; 0x24
    301a:	ad a3       	std	Y+37, r26	; 0x25
    301c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    301e:	6b a1       	ldd	r22, Y+35	; 0x23
    3020:	7c a1       	ldd	r23, Y+36	; 0x24
    3022:	8d a1       	ldd	r24, Y+37	; 0x25
    3024:	9e a1       	ldd	r25, Y+38	; 0x26
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e8       	ldi	r20, 0x80	; 128
    302c:	5f e3       	ldi	r21, 0x3F	; 63
    302e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3032:	88 23       	and	r24, r24
    3034:	2c f4       	brge	.+10     	; 0x3040 <H_LED_Void_LedBlink+0x1b2>
		__ticks = 1;
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9a a3       	std	Y+34, r25	; 0x22
    303c:	89 a3       	std	Y+33, r24	; 0x21
    303e:	3f c0       	rjmp	.+126    	; 0x30be <H_LED_Void_LedBlink+0x230>
	else if (__tmp > 65535)
    3040:	6b a1       	ldd	r22, Y+35	; 0x23
    3042:	7c a1       	ldd	r23, Y+36	; 0x24
    3044:	8d a1       	ldd	r24, Y+37	; 0x25
    3046:	9e a1       	ldd	r25, Y+38	; 0x26
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	3f ef       	ldi	r19, 0xFF	; 255
    304c:	4f e7       	ldi	r20, 0x7F	; 127
    304e:	57 e4       	ldi	r21, 0x47	; 71
    3050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3054:	18 16       	cp	r1, r24
    3056:	4c f5       	brge	.+82     	; 0x30aa <H_LED_Void_LedBlink+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3058:	6f a1       	ldd	r22, Y+39	; 0x27
    305a:	78 a5       	ldd	r23, Y+40	; 0x28
    305c:	89 a5       	ldd	r24, Y+41	; 0x29
    305e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e2       	ldi	r20, 0x20	; 32
    3066:	51 e4       	ldi	r21, 0x41	; 65
    3068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	9a a3       	std	Y+34, r25	; 0x22
    307e:	89 a3       	std	Y+33, r24	; 0x21
    3080:	0f c0       	rjmp	.+30     	; 0x30a0 <H_LED_Void_LedBlink+0x212>
    3082:	89 e1       	ldi	r24, 0x19	; 25
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	98 a3       	std	Y+32, r25	; 0x20
    3088:	8f 8f       	std	Y+31, r24	; 0x1f
    308a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    308c:	98 a1       	ldd	r25, Y+32	; 0x20
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <H_LED_Void_LedBlink+0x200>
    3092:	98 a3       	std	Y+32, r25	; 0x20
    3094:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3096:	89 a1       	ldd	r24, Y+33	; 0x21
    3098:	9a a1       	ldd	r25, Y+34	; 0x22
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	9a a3       	std	Y+34, r25	; 0x22
    309e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a0:	89 a1       	ldd	r24, Y+33	; 0x21
    30a2:	9a a1       	ldd	r25, Y+34	; 0x22
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	69 f7       	brne	.-38     	; 0x3082 <H_LED_Void_LedBlink+0x1f4>
    30a8:	14 c0       	rjmp	.+40     	; 0x30d2 <H_LED_Void_LedBlink+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30aa:	6b a1       	ldd	r22, Y+35	; 0x23
    30ac:	7c a1       	ldd	r23, Y+36	; 0x24
    30ae:	8d a1       	ldd	r24, Y+37	; 0x25
    30b0:	9e a1       	ldd	r25, Y+38	; 0x26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	9a a3       	std	Y+34, r25	; 0x22
    30bc:	89 a3       	std	Y+33, r24	; 0x21
    30be:	89 a1       	ldd	r24, Y+33	; 0x21
    30c0:	9a a1       	ldd	r25, Y+34	; 0x22
    30c2:	9e 8f       	std	Y+30, r25	; 0x1e
    30c4:	8d 8f       	std	Y+29, r24	; 0x1d
    30c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <H_LED_Void_LedBlink+0x23c>
    30ce:	9e 8f       	std	Y+30, r25	; 0x1e
    30d0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LED_DELAY_TIME); //delay for 10000ms
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, LOW);
    30d2:	83 e0       	ldi	r24, 0x03	; 3
    30d4:	60 e0       	ldi	r22, 0x00	; 0
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    30dc:	f9 c0       	rjmp	.+498    	; 0x32d0 <H_LED_Void_LedBlink+0x442>
		break;
		///******_ Blink  GRN_LED Pin Value _******************///
     	case GRN_LED :
     		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, HIGH);
    30de:	83 e0       	ldi	r24, 0x03	; 3
    30e0:	61 e0       	ldi	r22, 0x01	; 1
    30e2:	41 e0       	ldi	r20, 0x01	; 1
    30e4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e5       	ldi	r25, 0x50	; 80
    30ec:	a3 ec       	ldi	r26, 0xC3	; 195
    30ee:	b7 e4       	ldi	r27, 0x47	; 71
    30f0:	89 8f       	std	Y+25, r24	; 0x19
    30f2:	9a 8f       	std	Y+26, r25	; 0x1a
    30f4:	ab 8f       	std	Y+27, r26	; 0x1b
    30f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f8:	69 8d       	ldd	r22, Y+25	; 0x19
    30fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	4a e7       	ldi	r20, 0x7A	; 122
    3106:	53 e4       	ldi	r21, 0x43	; 67
    3108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	8d 8b       	std	Y+21, r24	; 0x15
    3112:	9e 8b       	std	Y+22, r25	; 0x16
    3114:	af 8b       	std	Y+23, r26	; 0x17
    3116:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3118:	6d 89       	ldd	r22, Y+21	; 0x15
    311a:	7e 89       	ldd	r23, Y+22	; 0x16
    311c:	8f 89       	ldd	r24, Y+23	; 0x17
    311e:	98 8d       	ldd	r25, Y+24	; 0x18
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    312c:	88 23       	and	r24, r24
    312e:	2c f4       	brge	.+10     	; 0x313a <H_LED_Void_LedBlink+0x2ac>
		__ticks = 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	9c 8b       	std	Y+20, r25	; 0x14
    3136:	8b 8b       	std	Y+19, r24	; 0x13
    3138:	3f c0       	rjmp	.+126    	; 0x31b8 <H_LED_Void_LedBlink+0x32a>
	else if (__tmp > 65535)
    313a:	6d 89       	ldd	r22, Y+21	; 0x15
    313c:	7e 89       	ldd	r23, Y+22	; 0x16
    313e:	8f 89       	ldd	r24, Y+23	; 0x17
    3140:	98 8d       	ldd	r25, Y+24	; 0x18
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	3f ef       	ldi	r19, 0xFF	; 255
    3146:	4f e7       	ldi	r20, 0x7F	; 127
    3148:	57 e4       	ldi	r21, 0x47	; 71
    314a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    314e:	18 16       	cp	r1, r24
    3150:	4c f5       	brge	.+82     	; 0x31a4 <H_LED_Void_LedBlink+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3152:	69 8d       	ldd	r22, Y+25	; 0x19
    3154:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3156:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3158:	9c 8d       	ldd	r25, Y+28	; 0x1c
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e2       	ldi	r20, 0x20	; 32
    3160:	51 e4       	ldi	r21, 0x41	; 65
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	9c 8b       	std	Y+20, r25	; 0x14
    3178:	8b 8b       	std	Y+19, r24	; 0x13
    317a:	0f c0       	rjmp	.+30     	; 0x319a <H_LED_Void_LedBlink+0x30c>
    317c:	89 e1       	ldi	r24, 0x19	; 25
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9a 8b       	std	Y+18, r25	; 0x12
    3182:	89 8b       	std	Y+17, r24	; 0x11
    3184:	89 89       	ldd	r24, Y+17	; 0x11
    3186:	9a 89       	ldd	r25, Y+18	; 0x12
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <H_LED_Void_LedBlink+0x2fa>
    318c:	9a 8b       	std	Y+18, r25	; 0x12
    318e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3190:	8b 89       	ldd	r24, Y+19	; 0x13
    3192:	9c 89       	ldd	r25, Y+20	; 0x14
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	9c 8b       	std	Y+20, r25	; 0x14
    3198:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319a:	8b 89       	ldd	r24, Y+19	; 0x13
    319c:	9c 89       	ldd	r25, Y+20	; 0x14
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	69 f7       	brne	.-38     	; 0x317c <H_LED_Void_LedBlink+0x2ee>
    31a2:	14 c0       	rjmp	.+40     	; 0x31cc <H_LED_Void_LedBlink+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a4:	6d 89       	ldd	r22, Y+21	; 0x15
    31a6:	7e 89       	ldd	r23, Y+22	; 0x16
    31a8:	8f 89       	ldd	r24, Y+23	; 0x17
    31aa:	98 8d       	ldd	r25, Y+24	; 0x18
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9c 8b       	std	Y+20, r25	; 0x14
    31b6:	8b 8b       	std	Y+19, r24	; 0x13
    31b8:	8b 89       	ldd	r24, Y+19	; 0x13
    31ba:	9c 89       	ldd	r25, Y+20	; 0x14
    31bc:	98 8b       	std	Y+16, r25	; 0x10
    31be:	8f 87       	std	Y+15, r24	; 0x0f
    31c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c2:	98 89       	ldd	r25, Y+16	; 0x10
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <H_LED_Void_LedBlink+0x336>
    31c8:	98 8b       	std	Y+16, r25	; 0x10
    31ca:	8f 87       	std	Y+15, r24	; 0x0f
     		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
     		///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    31cc:	83 e0       	ldi	r24, 0x03	; 3
    31ce:	61 e0       	ldi	r22, 0x01	; 1
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    31d6:	7c c0       	rjmp	.+248    	; 0x32d0 <H_LED_Void_LedBlink+0x442>
     	break;

     	///******_ Blink  YELLOW_LED Pin Value _******************///
     	case YELLOW_LED :
		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    31d8:	83 e0       	ldi	r24, 0x03	; 3
    31da:	63 e0       	ldi	r22, 0x03	; 3
    31dc:	41 e0       	ldi	r20, 0x01	; 1
    31de:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e5       	ldi	r25, 0x50	; 80
    31e6:	a3 ec       	ldi	r26, 0xC3	; 195
    31e8:	b7 e4       	ldi	r27, 0x47	; 71
    31ea:	8b 87       	std	Y+11, r24	; 0x0b
    31ec:	9c 87       	std	Y+12, r25	; 0x0c
    31ee:	ad 87       	std	Y+13, r26	; 0x0d
    31f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	4a e7       	ldi	r20, 0x7A	; 122
    3200:	53 e4       	ldi	r21, 0x43	; 67
    3202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	8f 83       	std	Y+7, r24	; 0x07
    320c:	98 87       	std	Y+8, r25	; 0x08
    320e:	a9 87       	std	Y+9, r26	; 0x09
    3210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3212:	6f 81       	ldd	r22, Y+7	; 0x07
    3214:	78 85       	ldd	r23, Y+8	; 0x08
    3216:	89 85       	ldd	r24, Y+9	; 0x09
    3218:	9a 85       	ldd	r25, Y+10	; 0x0a
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e8       	ldi	r20, 0x80	; 128
    3220:	5f e3       	ldi	r21, 0x3F	; 63
    3222:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3226:	88 23       	and	r24, r24
    3228:	2c f4       	brge	.+10     	; 0x3234 <H_LED_Void_LedBlink+0x3a6>
		__ticks = 1;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	9e 83       	std	Y+6, r25	; 0x06
    3230:	8d 83       	std	Y+5, r24	; 0x05
    3232:	3f c0       	rjmp	.+126    	; 0x32b2 <H_LED_Void_LedBlink+0x424>
	else if (__tmp > 65535)
    3234:	6f 81       	ldd	r22, Y+7	; 0x07
    3236:	78 85       	ldd	r23, Y+8	; 0x08
    3238:	89 85       	ldd	r24, Y+9	; 0x09
    323a:	9a 85       	ldd	r25, Y+10	; 0x0a
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	3f ef       	ldi	r19, 0xFF	; 255
    3240:	4f e7       	ldi	r20, 0x7F	; 127
    3242:	57 e4       	ldi	r21, 0x47	; 71
    3244:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3248:	18 16       	cp	r1, r24
    324a:	4c f5       	brge	.+82     	; 0x329e <H_LED_Void_LedBlink+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324c:	6b 85       	ldd	r22, Y+11	; 0x0b
    324e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3250:	8d 85       	ldd	r24, Y+13	; 0x0d
    3252:	9e 85       	ldd	r25, Y+14	; 0x0e
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e2       	ldi	r20, 0x20	; 32
    325a:	51 e4       	ldi	r21, 0x41	; 65
    325c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	bc 01       	movw	r22, r24
    3266:	cd 01       	movw	r24, r26
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9e 83       	std	Y+6, r25	; 0x06
    3272:	8d 83       	std	Y+5, r24	; 0x05
    3274:	0f c0       	rjmp	.+30     	; 0x3294 <H_LED_Void_LedBlink+0x406>
    3276:	89 e1       	ldi	r24, 0x19	; 25
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	9c 83       	std	Y+4, r25	; 0x04
    327c:	8b 83       	std	Y+3, r24	; 0x03
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	9c 81       	ldd	r25, Y+4	; 0x04
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <H_LED_Void_LedBlink+0x3f4>
    3286:	9c 83       	std	Y+4, r25	; 0x04
    3288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328a:	8d 81       	ldd	r24, Y+5	; 0x05
    328c:	9e 81       	ldd	r25, Y+6	; 0x06
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3294:	8d 81       	ldd	r24, Y+5	; 0x05
    3296:	9e 81       	ldd	r25, Y+6	; 0x06
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	69 f7       	brne	.-38     	; 0x3276 <H_LED_Void_LedBlink+0x3e8>
    329c:	14 c0       	rjmp	.+40     	; 0x32c6 <H_LED_Void_LedBlink+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    329e:	6f 81       	ldd	r22, Y+7	; 0x07
    32a0:	78 85       	ldd	r23, Y+8	; 0x08
    32a2:	89 85       	ldd	r24, Y+9	; 0x09
    32a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	9e 83       	std	Y+6, r25	; 0x06
    32b0:	8d 83       	std	Y+5, r24	; 0x05
    32b2:	8d 81       	ldd	r24, Y+5	; 0x05
    32b4:	9e 81       	ldd	r25, Y+6	; 0x06
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	9a 81       	ldd	r25, Y+2	; 0x02
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	f1 f7       	brne	.-4      	; 0x32be <H_LED_Void_LedBlink+0x430>
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
		///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
		    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    32c6:	83 e0       	ldi	r24, 0x03	; 3
    32c8:	63 e0       	ldi	r22, 0x03	; 3
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
		break;


		default :   /*****error*****/    break;

}    	}
    32d0:	eb 96       	adiw	r28, 0x3b	; 59
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	08 95       	ret

000032e2 <H_LCD_Void_LCDInt>:

/// ***************MACROS************//
/// **************FUNCTIONS********//

void H_LCD_Void_LCDInt(void)
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	2e 97       	sbiw	r28, 0x0e	; 14
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON


#elif  LCD_MODE == Activate_4_bit_mode   ///****4_bit_mode**********///
	///**SetPinDirection for LCD_DATA_PINS from LCD_DATA4 to LCD_DATA7 to OUTPUT////
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA4_PIN,OUTPUT ); ///LCD_DATA4_PIN
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	64 e0       	ldi	r22, 0x04	; 4
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA5_PIN,OUTPUT ); ///LCD_DATA5_PIN
    3300:	82 e0       	ldi	r24, 0x02	; 2
    3302:	65 e0       	ldi	r22, 0x05	; 5
    3304:	41 e0       	ldi	r20, 0x01	; 1
    3306:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA6_PIN,OUTPUT ); ///LCD_DATA6_PIN
    330a:	82 e0       	ldi	r24, 0x02	; 2
    330c:	66 e0       	ldi	r22, 0x06	; 6
    330e:	41 e0       	ldi	r20, 0x01	; 1
    3310:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA7_PIN,OUTPUT ); ///LCD_DATA7_PIN
    3314:	82 e0       	ldi	r24, 0x02	; 2
    3316:	67 e0       	ldi	r22, 0x07	; 7
    3318:	41 e0       	ldi	r20, 0x01	; 1
    331a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT );
    331e:	84 e0       	ldi	r24, 0x04	; 4
    3320:	67 e0       	ldi	r22, 0x07	; 7
    3322:	41 e0       	ldi	r20, 0x01	; 1
    3324:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT );
    3328:	84 e0       	ldi	r24, 0x04	; 4
    332a:	66 e0       	ldi	r22, 0x06	; 6
    332c:	41 e0       	ldi	r20, 0x01	; 1
    332e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e4       	ldi	r25, 0x40	; 64
    3336:	ac e1       	ldi	r26, 0x1C	; 28
    3338:	b6 e4       	ldi	r27, 0x46	; 70
    333a:	8b 87       	std	Y+11, r24	; 0x0b
    333c:	9c 87       	std	Y+12, r25	; 0x0c
    333e:	ad 87       	std	Y+13, r26	; 0x0d
    3340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3342:	6b 85       	ldd	r22, Y+11	; 0x0b
    3344:	7c 85       	ldd	r23, Y+12	; 0x0c
    3346:	8d 85       	ldd	r24, Y+13	; 0x0d
    3348:	9e 85       	ldd	r25, Y+14	; 0x0e
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	4a e7       	ldi	r20, 0x7A	; 122
    3350:	53 e4       	ldi	r21, 0x43	; 67
    3352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	8f 83       	std	Y+7, r24	; 0x07
    335c:	98 87       	std	Y+8, r25	; 0x08
    335e:	a9 87       	std	Y+9, r26	; 0x09
    3360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3362:	6f 81       	ldd	r22, Y+7	; 0x07
    3364:	78 85       	ldd	r23, Y+8	; 0x08
    3366:	89 85       	ldd	r24, Y+9	; 0x09
    3368:	9a 85       	ldd	r25, Y+10	; 0x0a
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e8       	ldi	r20, 0x80	; 128
    3370:	5f e3       	ldi	r21, 0x3F	; 63
    3372:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3376:	88 23       	and	r24, r24
    3378:	2c f4       	brge	.+10     	; 0x3384 <H_LCD_Void_LCDInt+0xa2>
		__ticks = 1;
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	9e 83       	std	Y+6, r25	; 0x06
    3380:	8d 83       	std	Y+5, r24	; 0x05
    3382:	3f c0       	rjmp	.+126    	; 0x3402 <H_LCD_Void_LCDInt+0x120>
	else if (__tmp > 65535)
    3384:	6f 81       	ldd	r22, Y+7	; 0x07
    3386:	78 85       	ldd	r23, Y+8	; 0x08
    3388:	89 85       	ldd	r24, Y+9	; 0x09
    338a:	9a 85       	ldd	r25, Y+10	; 0x0a
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	3f ef       	ldi	r19, 0xFF	; 255
    3390:	4f e7       	ldi	r20, 0x7F	; 127
    3392:	57 e4       	ldi	r21, 0x47	; 71
    3394:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3398:	18 16       	cp	r1, r24
    339a:	4c f5       	brge	.+82     	; 0x33ee <H_LCD_Void_LCDInt+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339c:	6b 85       	ldd	r22, Y+11	; 0x0b
    339e:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e2       	ldi	r20, 0x20	; 32
    33aa:	51 e4       	ldi	r21, 0x41	; 65
    33ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	bc 01       	movw	r22, r24
    33b6:	cd 01       	movw	r24, r26
    33b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
    33c4:	0f c0       	rjmp	.+30     	; 0x33e4 <H_LCD_Void_LCDInt+0x102>
    33c6:	89 e1       	ldi	r24, 0x19	; 25
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	9c 83       	std	Y+4, r25	; 0x04
    33cc:	8b 83       	std	Y+3, r24	; 0x03
    33ce:	8b 81       	ldd	r24, Y+3	; 0x03
    33d0:	9c 81       	ldd	r25, Y+4	; 0x04
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <H_LCD_Void_LCDInt+0xf0>
    33d6:	9c 83       	std	Y+4, r25	; 0x04
    33d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	9e 83       	std	Y+6, r25	; 0x06
    33e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	00 97       	sbiw	r24, 0x00	; 0
    33ea:	69 f7       	brne	.-38     	; 0x33c6 <H_LCD_Void_LCDInt+0xe4>
    33ec:	14 c0       	rjmp	.+40     	; 0x3416 <H_LCD_Void_LCDInt+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ee:	6f 81       	ldd	r22, Y+7	; 0x07
    33f0:	78 85       	ldd	r23, Y+8	; 0x08
    33f2:	89 85       	ldd	r24, Y+9	; 0x09
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	9e 83       	std	Y+6, r25	; 0x06
    3400:	8d 83       	std	Y+5, r24	; 0x05
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9e 81       	ldd	r25, Y+6	; 0x06
    3406:	9a 83       	std	Y+2, r25	; 0x02
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	9a 81       	ldd	r25, Y+2	; 0x02
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	f1 f7       	brne	.-4      	; 0x340e <H_LCD_Void_LCDInt+0x12c>
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);   /// delay for 1 second to give LCD Microcontroller time to start
	///****************  LCD Commands***********///
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command1);  ///
    3416:	83 e3       	ldi	r24, 0x33	; 51
    3418:	0e 94 38 1c 	call	0x3870	; 0x3870 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command2);  /// set 4_bit_mode
    341c:	82 e3       	ldi	r24, 0x32	; 50
    341e:	0e 94 38 1c 	call	0x3870	; 0x3870 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command3);  ///
    3422:	88 e2       	ldi	r24, 0x28	; 40
    3424:	0e 94 38 1c 	call	0x3870	; 0x3870 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON
    3428:	8c e0       	ldi	r24, 0x0C	; 12
    342a:	0e 94 38 1c 	call	0x3870	; 0x3870 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Return_Home);         /// LCD start from home
    342e:	82 e0       	ldi	r24, 0x02	; 2
    3430:	0e 94 38 1c 	call	0x3870	; 0x3870 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Clear_screen);        /// Clear LCD screen
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	0e 94 38 1c 	call	0x3870	; 0x3870 <H_LCD_Void_LCDWriteCommand>

#endif
}
    343a:	2e 96       	adiw	r28, 0x0e	; 14
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <H_LCD_Void_LCDDisplayCharacter>:
///***********Function to DisplayCharacter on the LCD*****8///
void H_LCD_Void_LCDDisplayCharacter(u8 Local_u8_character)
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	e9 97       	sbiw	r28, 0x39	; 57
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3462:	84 e0       	ldi	r24, 0x04	; 4
    3464:	66 e0       	ldi	r22, 0x06	; 6
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_character& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    346c:	a8 e3       	ldi	r26, 0x38	; 56
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	89 ad       	ldd	r24, Y+57	; 0x39
    3472:	98 2f       	mov	r25, r24
    3474:	90 7f       	andi	r25, 0xF0	; 240
    3476:	e8 e3       	ldi	r30, 0x38	; 56
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	8f 70       	andi	r24, 0x0F	; 15
    347e:	89 2b       	or	r24, r25
    3480:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3482:	84 e0       	ldi	r24, 0x04	; 4
    3484:	67 e0       	ldi	r22, 0x07	; 7
    3486:	41 e0       	ldi	r20, 0x01	; 1
    3488:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	a0 e8       	ldi	r26, 0x80	; 128
    3492:	bf e3       	ldi	r27, 0x3F	; 63
    3494:	8d ab       	std	Y+53, r24	; 0x35
    3496:	9e ab       	std	Y+54, r25	; 0x36
    3498:	af ab       	std	Y+55, r26	; 0x37
    349a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349c:	6d a9       	ldd	r22, Y+53	; 0x35
    349e:	7e a9       	ldd	r23, Y+54	; 0x36
    34a0:	8f a9       	ldd	r24, Y+55	; 0x37
    34a2:	98 ad       	ldd	r25, Y+56	; 0x38
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	4a e7       	ldi	r20, 0x7A	; 122
    34aa:	53 e4       	ldi	r21, 0x43	; 67
    34ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	89 ab       	std	Y+49, r24	; 0x31
    34b6:	9a ab       	std	Y+50, r25	; 0x32
    34b8:	ab ab       	std	Y+51, r26	; 0x33
    34ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34bc:	69 a9       	ldd	r22, Y+49	; 0x31
    34be:	7a a9       	ldd	r23, Y+50	; 0x32
    34c0:	8b a9       	ldd	r24, Y+51	; 0x33
    34c2:	9c a9       	ldd	r25, Y+52	; 0x34
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	40 e8       	ldi	r20, 0x80	; 128
    34ca:	5f e3       	ldi	r21, 0x3F	; 63
    34cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d0:	88 23       	and	r24, r24
    34d2:	2c f4       	brge	.+10     	; 0x34de <H_LCD_Void_LCDDisplayCharacter+0x92>
		__ticks = 1;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	98 ab       	std	Y+48, r25	; 0x30
    34da:	8f a7       	std	Y+47, r24	; 0x2f
    34dc:	3f c0       	rjmp	.+126    	; 0x355c <H_LCD_Void_LCDDisplayCharacter+0x110>
	else if (__tmp > 65535)
    34de:	69 a9       	ldd	r22, Y+49	; 0x31
    34e0:	7a a9       	ldd	r23, Y+50	; 0x32
    34e2:	8b a9       	ldd	r24, Y+51	; 0x33
    34e4:	9c a9       	ldd	r25, Y+52	; 0x34
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	3f ef       	ldi	r19, 0xFF	; 255
    34ea:	4f e7       	ldi	r20, 0x7F	; 127
    34ec:	57 e4       	ldi	r21, 0x47	; 71
    34ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34f2:	18 16       	cp	r1, r24
    34f4:	4c f5       	brge	.+82     	; 0x3548 <H_LCD_Void_LCDDisplayCharacter+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f6:	6d a9       	ldd	r22, Y+53	; 0x35
    34f8:	7e a9       	ldd	r23, Y+54	; 0x36
    34fa:	8f a9       	ldd	r24, Y+55	; 0x37
    34fc:	98 ad       	ldd	r25, Y+56	; 0x38
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	40 e2       	ldi	r20, 0x20	; 32
    3504:	51 e4       	ldi	r21, 0x41	; 65
    3506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	bc 01       	movw	r22, r24
    3510:	cd 01       	movw	r24, r26
    3512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	98 ab       	std	Y+48, r25	; 0x30
    351c:	8f a7       	std	Y+47, r24	; 0x2f
    351e:	0f c0       	rjmp	.+30     	; 0x353e <H_LCD_Void_LCDDisplayCharacter+0xf2>
    3520:	89 e1       	ldi	r24, 0x19	; 25
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	9e a7       	std	Y+46, r25	; 0x2e
    3526:	8d a7       	std	Y+45, r24	; 0x2d
    3528:	8d a5       	ldd	r24, Y+45	; 0x2d
    352a:	9e a5       	ldd	r25, Y+46	; 0x2e
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	f1 f7       	brne	.-4      	; 0x352c <H_LCD_Void_LCDDisplayCharacter+0xe0>
    3530:	9e a7       	std	Y+46, r25	; 0x2e
    3532:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3534:	8f a5       	ldd	r24, Y+47	; 0x2f
    3536:	98 a9       	ldd	r25, Y+48	; 0x30
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	98 ab       	std	Y+48, r25	; 0x30
    353c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3540:	98 a9       	ldd	r25, Y+48	; 0x30
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	69 f7       	brne	.-38     	; 0x3520 <H_LCD_Void_LCDDisplayCharacter+0xd4>
    3546:	14 c0       	rjmp	.+40     	; 0x3570 <H_LCD_Void_LCDDisplayCharacter+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3548:	69 a9       	ldd	r22, Y+49	; 0x31
    354a:	7a a9       	ldd	r23, Y+50	; 0x32
    354c:	8b a9       	ldd	r24, Y+51	; 0x33
    354e:	9c a9       	ldd	r25, Y+52	; 0x34
    3550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	98 ab       	std	Y+48, r25	; 0x30
    355a:	8f a7       	std	Y+47, r24	; 0x2f
    355c:	8f a5       	ldd	r24, Y+47	; 0x2f
    355e:	98 a9       	ldd	r25, Y+48	; 0x30
    3560:	9c a7       	std	Y+44, r25	; 0x2c
    3562:	8b a7       	std	Y+43, r24	; 0x2b
    3564:	8b a5       	ldd	r24, Y+43	; 0x2b
    3566:	9c a5       	ldd	r25, Y+44	; 0x2c
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <H_LCD_Void_LCDDisplayCharacter+0x11c>
    356c:	9c a7       	std	Y+44, r25	; 0x2c
    356e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    3570:	84 e0       	ldi	r24, 0x04	; 4
    3572:	67 e0       	ldi	r22, 0x07	; 7
    3574:	40 e0       	ldi	r20, 0x00	; 0
    3576:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	a0 e8       	ldi	r26, 0x80	; 128
    3580:	bf e3       	ldi	r27, 0x3F	; 63
    3582:	8f a3       	std	Y+39, r24	; 0x27
    3584:	98 a7       	std	Y+40, r25	; 0x28
    3586:	a9 a7       	std	Y+41, r26	; 0x29
    3588:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    358a:	6f a1       	ldd	r22, Y+39	; 0x27
    358c:	78 a5       	ldd	r23, Y+40	; 0x28
    358e:	89 a5       	ldd	r24, Y+41	; 0x29
    3590:	9a a5       	ldd	r25, Y+42	; 0x2a
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	4a e7       	ldi	r20, 0x7A	; 122
    3598:	53 e4       	ldi	r21, 0x43	; 67
    359a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	8b a3       	std	Y+35, r24	; 0x23
    35a4:	9c a3       	std	Y+36, r25	; 0x24
    35a6:	ad a3       	std	Y+37, r26	; 0x25
    35a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35aa:	6b a1       	ldd	r22, Y+35	; 0x23
    35ac:	7c a1       	ldd	r23, Y+36	; 0x24
    35ae:	8d a1       	ldd	r24, Y+37	; 0x25
    35b0:	9e a1       	ldd	r25, Y+38	; 0x26
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e8       	ldi	r20, 0x80	; 128
    35b8:	5f e3       	ldi	r21, 0x3F	; 63
    35ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35be:	88 23       	and	r24, r24
    35c0:	2c f4       	brge	.+10     	; 0x35cc <H_LCD_Void_LCDDisplayCharacter+0x180>
		__ticks = 1;
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9a a3       	std	Y+34, r25	; 0x22
    35c8:	89 a3       	std	Y+33, r24	; 0x21
    35ca:	3f c0       	rjmp	.+126    	; 0x364a <H_LCD_Void_LCDDisplayCharacter+0x1fe>
	else if (__tmp > 65535)
    35cc:	6b a1       	ldd	r22, Y+35	; 0x23
    35ce:	7c a1       	ldd	r23, Y+36	; 0x24
    35d0:	8d a1       	ldd	r24, Y+37	; 0x25
    35d2:	9e a1       	ldd	r25, Y+38	; 0x26
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	3f ef       	ldi	r19, 0xFF	; 255
    35d8:	4f e7       	ldi	r20, 0x7F	; 127
    35da:	57 e4       	ldi	r21, 0x47	; 71
    35dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35e0:	18 16       	cp	r1, r24
    35e2:	4c f5       	brge	.+82     	; 0x3636 <H_LCD_Void_LCDDisplayCharacter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e4:	6f a1       	ldd	r22, Y+39	; 0x27
    35e6:	78 a5       	ldd	r23, Y+40	; 0x28
    35e8:	89 a5       	ldd	r24, Y+41	; 0x29
    35ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	40 e2       	ldi	r20, 0x20	; 32
    35f2:	51 e4       	ldi	r21, 0x41	; 65
    35f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	bc 01       	movw	r22, r24
    35fe:	cd 01       	movw	r24, r26
    3600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	9a a3       	std	Y+34, r25	; 0x22
    360a:	89 a3       	std	Y+33, r24	; 0x21
    360c:	0f c0       	rjmp	.+30     	; 0x362c <H_LCD_Void_LCDDisplayCharacter+0x1e0>
    360e:	89 e1       	ldi	r24, 0x19	; 25
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	98 a3       	std	Y+32, r25	; 0x20
    3614:	8f 8f       	std	Y+31, r24	; 0x1f
    3616:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3618:	98 a1       	ldd	r25, Y+32	; 0x20
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	f1 f7       	brne	.-4      	; 0x361a <H_LCD_Void_LCDDisplayCharacter+0x1ce>
    361e:	98 a3       	std	Y+32, r25	; 0x20
    3620:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3622:	89 a1       	ldd	r24, Y+33	; 0x21
    3624:	9a a1       	ldd	r25, Y+34	; 0x22
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	9a a3       	std	Y+34, r25	; 0x22
    362a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    362c:	89 a1       	ldd	r24, Y+33	; 0x21
    362e:	9a a1       	ldd	r25, Y+34	; 0x22
    3630:	00 97       	sbiw	r24, 0x00	; 0
    3632:	69 f7       	brne	.-38     	; 0x360e <H_LCD_Void_LCDDisplayCharacter+0x1c2>
    3634:	14 c0       	rjmp	.+40     	; 0x365e <H_LCD_Void_LCDDisplayCharacter+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3636:	6b a1       	ldd	r22, Y+35	; 0x23
    3638:	7c a1       	ldd	r23, Y+36	; 0x24
    363a:	8d a1       	ldd	r24, Y+37	; 0x25
    363c:	9e a1       	ldd	r25, Y+38	; 0x26
    363e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	9a a3       	std	Y+34, r25	; 0x22
    3648:	89 a3       	std	Y+33, r24	; 0x21
    364a:	89 a1       	ldd	r24, Y+33	; 0x21
    364c:	9a a1       	ldd	r25, Y+34	; 0x22
    364e:	9e 8f       	std	Y+30, r25	; 0x1e
    3650:	8d 8f       	std	Y+29, r24	; 0x1d
    3652:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3654:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <H_LCD_Void_LCDDisplayCharacter+0x20a>
    365a:	9e 8f       	std	Y+30, r25	; 0x1e
    365c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_character << 4 ) & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    365e:	a8 e3       	ldi	r26, 0x38	; 56
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	89 ad       	ldd	r24, Y+57	; 0x39
    3664:	88 2f       	mov	r24, r24
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	82 95       	swap	r24
    366a:	92 95       	swap	r25
    366c:	90 7f       	andi	r25, 0xF0	; 240
    366e:	98 27       	eor	r25, r24
    3670:	80 7f       	andi	r24, 0xF0	; 240
    3672:	98 27       	eor	r25, r24
    3674:	98 2f       	mov	r25, r24
    3676:	e8 e3       	ldi	r30, 0x38	; 56
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	8f 70       	andi	r24, 0x0F	; 15
    367e:	89 2b       	or	r24, r25
    3680:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3682:	84 e0       	ldi	r24, 0x04	; 4
    3684:	67 e0       	ldi	r22, 0x07	; 7
    3686:	41 e0       	ldi	r20, 0x01	; 1
    3688:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	a0 e8       	ldi	r26, 0x80	; 128
    3692:	bf e3       	ldi	r27, 0x3F	; 63
    3694:	89 8f       	std	Y+25, r24	; 0x19
    3696:	9a 8f       	std	Y+26, r25	; 0x1a
    3698:	ab 8f       	std	Y+27, r26	; 0x1b
    369a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369c:	69 8d       	ldd	r22, Y+25	; 0x19
    369e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	4a e7       	ldi	r20, 0x7A	; 122
    36aa:	53 e4       	ldi	r21, 0x43	; 67
    36ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	8d 8b       	std	Y+21, r24	; 0x15
    36b6:	9e 8b       	std	Y+22, r25	; 0x16
    36b8:	af 8b       	std	Y+23, r26	; 0x17
    36ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36bc:	6d 89       	ldd	r22, Y+21	; 0x15
    36be:	7e 89       	ldd	r23, Y+22	; 0x16
    36c0:	8f 89       	ldd	r24, Y+23	; 0x17
    36c2:	98 8d       	ldd	r25, Y+24	; 0x18
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e8       	ldi	r20, 0x80	; 128
    36ca:	5f e3       	ldi	r21, 0x3F	; 63
    36cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36d0:	88 23       	and	r24, r24
    36d2:	2c f4       	brge	.+10     	; 0x36de <H_LCD_Void_LCDDisplayCharacter+0x292>
		__ticks = 1;
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	9c 8b       	std	Y+20, r25	; 0x14
    36da:	8b 8b       	std	Y+19, r24	; 0x13
    36dc:	3f c0       	rjmp	.+126    	; 0x375c <H_LCD_Void_LCDDisplayCharacter+0x310>
	else if (__tmp > 65535)
    36de:	6d 89       	ldd	r22, Y+21	; 0x15
    36e0:	7e 89       	ldd	r23, Y+22	; 0x16
    36e2:	8f 89       	ldd	r24, Y+23	; 0x17
    36e4:	98 8d       	ldd	r25, Y+24	; 0x18
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	3f ef       	ldi	r19, 0xFF	; 255
    36ea:	4f e7       	ldi	r20, 0x7F	; 127
    36ec:	57 e4       	ldi	r21, 0x47	; 71
    36ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36f2:	18 16       	cp	r1, r24
    36f4:	4c f5       	brge	.+82     	; 0x3748 <H_LCD_Void_LCDDisplayCharacter+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f6:	69 8d       	ldd	r22, Y+25	; 0x19
    36f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e2       	ldi	r20, 0x20	; 32
    3704:	51 e4       	ldi	r21, 0x41	; 65
    3706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	bc 01       	movw	r22, r24
    3710:	cd 01       	movw	r24, r26
    3712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	9c 8b       	std	Y+20, r25	; 0x14
    371c:	8b 8b       	std	Y+19, r24	; 0x13
    371e:	0f c0       	rjmp	.+30     	; 0x373e <H_LCD_Void_LCDDisplayCharacter+0x2f2>
    3720:	89 e1       	ldi	r24, 0x19	; 25
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9a 8b       	std	Y+18, r25	; 0x12
    3726:	89 8b       	std	Y+17, r24	; 0x11
    3728:	89 89       	ldd	r24, Y+17	; 0x11
    372a:	9a 89       	ldd	r25, Y+18	; 0x12
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	f1 f7       	brne	.-4      	; 0x372c <H_LCD_Void_LCDDisplayCharacter+0x2e0>
    3730:	9a 8b       	std	Y+18, r25	; 0x12
    3732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3734:	8b 89       	ldd	r24, Y+19	; 0x13
    3736:	9c 89       	ldd	r25, Y+20	; 0x14
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	9c 8b       	std	Y+20, r25	; 0x14
    373c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    373e:	8b 89       	ldd	r24, Y+19	; 0x13
    3740:	9c 89       	ldd	r25, Y+20	; 0x14
    3742:	00 97       	sbiw	r24, 0x00	; 0
    3744:	69 f7       	brne	.-38     	; 0x3720 <H_LCD_Void_LCDDisplayCharacter+0x2d4>
    3746:	14 c0       	rjmp	.+40     	; 0x3770 <H_LCD_Void_LCDDisplayCharacter+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3748:	6d 89       	ldd	r22, Y+21	; 0x15
    374a:	7e 89       	ldd	r23, Y+22	; 0x16
    374c:	8f 89       	ldd	r24, Y+23	; 0x17
    374e:	98 8d       	ldd	r25, Y+24	; 0x18
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	9c 8b       	std	Y+20, r25	; 0x14
    375a:	8b 8b       	std	Y+19, r24	; 0x13
    375c:	8b 89       	ldd	r24, Y+19	; 0x13
    375e:	9c 89       	ldd	r25, Y+20	; 0x14
    3760:	98 8b       	std	Y+16, r25	; 0x10
    3762:	8f 87       	std	Y+15, r24	; 0x0f
    3764:	8f 85       	ldd	r24, Y+15	; 0x0f
    3766:	98 89       	ldd	r25, Y+16	; 0x10
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <H_LCD_Void_LCDDisplayCharacter+0x31c>
    376c:	98 8b       	std	Y+16, r25	; 0x10
    376e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    3770:	84 e0       	ldi	r24, 0x04	; 4
    3772:	67 e0       	ldi	r22, 0x07	; 7
    3774:	40 e0       	ldi	r20, 0x00	; 0
    3776:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	a0 ea       	ldi	r26, 0xA0	; 160
    3780:	b0 e4       	ldi	r27, 0x40	; 64
    3782:	8b 87       	std	Y+11, r24	; 0x0b
    3784:	9c 87       	std	Y+12, r25	; 0x0c
    3786:	ad 87       	std	Y+13, r26	; 0x0d
    3788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378a:	6b 85       	ldd	r22, Y+11	; 0x0b
    378c:	7c 85       	ldd	r23, Y+12	; 0x0c
    378e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3790:	9e 85       	ldd	r25, Y+14	; 0x0e
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	4a e7       	ldi	r20, 0x7A	; 122
    3798:	53 e4       	ldi	r21, 0x43	; 67
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	8f 83       	std	Y+7, r24	; 0x07
    37a4:	98 87       	std	Y+8, r25	; 0x08
    37a6:	a9 87       	std	Y+9, r26	; 0x09
    37a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37aa:	6f 81       	ldd	r22, Y+7	; 0x07
    37ac:	78 85       	ldd	r23, Y+8	; 0x08
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	40 e8       	ldi	r20, 0x80	; 128
    37b8:	5f e3       	ldi	r21, 0x3F	; 63
    37ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37be:	88 23       	and	r24, r24
    37c0:	2c f4       	brge	.+10     	; 0x37cc <H_LCD_Void_LCDDisplayCharacter+0x380>
		__ticks = 1;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	3f c0       	rjmp	.+126    	; 0x384a <H_LCD_Void_LCDDisplayCharacter+0x3fe>
	else if (__tmp > 65535)
    37cc:	6f 81       	ldd	r22, Y+7	; 0x07
    37ce:	78 85       	ldd	r23, Y+8	; 0x08
    37d0:	89 85       	ldd	r24, Y+9	; 0x09
    37d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	3f ef       	ldi	r19, 0xFF	; 255
    37d8:	4f e7       	ldi	r20, 0x7F	; 127
    37da:	57 e4       	ldi	r21, 0x47	; 71
    37dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e0:	18 16       	cp	r1, r24
    37e2:	4c f5       	brge	.+82     	; 0x3836 <H_LCD_Void_LCDDisplayCharacter+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e2       	ldi	r20, 0x20	; 32
    37f2:	51 e4       	ldi	r21, 0x41	; 65
    37f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	bc 01       	movw	r22, r24
    37fe:	cd 01       	movw	r24, r26
    3800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	9e 83       	std	Y+6, r25	; 0x06
    380a:	8d 83       	std	Y+5, r24	; 0x05
    380c:	0f c0       	rjmp	.+30     	; 0x382c <H_LCD_Void_LCDDisplayCharacter+0x3e0>
    380e:	89 e1       	ldi	r24, 0x19	; 25
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9c 83       	std	Y+4, r25	; 0x04
    3814:	8b 83       	std	Y+3, r24	; 0x03
    3816:	8b 81       	ldd	r24, Y+3	; 0x03
    3818:	9c 81       	ldd	r25, Y+4	; 0x04
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	f1 f7       	brne	.-4      	; 0x381a <H_LCD_Void_LCDDisplayCharacter+0x3ce>
    381e:	9c 83       	std	Y+4, r25	; 0x04
    3820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3822:	8d 81       	ldd	r24, Y+5	; 0x05
    3824:	9e 81       	ldd	r25, Y+6	; 0x06
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	9e 83       	std	Y+6, r25	; 0x06
    382a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382c:	8d 81       	ldd	r24, Y+5	; 0x05
    382e:	9e 81       	ldd	r25, Y+6	; 0x06
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	69 f7       	brne	.-38     	; 0x380e <H_LCD_Void_LCDDisplayCharacter+0x3c2>
    3834:	14 c0       	rjmp	.+40     	; 0x385e <H_LCD_Void_LCDDisplayCharacter+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3836:	6f 81       	ldd	r22, Y+7	; 0x07
    3838:	78 85       	ldd	r23, Y+8	; 0x08
    383a:	89 85       	ldd	r24, Y+9	; 0x09
    383c:	9a 85       	ldd	r25, Y+10	; 0x0a
    383e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	8d 83       	std	Y+5, r24	; 0x05
    384a:	8d 81       	ldd	r24, Y+5	; 0x05
    384c:	9e 81       	ldd	r25, Y+6	; 0x06
    384e:	9a 83       	std	Y+2, r25	; 0x02
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	9a 81       	ldd	r25, Y+2	; 0x02
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	f1 f7       	brne	.-4      	; 0x3856 <H_LCD_Void_LCDDisplayCharacter+0x40a>
    385a:	9a 83       	std	Y+2, r25	; 0x02
    385c:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    385e:	e9 96       	adiw	r28, 0x39	; 57
    3860:	0f b6       	in	r0, 0x3f	; 63
    3862:	f8 94       	cli
    3864:	de bf       	out	0x3e, r29	; 62
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	cd bf       	out	0x3d, r28	; 61
    386a:	cf 91       	pop	r28
    386c:	df 91       	pop	r29
    386e:	08 95       	ret

00003870 <H_LCD_Void_LCDWriteCommand>:
///***********Function to write a command to LCD*****8///
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    3870:	df 93       	push	r29
    3872:	cf 93       	push	r28
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	e9 97       	sbiw	r28, 0x39	; 57
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	cd bf       	out	0x3d, r28	; 61
    3884:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3886:	84 e0       	ldi	r24, 0x04	; 4
    3888:	66 e0       	ldi	r22, 0x06	; 6
    388a:	40 e0       	ldi	r20, 0x00	; 0
    388c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_Command & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    3890:	a8 e3       	ldi	r26, 0x38	; 56
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	89 ad       	ldd	r24, Y+57	; 0x39
    3896:	98 2f       	mov	r25, r24
    3898:	90 7f       	andi	r25, 0xF0	; 240
    389a:	e8 e3       	ldi	r30, 0x38	; 56
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	8f 70       	andi	r24, 0x0F	; 15
    38a2:	89 2b       	or	r24, r25
    38a4:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    38a6:	84 e0       	ldi	r24, 0x04	; 4
    38a8:	67 e0       	ldi	r22, 0x07	; 7
    38aa:	41 e0       	ldi	r20, 0x01	; 1
    38ac:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	a0 e8       	ldi	r26, 0x80	; 128
    38b6:	bf e3       	ldi	r27, 0x3F	; 63
    38b8:	8d ab       	std	Y+53, r24	; 0x35
    38ba:	9e ab       	std	Y+54, r25	; 0x36
    38bc:	af ab       	std	Y+55, r26	; 0x37
    38be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c0:	6d a9       	ldd	r22, Y+53	; 0x35
    38c2:	7e a9       	ldd	r23, Y+54	; 0x36
    38c4:	8f a9       	ldd	r24, Y+55	; 0x37
    38c6:	98 ad       	ldd	r25, Y+56	; 0x38
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	4a e7       	ldi	r20, 0x7A	; 122
    38ce:	53 e4       	ldi	r21, 0x43	; 67
    38d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	89 ab       	std	Y+49, r24	; 0x31
    38da:	9a ab       	std	Y+50, r25	; 0x32
    38dc:	ab ab       	std	Y+51, r26	; 0x33
    38de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38e0:	69 a9       	ldd	r22, Y+49	; 0x31
    38e2:	7a a9       	ldd	r23, Y+50	; 0x32
    38e4:	8b a9       	ldd	r24, Y+51	; 0x33
    38e6:	9c a9       	ldd	r25, Y+52	; 0x34
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e8       	ldi	r20, 0x80	; 128
    38ee:	5f e3       	ldi	r21, 0x3F	; 63
    38f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f4:	88 23       	and	r24, r24
    38f6:	2c f4       	brge	.+10     	; 0x3902 <H_LCD_Void_LCDWriteCommand+0x92>
		__ticks = 1;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	98 ab       	std	Y+48, r25	; 0x30
    38fe:	8f a7       	std	Y+47, r24	; 0x2f
    3900:	3f c0       	rjmp	.+126    	; 0x3980 <H_LCD_Void_LCDWriteCommand+0x110>
	else if (__tmp > 65535)
    3902:	69 a9       	ldd	r22, Y+49	; 0x31
    3904:	7a a9       	ldd	r23, Y+50	; 0x32
    3906:	8b a9       	ldd	r24, Y+51	; 0x33
    3908:	9c a9       	ldd	r25, Y+52	; 0x34
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	3f ef       	ldi	r19, 0xFF	; 255
    390e:	4f e7       	ldi	r20, 0x7F	; 127
    3910:	57 e4       	ldi	r21, 0x47	; 71
    3912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3916:	18 16       	cp	r1, r24
    3918:	4c f5       	brge	.+82     	; 0x396c <H_LCD_Void_LCDWriteCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391a:	6d a9       	ldd	r22, Y+53	; 0x35
    391c:	7e a9       	ldd	r23, Y+54	; 0x36
    391e:	8f a9       	ldd	r24, Y+55	; 0x37
    3920:	98 ad       	ldd	r25, Y+56	; 0x38
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e2       	ldi	r20, 0x20	; 32
    3928:	51 e4       	ldi	r21, 0x41	; 65
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	98 ab       	std	Y+48, r25	; 0x30
    3940:	8f a7       	std	Y+47, r24	; 0x2f
    3942:	0f c0       	rjmp	.+30     	; 0x3962 <H_LCD_Void_LCDWriteCommand+0xf2>
    3944:	89 e1       	ldi	r24, 0x19	; 25
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	9e a7       	std	Y+46, r25	; 0x2e
    394a:	8d a7       	std	Y+45, r24	; 0x2d
    394c:	8d a5       	ldd	r24, Y+45	; 0x2d
    394e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	f1 f7       	brne	.-4      	; 0x3950 <H_LCD_Void_LCDWriteCommand+0xe0>
    3954:	9e a7       	std	Y+46, r25	; 0x2e
    3956:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3958:	8f a5       	ldd	r24, Y+47	; 0x2f
    395a:	98 a9       	ldd	r25, Y+48	; 0x30
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	98 ab       	std	Y+48, r25	; 0x30
    3960:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3962:	8f a5       	ldd	r24, Y+47	; 0x2f
    3964:	98 a9       	ldd	r25, Y+48	; 0x30
    3966:	00 97       	sbiw	r24, 0x00	; 0
    3968:	69 f7       	brne	.-38     	; 0x3944 <H_LCD_Void_LCDWriteCommand+0xd4>
    396a:	14 c0       	rjmp	.+40     	; 0x3994 <H_LCD_Void_LCDWriteCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    396c:	69 a9       	ldd	r22, Y+49	; 0x31
    396e:	7a a9       	ldd	r23, Y+50	; 0x32
    3970:	8b a9       	ldd	r24, Y+51	; 0x33
    3972:	9c a9       	ldd	r25, Y+52	; 0x34
    3974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	98 ab       	std	Y+48, r25	; 0x30
    397e:	8f a7       	std	Y+47, r24	; 0x2f
    3980:	8f a5       	ldd	r24, Y+47	; 0x2f
    3982:	98 a9       	ldd	r25, Y+48	; 0x30
    3984:	9c a7       	std	Y+44, r25	; 0x2c
    3986:	8b a7       	std	Y+43, r24	; 0x2b
    3988:	8b a5       	ldd	r24, Y+43	; 0x2b
    398a:	9c a5       	ldd	r25, Y+44	; 0x2c
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <H_LCD_Void_LCDWriteCommand+0x11c>
    3990:	9c a7       	std	Y+44, r25	; 0x2c
    3992:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    3994:	84 e0       	ldi	r24, 0x04	; 4
    3996:	67 e0       	ldi	r22, 0x07	; 7
    3998:	40 e0       	ldi	r20, 0x00	; 0
    399a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	a0 e8       	ldi	r26, 0x80	; 128
    39a4:	bf e3       	ldi	r27, 0x3F	; 63
    39a6:	8f a3       	std	Y+39, r24	; 0x27
    39a8:	98 a7       	std	Y+40, r25	; 0x28
    39aa:	a9 a7       	std	Y+41, r26	; 0x29
    39ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ae:	6f a1       	ldd	r22, Y+39	; 0x27
    39b0:	78 a5       	ldd	r23, Y+40	; 0x28
    39b2:	89 a5       	ldd	r24, Y+41	; 0x29
    39b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	4a e7       	ldi	r20, 0x7A	; 122
    39bc:	53 e4       	ldi	r21, 0x43	; 67
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	8b a3       	std	Y+35, r24	; 0x23
    39c8:	9c a3       	std	Y+36, r25	; 0x24
    39ca:	ad a3       	std	Y+37, r26	; 0x25
    39cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39ce:	6b a1       	ldd	r22, Y+35	; 0x23
    39d0:	7c a1       	ldd	r23, Y+36	; 0x24
    39d2:	8d a1       	ldd	r24, Y+37	; 0x25
    39d4:	9e a1       	ldd	r25, Y+38	; 0x26
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e8       	ldi	r20, 0x80	; 128
    39dc:	5f e3       	ldi	r21, 0x3F	; 63
    39de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e2:	88 23       	and	r24, r24
    39e4:	2c f4       	brge	.+10     	; 0x39f0 <H_LCD_Void_LCDWriteCommand+0x180>
		__ticks = 1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	9a a3       	std	Y+34, r25	; 0x22
    39ec:	89 a3       	std	Y+33, r24	; 0x21
    39ee:	3f c0       	rjmp	.+126    	; 0x3a6e <H_LCD_Void_LCDWriteCommand+0x1fe>
	else if (__tmp > 65535)
    39f0:	6b a1       	ldd	r22, Y+35	; 0x23
    39f2:	7c a1       	ldd	r23, Y+36	; 0x24
    39f4:	8d a1       	ldd	r24, Y+37	; 0x25
    39f6:	9e a1       	ldd	r25, Y+38	; 0x26
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	3f ef       	ldi	r19, 0xFF	; 255
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	57 e4       	ldi	r21, 0x47	; 71
    3a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	4c f5       	brge	.+82     	; 0x3a5a <H_LCD_Void_LCDWriteCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a08:	6f a1       	ldd	r22, Y+39	; 0x27
    3a0a:	78 a5       	ldd	r23, Y+40	; 0x28
    3a0c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e2       	ldi	r20, 0x20	; 32
    3a16:	51 e4       	ldi	r21, 0x41	; 65
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	bc 01       	movw	r22, r24
    3a22:	cd 01       	movw	r24, r26
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9a a3       	std	Y+34, r25	; 0x22
    3a2e:	89 a3       	std	Y+33, r24	; 0x21
    3a30:	0f c0       	rjmp	.+30     	; 0x3a50 <H_LCD_Void_LCDWriteCommand+0x1e0>
    3a32:	89 e1       	ldi	r24, 0x19	; 25
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	98 a3       	std	Y+32, r25	; 0x20
    3a38:	8f 8f       	std	Y+31, r24	; 0x1f
    3a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	f1 f7       	brne	.-4      	; 0x3a3e <H_LCD_Void_LCDWriteCommand+0x1ce>
    3a42:	98 a3       	std	Y+32, r25	; 0x20
    3a44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a46:	89 a1       	ldd	r24, Y+33	; 0x21
    3a48:	9a a1       	ldd	r25, Y+34	; 0x22
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	9a a3       	std	Y+34, r25	; 0x22
    3a4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a50:	89 a1       	ldd	r24, Y+33	; 0x21
    3a52:	9a a1       	ldd	r25, Y+34	; 0x22
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	69 f7       	brne	.-38     	; 0x3a32 <H_LCD_Void_LCDWriteCommand+0x1c2>
    3a58:	14 c0       	rjmp	.+40     	; 0x3a82 <H_LCD_Void_LCDWriteCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a60:	9e a1       	ldd	r25, Y+38	; 0x26
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9a a3       	std	Y+34, r25	; 0x22
    3a6c:	89 a3       	std	Y+33, r24	; 0x21
    3a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    3a70:	9a a1       	ldd	r25, Y+34	; 0x22
    3a72:	9e 8f       	std	Y+30, r25	; 0x1e
    3a74:	8d 8f       	std	Y+29, r24	; 0x1d
    3a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <H_LCD_Void_LCDWriteCommand+0x20a>
    3a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_Command << 4)& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    3a82:	a8 e3       	ldi	r26, 0x38	; 56
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	89 ad       	ldd	r24, Y+57	; 0x39
    3a88:	88 2f       	mov	r24, r24
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	82 95       	swap	r24
    3a8e:	92 95       	swap	r25
    3a90:	90 7f       	andi	r25, 0xF0	; 240
    3a92:	98 27       	eor	r25, r24
    3a94:	80 7f       	andi	r24, 0xF0	; 240
    3a96:	98 27       	eor	r25, r24
    3a98:	98 2f       	mov	r25, r24
    3a9a:	e8 e3       	ldi	r30, 0x38	; 56
    3a9c:	f0 e0       	ldi	r31, 0x00	; 0
    3a9e:	80 81       	ld	r24, Z
    3aa0:	8f 70       	andi	r24, 0x0F	; 15
    3aa2:	89 2b       	or	r24, r25
    3aa4:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    3aa6:	84 e0       	ldi	r24, 0x04	; 4
    3aa8:	67 e0       	ldi	r22, 0x07	; 7
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	a0 e8       	ldi	r26, 0x80	; 128
    3ab6:	bf e3       	ldi	r27, 0x3F	; 63
    3ab8:	89 8f       	std	Y+25, r24	; 0x19
    3aba:	9a 8f       	std	Y+26, r25	; 0x1a
    3abc:	ab 8f       	std	Y+27, r26	; 0x1b
    3abe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	4a e7       	ldi	r20, 0x7A	; 122
    3ace:	53 e4       	ldi	r21, 0x43	; 67
    3ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	8d 8b       	std	Y+21, r24	; 0x15
    3ada:	9e 8b       	std	Y+22, r25	; 0x16
    3adc:	af 8b       	std	Y+23, r26	; 0x17
    3ade:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e8       	ldi	r20, 0x80	; 128
    3aee:	5f e3       	ldi	r21, 0x3F	; 63
    3af0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af4:	88 23       	and	r24, r24
    3af6:	2c f4       	brge	.+10     	; 0x3b02 <H_LCD_Void_LCDWriteCommand+0x292>
		__ticks = 1;
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	9c 8b       	std	Y+20, r25	; 0x14
    3afe:	8b 8b       	std	Y+19, r24	; 0x13
    3b00:	3f c0       	rjmp	.+126    	; 0x3b80 <H_LCD_Void_LCDWriteCommand+0x310>
	else if (__tmp > 65535)
    3b02:	6d 89       	ldd	r22, Y+21	; 0x15
    3b04:	7e 89       	ldd	r23, Y+22	; 0x16
    3b06:	8f 89       	ldd	r24, Y+23	; 0x17
    3b08:	98 8d       	ldd	r25, Y+24	; 0x18
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	3f ef       	ldi	r19, 0xFF	; 255
    3b0e:	4f e7       	ldi	r20, 0x7F	; 127
    3b10:	57 e4       	ldi	r21, 0x47	; 71
    3b12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b16:	18 16       	cp	r1, r24
    3b18:	4c f5       	brge	.+82     	; 0x3b6c <H_LCD_Void_LCDWriteCommand+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e2       	ldi	r20, 0x20	; 32
    3b28:	51 e4       	ldi	r21, 0x41	; 65
    3b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	bc 01       	movw	r22, r24
    3b34:	cd 01       	movw	r24, r26
    3b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	9c 8b       	std	Y+20, r25	; 0x14
    3b40:	8b 8b       	std	Y+19, r24	; 0x13
    3b42:	0f c0       	rjmp	.+30     	; 0x3b62 <H_LCD_Void_LCDWriteCommand+0x2f2>
    3b44:	89 e1       	ldi	r24, 0x19	; 25
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9a 8b       	std	Y+18, r25	; 0x12
    3b4a:	89 8b       	std	Y+17, r24	; 0x11
    3b4c:	89 89       	ldd	r24, Y+17	; 0x11
    3b4e:	9a 89       	ldd	r25, Y+18	; 0x12
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	f1 f7       	brne	.-4      	; 0x3b50 <H_LCD_Void_LCDWriteCommand+0x2e0>
    3b54:	9a 8b       	std	Y+18, r25	; 0x12
    3b56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b58:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	9c 8b       	std	Y+20, r25	; 0x14
    3b60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b62:	8b 89       	ldd	r24, Y+19	; 0x13
    3b64:	9c 89       	ldd	r25, Y+20	; 0x14
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	69 f7       	brne	.-38     	; 0x3b44 <H_LCD_Void_LCDWriteCommand+0x2d4>
    3b6a:	14 c0       	rjmp	.+40     	; 0x3b94 <H_LCD_Void_LCDWriteCommand+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b6e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b70:	8f 89       	ldd	r24, Y+23	; 0x17
    3b72:	98 8d       	ldd	r25, Y+24	; 0x18
    3b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	9c 8b       	std	Y+20, r25	; 0x14
    3b7e:	8b 8b       	std	Y+19, r24	; 0x13
    3b80:	8b 89       	ldd	r24, Y+19	; 0x13
    3b82:	9c 89       	ldd	r25, Y+20	; 0x14
    3b84:	98 8b       	std	Y+16, r25	; 0x10
    3b86:	8f 87       	std	Y+15, r24	; 0x0f
    3b88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b8a:	98 89       	ldd	r25, Y+16	; 0x10
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <H_LCD_Void_LCDWriteCommand+0x31c>
    3b90:	98 8b       	std	Y+16, r25	; 0x10
    3b92:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    3b94:	84 e0       	ldi	r24, 0x04	; 4
    3b96:	67 e0       	ldi	r22, 0x07	; 7
    3b98:	40 e0       	ldi	r20, 0x00	; 0
    3b9a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	a0 ea       	ldi	r26, 0xA0	; 160
    3ba4:	b0 e4       	ldi	r27, 0x40	; 64
    3ba6:	8b 87       	std	Y+11, r24	; 0x0b
    3ba8:	9c 87       	std	Y+12, r25	; 0x0c
    3baa:	ad 87       	std	Y+13, r26	; 0x0d
    3bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	4a e7       	ldi	r20, 0x7A	; 122
    3bbc:	53 e4       	ldi	r21, 0x43	; 67
    3bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	8f 83       	std	Y+7, r24	; 0x07
    3bc8:	98 87       	std	Y+8, r25	; 0x08
    3bca:	a9 87       	std	Y+9, r26	; 0x09
    3bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bce:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd0:	78 85       	ldd	r23, Y+8	; 0x08
    3bd2:	89 85       	ldd	r24, Y+9	; 0x09
    3bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	40 e8       	ldi	r20, 0x80	; 128
    3bdc:	5f e3       	ldi	r21, 0x3F	; 63
    3bde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3be2:	88 23       	and	r24, r24
    3be4:	2c f4       	brge	.+10     	; 0x3bf0 <H_LCD_Void_LCDWriteCommand+0x380>
		__ticks = 1;
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	9e 83       	std	Y+6, r25	; 0x06
    3bec:	8d 83       	std	Y+5, r24	; 0x05
    3bee:	3f c0       	rjmp	.+126    	; 0x3c6e <H_LCD_Void_LCDWriteCommand+0x3fe>
	else if (__tmp > 65535)
    3bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf2:	78 85       	ldd	r23, Y+8	; 0x08
    3bf4:	89 85       	ldd	r24, Y+9	; 0x09
    3bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	3f ef       	ldi	r19, 0xFF	; 255
    3bfc:	4f e7       	ldi	r20, 0x7F	; 127
    3bfe:	57 e4       	ldi	r21, 0x47	; 71
    3c00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c04:	18 16       	cp	r1, r24
    3c06:	4c f5       	brge	.+82     	; 0x3c5a <H_LCD_Void_LCDWriteCommand+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e2       	ldi	r20, 0x20	; 32
    3c16:	51 e4       	ldi	r21, 0x41	; 65
    3c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	bc 01       	movw	r22, r24
    3c22:	cd 01       	movw	r24, r26
    3c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	9e 83       	std	Y+6, r25	; 0x06
    3c2e:	8d 83       	std	Y+5, r24	; 0x05
    3c30:	0f c0       	rjmp	.+30     	; 0x3c50 <H_LCD_Void_LCDWriteCommand+0x3e0>
    3c32:	89 e1       	ldi	r24, 0x19	; 25
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	9c 83       	std	Y+4, r25	; 0x04
    3c38:	8b 83       	std	Y+3, r24	; 0x03
    3c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	f1 f7       	brne	.-4      	; 0x3c3e <H_LCD_Void_LCDWriteCommand+0x3ce>
    3c42:	9c 83       	std	Y+4, r25	; 0x04
    3c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c46:	8d 81       	ldd	r24, Y+5	; 0x05
    3c48:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	9e 83       	std	Y+6, r25	; 0x06
    3c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c50:	8d 81       	ldd	r24, Y+5	; 0x05
    3c52:	9e 81       	ldd	r25, Y+6	; 0x06
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	69 f7       	brne	.-38     	; 0x3c32 <H_LCD_Void_LCDWriteCommand+0x3c2>
    3c58:	14 c0       	rjmp	.+40     	; 0x3c82 <H_LCD_Void_LCDWriteCommand+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5c:	78 85       	ldd	r23, Y+8	; 0x08
    3c5e:	89 85       	ldd	r24, Y+9	; 0x09
    3c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	9e 83       	std	Y+6, r25	; 0x06
    3c6c:	8d 83       	std	Y+5, r24	; 0x05
    3c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c70:	9e 81       	ldd	r25, Y+6	; 0x06
    3c72:	9a 83       	std	Y+2, r25	; 0x02
    3c74:	89 83       	std	Y+1, r24	; 0x01
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7a:	01 97       	sbiw	r24, 0x01	; 1
    3c7c:	f1 f7       	brne	.-4      	; 0x3c7a <H_LCD_Void_LCDWriteCommand+0x40a>
    3c7e:	9a 83       	std	Y+2, r25	; 0x02
    3c80:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    3c82:	e9 96       	adiw	r28, 0x39	; 57
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	0f be       	out	0x3f, r0	; 63
    3c8c:	cd bf       	out	0x3d, r28	; 61
    3c8e:	cf 91       	pop	r28
    3c90:	df 91       	pop	r29
    3c92:	08 95       	ret

00003c94 <H_Lcd_void_LCDWriteString>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
    3c94:	df 93       	push	r29
    3c96:	cf 93       	push	r28
    3c98:	00 d0       	rcall	.+0      	; 0x3c9a <H_Lcd_void_LCDWriteString+0x6>
    3c9a:	0f 92       	push	r0
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	9b 83       	std	Y+3, r25	; 0x03
    3ca2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
    3ca4:	19 82       	std	Y+1, r1	; 0x01
    3ca6:	0e c0       	rjmp	.+28     	; 0x3cc4 <H_Lcd_void_LCDWriteString+0x30>
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
	{
//// call  H_LCD_Void_LCDDisplayCharacter and give it the location of the character on the string
		H_LCD_Void_LCDDisplayCharacter(Local_u8_PTR[Local_u8_Counter]);
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	28 2f       	mov	r18, r24
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	e2 0f       	add	r30, r18
    3cb6:	f3 1f       	adc	r31, r19
    3cb8:	80 81       	ld	r24, Z
    3cba:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	8f 5f       	subi	r24, 0xFF	; 255
    3cc2:	89 83       	std	Y+1, r24	; 0x01
}
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	28 2f       	mov	r18, r24
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cce:	fc 01       	movw	r30, r24
    3cd0:	e2 0f       	add	r30, r18
    3cd2:	f3 1f       	adc	r31, r19
    3cd4:	80 81       	ld	r24, Z
    3cd6:	88 23       	and	r24, r24
    3cd8:	39 f7       	brne	.-50     	; 0x3ca8 <H_Lcd_void_LCDWriteString+0x14>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
	}


}
    3cda:	0f 90       	pop	r0
    3cdc:	0f 90       	pop	r0
    3cde:	0f 90       	pop	r0
    3ce0:	cf 91       	pop	r28
    3ce2:	df 91       	pop	r29
    3ce4:	08 95       	ret

00003ce6 <H_Lcd_void_LCDWriteNum>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteNum(s32 Local_s2_Number )
{
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	df 93       	push	r29
    3cec:	cf 93       	push	r28
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	61 97       	sbiw	r28, 0x11	; 17
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	6e 87       	std	Y+14, r22	; 0x0e
    3d00:	7f 87       	std	Y+15, r23	; 0x0f
    3d02:	88 8b       	std	Y+16, r24	; 0x10
    3d04:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8_arr[12]={0};   /// loacal array to store the number of column of the lcd
    3d06:	8c e0       	ldi	r24, 0x0C	; 12
    3d08:	fe 01       	movw	r30, r28
    3d0a:	32 96       	adiw	r30, 0x02	; 2
    3d0c:	df 01       	movw	r26, r30
    3d0e:	98 2f       	mov	r25, r24
    3d10:	1d 92       	st	X+, r1
    3d12:	9a 95       	dec	r25
    3d14:	e9 f7       	brne	.-6      	; 0x3d10 <H_Lcd_void_LCDWriteNum+0x2a>
    s8 Local_s8_Counter =0;    /// local counter for for loop
    3d16:	19 82       	std	Y+1, r1	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    3d18:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d1c:	a8 89       	ldd	r26, Y+16	; 0x10
    3d1e:	b9 89       	ldd	r27, Y+17	; 0x11
    3d20:	bb 23       	and	r27, r27
    3d22:	0c f0       	brlt	.+2      	; 0x3d26 <H_Lcd_void_LCDWriteNum+0x40>
    3d24:	42 c0       	rjmp	.+132    	; 0x3daa <H_Lcd_void_LCDWriteNum+0xc4>
    {
     H_LCD_Void_LCDDisplayCharacter('-');
    3d26:	8d e2       	ldi	r24, 0x2D	; 45
    3d28:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
     Local_s2_Number = Local_s2_Number * -1 ;
    3d2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d30:	a8 89       	ldd	r26, Y+16	; 0x10
    3d32:	b9 89       	ldd	r27, Y+17	; 0x11
    3d34:	b0 95       	com	r27
    3d36:	a0 95       	com	r26
    3d38:	90 95       	com	r25
    3d3a:	81 95       	neg	r24
    3d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3e:	af 4f       	sbci	r26, 0xFF	; 255
    3d40:	bf 4f       	sbci	r27, 0xFF	; 255
    3d42:	8e 87       	std	Y+14, r24	; 0x0e
    3d44:	9f 87       	std	Y+15, r25	; 0x0f
    3d46:	a8 8b       	std	Y+16, r26	; 0x10
    3d48:	b9 8b       	std	Y+17, r27	; 0x11
    3d4a:	2f c0       	rjmp	.+94     	; 0x3daa <H_Lcd_void_LCDWriteNum+0xc4>
    }
    while(Local_s2_Number !=0)
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	08 2f       	mov	r16, r24
    3d50:	11 27       	eor	r17, r17
    3d52:	07 fd       	sbrc	r16, 7
    3d54:	10 95       	com	r17
    3d56:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d58:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d5a:	a8 89       	ldd	r26, Y+16	; 0x10
    3d5c:	b9 89       	ldd	r27, Y+17	; 0x11
    3d5e:	2a e0       	ldi	r18, 0x0A	; 10
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	bc 01       	movw	r22, r24
    3d68:	cd 01       	movw	r24, r26
    3d6a:	0e 94 97 21 	call	0x432e	; 0x432e <__divmodsi4>
    3d6e:	dc 01       	movw	r26, r24
    3d70:	cb 01       	movw	r24, r22
    3d72:	28 2f       	mov	r18, r24
    3d74:	ce 01       	movw	r24, r28
    3d76:	02 96       	adiw	r24, 0x02	; 2
    3d78:	fc 01       	movw	r30, r24
    3d7a:	e0 0f       	add	r30, r16
    3d7c:	f1 1f       	adc	r31, r17
    3d7e:	20 83       	st	Z, r18
    	Local_s2_Number /=10;
    3d80:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d82:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d84:	a8 89       	ldd	r26, Y+16	; 0x10
    3d86:	b9 89       	ldd	r27, Y+17	; 0x11
    3d88:	2a e0       	ldi	r18, 0x0A	; 10
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	40 e0       	ldi	r20, 0x00	; 0
    3d8e:	50 e0       	ldi	r21, 0x00	; 0
    3d90:	bc 01       	movw	r22, r24
    3d92:	cd 01       	movw	r24, r26
    3d94:	0e 94 97 21 	call	0x432e	; 0x432e <__divmodsi4>
    3d98:	da 01       	movw	r26, r20
    3d9a:	c9 01       	movw	r24, r18
    3d9c:	8e 87       	std	Y+14, r24	; 0x0e
    3d9e:	9f 87       	std	Y+15, r25	; 0x0f
    3da0:	a8 8b       	std	Y+16, r26	; 0x10
    3da2:	b9 8b       	std	Y+17, r27	; 0x11
    	Local_s8_Counter ++;
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	8f 5f       	subi	r24, 0xFF	; 255
    3da8:	89 83       	std	Y+1, r24	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    {
     H_LCD_Void_LCDDisplayCharacter('-');
     Local_s2_Number = Local_s2_Number * -1 ;
    }
    while(Local_s2_Number !=0)
    3daa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dac:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dae:	a8 89       	ldd	r26, Y+16	; 0x10
    3db0:	b9 89       	ldd	r27, Y+17	; 0x11
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	a1 05       	cpc	r26, r1
    3db6:	b1 05       	cpc	r27, r1
    3db8:	49 f6       	brne	.-110    	; 0x3d4c <H_Lcd_void_LCDWriteNum+0x66>
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    	Local_s2_Number /=10;
    	Local_s8_Counter ++;
    }
    Local_s8_Counter--;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	81 50       	subi	r24, 0x01	; 1
    3dbe:	89 83       	std	Y+1, r24	; 0x01
   do
    {
    	H_LCD_Void_LCDDisplayCharacter(Local_u8_arr [Local_s8_Counter] + 48);
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	28 2f       	mov	r18, r24
    3dc4:	33 27       	eor	r19, r19
    3dc6:	27 fd       	sbrc	r18, 7
    3dc8:	30 95       	com	r19
    3dca:	ce 01       	movw	r24, r28
    3dcc:	02 96       	adiw	r24, 0x02	; 2
    3dce:	fc 01       	movw	r30, r24
    3dd0:	e2 0f       	add	r30, r18
    3dd2:	f3 1f       	adc	r31, r19
    3dd4:	80 81       	ld	r24, Z
    3dd6:	80 5d       	subi	r24, 0xD0	; 208
    3dd8:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
    	Local_s8_Counter--;
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	81 50       	subi	r24, 0x01	; 1
    3de0:	89 83       	std	Y+1, r24	; 0x01
    } while(Local_s8_Counter >= 0);
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	88 23       	and	r24, r24
    3de6:	64 f7       	brge	.-40     	; 0x3dc0 <H_Lcd_void_LCDWriteNum+0xda>

}
    3de8:	61 96       	adiw	r28, 0x11	; 17
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	cf 91       	pop	r28
    3df6:	df 91       	pop	r29
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	08 95       	ret

00003dfe <H_Lcd_void_LCDGoToXY>:
/// ********function To Select Row and Column	 on LCD   *****///
void H_Lcd_void_LCDGoToXY(u8 Local_u8_Row,u8 Local_u8_Column)
{
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	00 d0       	rcall	.+0      	; 0x3e04 <H_Lcd_void_LCDGoToXY+0x6>
    3e04:	00 d0       	rcall	.+0      	; 0x3e06 <H_Lcd_void_LCDGoToXY+0x8>
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	8b 83       	std	Y+3, r24	; 0x03
    3e0c:	6c 83       	std	Y+4, r22	; 0x04
 if(Local_u8_Row >= 0 && Local_u8_Row <= 1 && Local_u8_Column >= 0 && Local_u8_Column <= 15)
    3e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e10:	82 30       	cpi	r24, 0x02	; 2
    3e12:	a8 f4       	brcc	.+42     	; 0x3e3e <H_Lcd_void_LCDGoToXY+0x40>
    3e14:	8c 81       	ldd	r24, Y+4	; 0x04
    3e16:	80 31       	cpi	r24, 0x10	; 16
    3e18:	90 f4       	brcc	.+36     	; 0x3e3e <H_Lcd_void_LCDGoToXY+0x40>
		{

			u8 Arr[2]={SET_ROW0_COL0, SET_ROW1_COL0};
    3e1a:	80 e8       	ldi	r24, 0x80	; 128
    3e1c:	89 83       	std	Y+1, r24	; 0x01
    3e1e:	80 ec       	ldi	r24, 0xC0	; 192
    3e20:	8a 83       	std	Y+2, r24	; 0x02
			H_LCD_Void_LCDWriteCommand(Arr[Local_u8_Row]+ Local_u8_Column);
    3e22:	8b 81       	ldd	r24, Y+3	; 0x03
    3e24:	28 2f       	mov	r18, r24
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	ce 01       	movw	r24, r28
    3e2a:	01 96       	adiw	r24, 0x01	; 1
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	e2 0f       	add	r30, r18
    3e30:	f3 1f       	adc	r31, r19
    3e32:	90 81       	ld	r25, Z
    3e34:	8c 81       	ldd	r24, Y+4	; 0x04
    3e36:	89 0f       	add	r24, r25
    3e38:	0e 94 38 1c 	call	0x3870	; 0x3870 <H_LCD_Void_LCDWriteCommand>
    3e3c:	04 c0       	rjmp	.+8      	; 0x3e46 <H_Lcd_void_LCDGoToXY+0x48>
		}
 else
 {
	 H_Lcd_void_LCDWriteString("wrong input!!");
    3e3e:	80 e6       	ldi	r24, 0x60	; 96
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <H_Lcd_void_LCDWriteString>
 }

}
    3e46:	0f 90       	pop	r0
    3e48:	0f 90       	pop	r0
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	cf 91       	pop	r28
    3e50:	df 91       	pop	r29
    3e52:	08 95       	ret

00003e54 <H_Lcd_void_LCDClockDisplay>:
/// ********function To Display a clock format on LCD  *****///
void H_Lcd_void_LCDClockDisplay(u8 Local_u8_Hours,u8 Local_u8_Minutes,u8 Local_u8_Seconds)
{
    3e54:	df 93       	push	r29
    3e56:	cf 93       	push	r28
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
    3e5c:	29 97       	sbiw	r28, 0x09	; 9
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	de bf       	out	0x3e, r29	; 62
    3e64:	0f be       	out	0x3f, r0	; 63
    3e66:	cd bf       	out	0x3d, r28	; 61
    3e68:	89 83       	std	Y+1, r24	; 0x01
    3e6a:	6a 83       	std	Y+2, r22	; 0x02
    3e6c:	4b 83       	std	Y+3, r20	; 0x03
	H_Lcd_void_LCDWriteString("Clock");
    3e6e:	8e e6       	ldi	r24, 0x6E	; 110
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <H_Lcd_void_LCDWriteString>
	if((Local_u8_Hours > 9) | (Local_u8_Minutes >9) | (Local_u8_Seconds > 9))
    3e76:	19 86       	std	Y+9, r1	; 0x09
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	8a 30       	cpi	r24, 0x0A	; 10
    3e7c:	10 f0       	brcs	.+4      	; 0x3e82 <H_Lcd_void_LCDClockDisplay+0x2e>
    3e7e:	21 e0       	ldi	r18, 0x01	; 1
    3e80:	29 87       	std	Y+9, r18	; 0x09
    3e82:	18 86       	std	Y+8, r1	; 0x08
    3e84:	8a 81       	ldd	r24, Y+2	; 0x02
    3e86:	8a 30       	cpi	r24, 0x0A	; 10
    3e88:	10 f0       	brcs	.+4      	; 0x3e8e <H_Lcd_void_LCDClockDisplay+0x3a>
    3e8a:	31 e0       	ldi	r19, 0x01	; 1
    3e8c:	38 87       	std	Y+8, r19	; 0x08
    3e8e:	89 85       	ldd	r24, Y+9	; 0x09
    3e90:	98 85       	ldd	r25, Y+8	; 0x08
    3e92:	89 2b       	or	r24, r25
    3e94:	28 2f       	mov	r18, r24
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	3f 83       	std	Y+7, r19	; 0x07
    3e9a:	2e 83       	std	Y+6, r18	; 0x06
    3e9c:	1d 82       	std	Y+5, r1	; 0x05
    3e9e:	1c 82       	std	Y+4, r1	; 0x04
    3ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea2:	8a 30       	cpi	r24, 0x0A	; 10
    3ea4:	20 f0       	brcs	.+8      	; 0x3eae <H_Lcd_void_LCDClockDisplay+0x5a>
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	9d 83       	std	Y+5, r25	; 0x05
    3eac:	8c 83       	std	Y+4, r24	; 0x04
    3eae:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb0:	9f 81       	ldd	r25, Y+7	; 0x07
    3eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    3eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    3eb6:	82 2b       	or	r24, r18
    3eb8:	93 2b       	or	r25, r19
    3eba:	00 97       	sbiw	r24, 0x00	; 0
    3ebc:	d1 f1       	breq	.+116    	; 0x3f32 <H_Lcd_void_LCDClockDisplay+0xde>
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	67 e0       	ldi	r22, 0x07	; 7
    3ec2:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <H_Lcd_void_LCDGoToXY>
	    H_Lcd_void_LCDWriteString("H :M :S");
    3ec6:	84 e7       	ldi	r24, 0x74	; 116
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	67 e0       	ldi	r22, 0x07	; 7
    3ed2:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	88 2f       	mov	r24, r24
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	a0 e0       	ldi	r26, 0x00	; 0
    3ede:	b0 e0       	ldi	r27, 0x00	; 0
    3ee0:	bc 01       	movw	r22, r24
    3ee2:	cd 01       	movw	r24, r26
    3ee4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Hours <= 9)
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	8a 30       	cpi	r24, 0x0A	; 10
    3eec:	18 f4       	brcc	.+6      	; 0x3ef4 <H_Lcd_void_LCDClockDisplay+0xa0>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    3eee:	80 e2       	ldi	r24, 0x20	; 32
    3ef0:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    3ef4:	8a e3       	ldi	r24, 0x3A	; 58
    3ef6:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	88 2f       	mov	r24, r24
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	a0 e0       	ldi	r26, 0x00	; 0
    3f02:	b0 e0       	ldi	r27, 0x00	; 0
    3f04:	bc 01       	movw	r22, r24
    3f06:	cd 01       	movw	r24, r26
    3f08:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Minutes <= 9)
    3f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0e:	8a 30       	cpi	r24, 0x0A	; 10
    3f10:	18 f4       	brcc	.+6      	; 0x3f18 <H_Lcd_void_LCDClockDisplay+0xc4>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    3f12:	80 e2       	ldi	r24, 0x20	; 32
    3f14:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    3f18:	8a e3       	ldi	r24, 0x3A	; 58
    3f1a:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    3f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f20:	88 2f       	mov	r24, r24
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	a0 e0       	ldi	r26, 0x00	; 0
    3f26:	b0 e0       	ldi	r27, 0x00	; 0
    3f28:	bc 01       	movw	r22, r24
    3f2a:	cd 01       	movw	r24, r26
    3f2c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <H_Lcd_void_LCDWriteNum>
    3f30:	2d c0       	rjmp	.+90     	; 0x3f8c <H_Lcd_void_LCDClockDisplay+0x138>

	}
	else
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	67 e0       	ldi	r22, 0x07	; 7
    3f36:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteString("H:M:S");
    3f3a:	8c e7       	ldi	r24, 0x7C	; 124
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	67 e0       	ldi	r22, 0x07	; 7
    3f46:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    3f4a:	89 81       	ldd	r24, Y+1	; 0x01
    3f4c:	88 2f       	mov	r24, r24
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	a0 e0       	ldi	r26, 0x00	; 0
    3f52:	b0 e0       	ldi	r27, 0x00	; 0
    3f54:	bc 01       	movw	r22, r24
    3f56:	cd 01       	movw	r24, r26
    3f58:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    3f5c:	8a e3       	ldi	r24, 0x3A	; 58
    3f5e:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    3f62:	8a 81       	ldd	r24, Y+2	; 0x02
    3f64:	88 2f       	mov	r24, r24
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	a0 e0       	ldi	r26, 0x00	; 0
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	bc 01       	movw	r22, r24
    3f6e:	cd 01       	movw	r24, r26
    3f70:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    3f74:	8a e3       	ldi	r24, 0x3A	; 58
    3f76:	0e 94 26 1a 	call	0x344c	; 0x344c <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    3f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7c:	88 2f       	mov	r24, r24
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	a0 e0       	ldi	r26, 0x00	; 0
    3f82:	b0 e0       	ldi	r27, 0x00	; 0
    3f84:	bc 01       	movw	r22, r24
    3f86:	cd 01       	movw	r24, r26
    3f88:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <H_Lcd_void_LCDWriteNum>
	}


}
    3f8c:	29 96       	adiw	r28, 0x09	; 9
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	cf 91       	pop	r28
    3f9a:	df 91       	pop	r29
    3f9c:	08 95       	ret

00003f9e <H_Lcd_void_LCDClear>:
/// ********function To screen LCD screen *****///
void H_Lcd_void_LCDClear(void)
{
    3f9e:	df 93       	push	r29
    3fa0:	cf 93       	push	r28
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(Clear_screen);
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	0e 94 38 1c 	call	0x3870	; 0x3870 <H_LCD_Void_LCDWriteCommand>
}
    3fac:	cf 91       	pop	r28
    3fae:	df 91       	pop	r29
    3fb0:	08 95       	ret

00003fb2 <H_KEYPAD_void_KeyPadInt>:
#include "KeyPad_Int.h"

///*****************Functions**********//

void H_KEYPAD_void_KeyPadInt(void)
{
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62

	///***************** _ Set Row Pins Direction as input**********//
	M_DIO_void_SetPinDirection(ROWS_PORT, Row1_PIN, OUTPUT);  ///Set_Row_1_Pin_Direction
    3fba:	82 e0       	ldi	r24, 0x02	; 2
    3fbc:	60 e0       	ldi	r22, 0x00	; 0
    3fbe:	41 e0       	ldi	r20, 0x01	; 1
    3fc0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row2_PIN, OUTPUT);  ///Set_Row_2_Pin_Direction
    3fc4:	82 e0       	ldi	r24, 0x02	; 2
    3fc6:	61 e0       	ldi	r22, 0x01	; 1
    3fc8:	41 e0       	ldi	r20, 0x01	; 1
    3fca:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row3_PIN, OUTPUT);  ///Set_Row_3_Pin_Direction
    3fce:	82 e0       	ldi	r24, 0x02	; 2
    3fd0:	62 e0       	ldi	r22, 0x02	; 2
    3fd2:	41 e0       	ldi	r20, 0x01	; 1
    3fd4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row4_PIN, OUTPUT);  ///Set_Row_4_Pin_Direction
    3fd8:	82 e0       	ldi	r24, 0x02	; 2
    3fda:	63 e0       	ldi	r22, 0x03	; 3
    3fdc:	41 e0       	ldi	r20, 0x01	; 1
    3fde:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>

	///***************** _ Set Columns Pins Direction as input**********//
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col1_PIN, INPUT);  ///Set_Column_1_Pin_Value
    3fe2:	84 e0       	ldi	r24, 0x04	; 4
    3fe4:	62 e0       	ldi	r22, 0x02	; 2
    3fe6:	40 e0       	ldi	r20, 0x00	; 0
    3fe8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col2_PIN, INPUT);  ///Set_Column_2_Pin_Value
    3fec:	84 e0       	ldi	r24, 0x04	; 4
    3fee:	63 e0       	ldi	r22, 0x03	; 3
    3ff0:	40 e0       	ldi	r20, 0x00	; 0
    3ff2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col3_PIN, INPUT);  ///Set_Column_3_Pin_Value
    3ff6:	84 e0       	ldi	r24, 0x04	; 4
    3ff8:	64 e0       	ldi	r22, 0x04	; 4
    3ffa:	40 e0       	ldi	r20, 0x00	; 0
    3ffc:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col4_PIN, INPUT);  ///Set_Column_4_Pin_Value
    4000:	84 e0       	ldi	r24, 0x04	; 4
    4002:	65 e0       	ldi	r22, 0x05	; 5
    4004:	40 e0       	ldi	r20, 0x00	; 0
    4006:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>

	///***************** _ Set Row Pins Value to HIGH **********//
	M_DIO_void_SetPinValue(ROWS_PORT, Row1_PIN, HIGH);  ///Set_Row_1_Pin_Direction
    400a:	82 e0       	ldi	r24, 0x02	; 2
    400c:	60 e0       	ldi	r22, 0x00	; 0
    400e:	41 e0       	ldi	r20, 0x01	; 1
    4010:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row2_PIN, HIGH);  ///Set_Row_2_Pin_Direction
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	61 e0       	ldi	r22, 0x01	; 1
    4018:	41 e0       	ldi	r20, 0x01	; 1
    401a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row3_PIN, HIGH);  ///Set_Row_3_Pin_Direction
    401e:	82 e0       	ldi	r24, 0x02	; 2
    4020:	62 e0       	ldi	r22, 0x02	; 2
    4022:	41 e0       	ldi	r20, 0x01	; 1
    4024:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row4_PIN, HIGH);  ///Set_Row_4_Pin_Direction
    4028:	82 e0       	ldi	r24, 0x02	; 2
    402a:	63 e0       	ldi	r22, 0x03	; 3
    402c:	41 e0       	ldi	r20, 0x01	; 1
    402e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>



}
    4032:	cf 91       	pop	r28
    4034:	df 91       	pop	r29
    4036:	08 95       	ret

00004038 <H_KEYPAD_void_KeyPadRead>:
u8 H_KEYPAD_void_KeyPadRead(void)
{
    4038:	df 93       	push	r29
    403a:	cf 93       	push	r28
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	a6 97       	sbiw	r28, 0x26	; 38
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	f8 94       	cli
    4046:	de bf       	out	0x3e, r29	; 62
    4048:	0f be       	out	0x3f, r0	; 63
    404a:	cd bf       	out	0x3d, r28	; 61
#if KEYPAD_MODEDL == MODEL_A

	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
    404c:	ce 01       	movw	r24, r28
    404e:	42 96       	adiw	r24, 0x12	; 18
    4050:	9b a3       	std	Y+35, r25	; 0x23
    4052:	8a a3       	std	Y+34, r24	; 0x22
    4054:	ea e8       	ldi	r30, 0x8A	; 138
    4056:	f1 e0       	ldi	r31, 0x01	; 1
    4058:	fd a3       	std	Y+37, r31	; 0x25
    405a:	ec a3       	std	Y+36, r30	; 0x24
    405c:	f0 e1       	ldi	r31, 0x10	; 16
    405e:	fe a3       	std	Y+38, r31	; 0x26
    4060:	ec a1       	ldd	r30, Y+36	; 0x24
    4062:	fd a1       	ldd	r31, Y+37	; 0x25
    4064:	00 80       	ld	r0, Z
    4066:	8c a1       	ldd	r24, Y+36	; 0x24
    4068:	9d a1       	ldd	r25, Y+37	; 0x25
    406a:	01 96       	adiw	r24, 0x01	; 1
    406c:	9d a3       	std	Y+37, r25	; 0x25
    406e:	8c a3       	std	Y+36, r24	; 0x24
    4070:	ea a1       	ldd	r30, Y+34	; 0x22
    4072:	fb a1       	ldd	r31, Y+35	; 0x23
    4074:	00 82       	st	Z, r0
    4076:	8a a1       	ldd	r24, Y+34	; 0x22
    4078:	9b a1       	ldd	r25, Y+35	; 0x23
    407a:	01 96       	adiw	r24, 0x01	; 1
    407c:	9b a3       	std	Y+35, r25	; 0x23
    407e:	8a a3       	std	Y+34, r24	; 0x22
    4080:	9e a1       	ldd	r25, Y+38	; 0x26
    4082:	91 50       	subi	r25, 0x01	; 1
    4084:	9e a3       	std	Y+38, r25	; 0x26
    4086:	ee a1       	ldd	r30, Y+38	; 0x26
    4088:	ee 23       	and	r30, r30
    408a:	51 f7       	brne	.-44     	; 0x4060 <H_KEYPAD_void_KeyPadRead+0x28>
	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
#endif
	u8 Local_u8_Col =0;            /// local columns counter
    408c:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8_Row =0;            /// local Rows counter
    408e:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	8f 87       	std	Y+15, r24	; 0x0f

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    4094:	18 8a       	std	Y+16, r1	; 0x10
    4096:	ad c0       	rjmp	.+346    	; 0x41f2 <H_KEYPAD_void_KeyPadRead+0x1ba>
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
    4098:	82 e0       	ldi	r24, 0x02	; 2
    409a:	68 89       	ldd	r22, Y+16	; 0x10
    409c:	40 e0       	ldi	r20, 0x00	; 0
    409e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    40a2:	82 e0       	ldi	r24, 0x02	; 2
    40a4:	89 8b       	std	Y+17, r24	; 0x11
    40a6:	99 c0       	rjmp	.+306    	; 0x41da <H_KEYPAD_void_KeyPadRead+0x1a2>
		{

		   ///**************Read_Local Column Pin value**********
		   /// ************** check if button is pressed********
		   if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    40a8:	84 e0       	ldi	r24, 0x04	; 4
    40aa:	69 89       	ldd	r22, Y+17	; 0x11
    40ac:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    40b0:	88 23       	and	r24, r24
    40b2:	09 f0       	breq	.+2      	; 0x40b6 <H_KEYPAD_void_KeyPadRead+0x7e>
    40b4:	8f c0       	rjmp	.+286    	; 0x41d4 <H_KEYPAD_void_KeyPadRead+0x19c>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	a0 ef       	ldi	r26, 0xF0	; 240
    40bc:	b2 e4       	ldi	r27, 0x42	; 66
    40be:	8b 87       	std	Y+11, r24	; 0x0b
    40c0:	9c 87       	std	Y+12, r25	; 0x0c
    40c2:	ad 87       	std	Y+13, r26	; 0x0d
    40c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    40c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    40cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ce:	20 e0       	ldi	r18, 0x00	; 0
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	4a e7       	ldi	r20, 0x7A	; 122
    40d4:	53 e4       	ldi	r21, 0x43	; 67
    40d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	8f 83       	std	Y+7, r24	; 0x07
    40e0:	98 87       	std	Y+8, r25	; 0x08
    40e2:	a9 87       	std	Y+9, r26	; 0x09
    40e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40e6:	6f 81       	ldd	r22, Y+7	; 0x07
    40e8:	78 85       	ldd	r23, Y+8	; 0x08
    40ea:	89 85       	ldd	r24, Y+9	; 0x09
    40ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e8       	ldi	r20, 0x80	; 128
    40f4:	5f e3       	ldi	r21, 0x3F	; 63
    40f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40fa:	88 23       	and	r24, r24
    40fc:	2c f4       	brge	.+10     	; 0x4108 <H_KEYPAD_void_KeyPadRead+0xd0>
		__ticks = 1;
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	9e 83       	std	Y+6, r25	; 0x06
    4104:	8d 83       	std	Y+5, r24	; 0x05
    4106:	3f c0       	rjmp	.+126    	; 0x4186 <H_KEYPAD_void_KeyPadRead+0x14e>
	else if (__tmp > 65535)
    4108:	6f 81       	ldd	r22, Y+7	; 0x07
    410a:	78 85       	ldd	r23, Y+8	; 0x08
    410c:	89 85       	ldd	r24, Y+9	; 0x09
    410e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	3f ef       	ldi	r19, 0xFF	; 255
    4114:	4f e7       	ldi	r20, 0x7F	; 127
    4116:	57 e4       	ldi	r21, 0x47	; 71
    4118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    411c:	18 16       	cp	r1, r24
    411e:	4c f5       	brge	.+82     	; 0x4172 <H_KEYPAD_void_KeyPadRead+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4120:	6b 85       	ldd	r22, Y+11	; 0x0b
    4122:	7c 85       	ldd	r23, Y+12	; 0x0c
    4124:	8d 85       	ldd	r24, Y+13	; 0x0d
    4126:	9e 85       	ldd	r25, Y+14	; 0x0e
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	40 e2       	ldi	r20, 0x20	; 32
    412e:	51 e4       	ldi	r21, 0x41	; 65
    4130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	bc 01       	movw	r22, r24
    413a:	cd 01       	movw	r24, r26
    413c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	9e 83       	std	Y+6, r25	; 0x06
    4146:	8d 83       	std	Y+5, r24	; 0x05
    4148:	0f c0       	rjmp	.+30     	; 0x4168 <H_KEYPAD_void_KeyPadRead+0x130>
    414a:	89 e1       	ldi	r24, 0x19	; 25
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	9c 83       	std	Y+4, r25	; 0x04
    4150:	8b 83       	std	Y+3, r24	; 0x03
    4152:	8b 81       	ldd	r24, Y+3	; 0x03
    4154:	9c 81       	ldd	r25, Y+4	; 0x04
    4156:	01 97       	sbiw	r24, 0x01	; 1
    4158:	f1 f7       	brne	.-4      	; 0x4156 <H_KEYPAD_void_KeyPadRead+0x11e>
    415a:	9c 83       	std	Y+4, r25	; 0x04
    415c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    415e:	8d 81       	ldd	r24, Y+5	; 0x05
    4160:	9e 81       	ldd	r25, Y+6	; 0x06
    4162:	01 97       	sbiw	r24, 0x01	; 1
    4164:	9e 83       	std	Y+6, r25	; 0x06
    4166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4168:	8d 81       	ldd	r24, Y+5	; 0x05
    416a:	9e 81       	ldd	r25, Y+6	; 0x06
    416c:	00 97       	sbiw	r24, 0x00	; 0
    416e:	69 f7       	brne	.-38     	; 0x414a <H_KEYPAD_void_KeyPadRead+0x112>
    4170:	14 c0       	rjmp	.+40     	; 0x419a <H_KEYPAD_void_KeyPadRead+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4172:	6f 81       	ldd	r22, Y+7	; 0x07
    4174:	78 85       	ldd	r23, Y+8	; 0x08
    4176:	89 85       	ldd	r24, Y+9	; 0x09
    4178:	9a 85       	ldd	r25, Y+10	; 0x0a
    417a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	9e 83       	std	Y+6, r25	; 0x06
    4184:	8d 83       	std	Y+5, r24	; 0x05
    4186:	8d 81       	ldd	r24, Y+5	; 0x05
    4188:	9e 81       	ldd	r25, Y+6	; 0x06
    418a:	9a 83       	std	Y+2, r25	; 0x02
    418c:	89 83       	std	Y+1, r24	; 0x01
    418e:	89 81       	ldd	r24, Y+1	; 0x01
    4190:	9a 81       	ldd	r25, Y+2	; 0x02
    4192:	01 97       	sbiw	r24, 0x01	; 1
    4194:	f1 f7       	brne	.-4      	; 0x4192 <H_KEYPAD_void_KeyPadRead+0x15a>
    4196:	9a 83       	std	Y+2, r25	; 0x02
    4198:	89 83       	std	Y+1, r24	; 0x01
		   {   ////*******delay for DEBOUNCING
			   _delay_ms(KEYPAD_DEBOUNCING_TIME);
			   /// ************** check again if button is pressed********
			    if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    419a:	84 e0       	ldi	r24, 0x04	; 4
    419c:	69 89       	ldd	r22, Y+17	; 0x11
    419e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <M_DIO_U8_PinRead>
    41a2:	88 23       	and	r24, r24
    41a4:	b9 f4       	brne	.+46     	; 0x41d4 <H_KEYPAD_void_KeyPadRead+0x19c>
		     	{
	            ///********if button is pressed set Local_u8_Read  ********
				  Local_u8_Read =Local_u8_Arr [Local_u8_Row][Local_u8_Col - 2] ;
    41a6:	88 89       	ldd	r24, Y+16	; 0x10
    41a8:	28 2f       	mov	r18, r24
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	89 89       	ldd	r24, Y+17	; 0x11
    41ae:	88 2f       	mov	r24, r24
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	ac 01       	movw	r20, r24
    41b4:	42 50       	subi	r20, 0x02	; 2
    41b6:	50 40       	sbci	r21, 0x00	; 0
    41b8:	22 0f       	add	r18, r18
    41ba:	33 1f       	adc	r19, r19
    41bc:	22 0f       	add	r18, r18
    41be:	33 1f       	adc	r19, r19
    41c0:	ce 01       	movw	r24, r28
    41c2:	01 96       	adiw	r24, 0x01	; 1
    41c4:	82 0f       	add	r24, r18
    41c6:	93 1f       	adc	r25, r19
    41c8:	84 0f       	add	r24, r20
    41ca:	95 1f       	adc	r25, r21
    41cc:	fc 01       	movw	r30, r24
    41ce:	71 96       	adiw	r30, 0x11	; 17
    41d0:	80 81       	ld	r24, Z
    41d2:	8f 87       	std	Y+15, r24	; 0x0f
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    41d4:	89 89       	ldd	r24, Y+17	; 0x11
    41d6:	8f 5f       	subi	r24, 0xFF	; 255
    41d8:	89 8b       	std	Y+17, r24	; 0x11
    41da:	89 89       	ldd	r24, Y+17	; 0x11
    41dc:	86 30       	cpi	r24, 0x06	; 6
    41de:	08 f4       	brcc	.+2      	; 0x41e2 <H_KEYPAD_void_KeyPadRead+0x1aa>
    41e0:	63 cf       	rjmp	.-314    	; 0x40a8 <H_KEYPAD_void_KeyPadRead+0x70>

			    }
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
    41e2:	82 e0       	ldi	r24, 0x02	; 2
    41e4:	68 89       	ldd	r22, Y+16	; 0x10
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
	u8 Local_u8_Row =0;            /// local Rows counter
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    41ec:	88 89       	ldd	r24, Y+16	; 0x10
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	88 8b       	std	Y+16, r24	; 0x10
    41f2:	88 89       	ldd	r24, Y+16	; 0x10
    41f4:	84 30       	cpi	r24, 0x04	; 4
    41f6:	08 f4       	brcc	.+2      	; 0x41fa <H_KEYPAD_void_KeyPadRead+0x1c2>
    41f8:	4f cf       	rjmp	.-354    	; 0x4098 <H_KEYPAD_void_KeyPadRead+0x60>
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
	}
    return Local_u8_Read ;
    41fa:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    41fc:	a6 96       	adiw	r28, 0x26	; 38
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	cf 91       	pop	r28
    420a:	df 91       	pop	r29
    420c:	08 95       	ret

0000420e <H_BUZ_Void_BUZint>:

///***************** Functions **********//

///  H_BUZ_Void_BUZint function to initialize  Buzzer
void H_BUZ_Void_BUZint(void)
{
    420e:	df 93       	push	r29
    4210:	cf 93       	push	r28
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
   M_DIO_void_SetPinDirection(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    4216:	83 e0       	ldi	r24, 0x03	; 3
    4218:	65 e0       	ldi	r22, 0x05	; 5
    421a:	41 e0       	ldi	r20, 0x01	; 1
    421c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <M_DIO_void_SetPinDirection>
}
    4220:	cf 91       	pop	r28
    4222:	df 91       	pop	r29
    4224:	08 95       	ret

00004226 <H_BUZ_Void_BUZSetON>:
void H_BUZ_Void_BUZSetON(void)
{
    4226:	df 93       	push	r29
    4228:	cf 93       	push	r28
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
    422e:	83 e0       	ldi	r24, 0x03	; 3
    4230:	65 e0       	ldi	r22, 0x05	; 5
    4232:	41 e0       	ldi	r20, 0x01	; 1
    4234:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
}
    4238:	cf 91       	pop	r28
    423a:	df 91       	pop	r29
    423c:	08 95       	ret

0000423e <H_BUZ_Void_BUZSetOFF>:
void H_BUZ_Void_BUZSetOFF(void)
{
    423e:	df 93       	push	r29
    4240:	cf 93       	push	r28
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
    4246:	83 e0       	ldi	r24, 0x03	; 3
    4248:	65 e0       	ldi	r22, 0x05	; 5
    424a:	40 e0       	ldi	r20, 0x00	; 0
    424c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <M_DIO_void_SetPinValue>
}
    4250:	cf 91       	pop	r28
    4252:	df 91       	pop	r29
    4254:	08 95       	ret

00004256 <main>:
#include "main.h"      ///*** this is a header file to contain all includes of Application



int main ()
{
    4256:	df 93       	push	r29
    4258:	cf 93       	push	r28
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62

	    //// initialize Servo_motor
        H_SERVOMOTOR_void_ServoMotorInt();
    425e:	0e 94 30 13 	call	0x2660	; 0x2660 <H_SERVOMOTOR_void_ServoMotorInt>
        /// function to set desired  Angel
        H_SERVOMOTOR_void_ServoMotorSetAngel(180);    ///  desired angel
    4262:	84 eb       	ldi	r24, 0xB4	; 180
    4264:	0e 94 3f 13 	call	0x267e	; 0x267e <H_SERVOMOTOR_void_ServoMotorSetAngel>

        //// function to start  Servo_motor
        H_SERVOMOTOR_void_ServoMotorStart();
    4268:	0e 94 86 13 	call	0x270c	; 0x270c <H_SERVOMOTOR_void_ServoMotorStart>
    426c:	ff cf       	rjmp	.-2      	; 0x426c <main+0x16>

0000426e <__mulsi3>:
    426e:	62 9f       	mul	r22, r18
    4270:	d0 01       	movw	r26, r0
    4272:	73 9f       	mul	r23, r19
    4274:	f0 01       	movw	r30, r0
    4276:	82 9f       	mul	r24, r18
    4278:	e0 0d       	add	r30, r0
    427a:	f1 1d       	adc	r31, r1
    427c:	64 9f       	mul	r22, r20
    427e:	e0 0d       	add	r30, r0
    4280:	f1 1d       	adc	r31, r1
    4282:	92 9f       	mul	r25, r18
    4284:	f0 0d       	add	r31, r0
    4286:	83 9f       	mul	r24, r19
    4288:	f0 0d       	add	r31, r0
    428a:	74 9f       	mul	r23, r20
    428c:	f0 0d       	add	r31, r0
    428e:	65 9f       	mul	r22, r21
    4290:	f0 0d       	add	r31, r0
    4292:	99 27       	eor	r25, r25
    4294:	72 9f       	mul	r23, r18
    4296:	b0 0d       	add	r27, r0
    4298:	e1 1d       	adc	r30, r1
    429a:	f9 1f       	adc	r31, r25
    429c:	63 9f       	mul	r22, r19
    429e:	b0 0d       	add	r27, r0
    42a0:	e1 1d       	adc	r30, r1
    42a2:	f9 1f       	adc	r31, r25
    42a4:	bd 01       	movw	r22, r26
    42a6:	cf 01       	movw	r24, r30
    42a8:	11 24       	eor	r1, r1
    42aa:	08 95       	ret

000042ac <__udivmodqi4>:
    42ac:	99 1b       	sub	r25, r25
    42ae:	79 e0       	ldi	r23, 0x09	; 9
    42b0:	04 c0       	rjmp	.+8      	; 0x42ba <__udivmodqi4_ep>

000042b2 <__udivmodqi4_loop>:
    42b2:	99 1f       	adc	r25, r25
    42b4:	96 17       	cp	r25, r22
    42b6:	08 f0       	brcs	.+2      	; 0x42ba <__udivmodqi4_ep>
    42b8:	96 1b       	sub	r25, r22

000042ba <__udivmodqi4_ep>:
    42ba:	88 1f       	adc	r24, r24
    42bc:	7a 95       	dec	r23
    42be:	c9 f7       	brne	.-14     	; 0x42b2 <__udivmodqi4_loop>
    42c0:	80 95       	com	r24
    42c2:	08 95       	ret

000042c4 <__divmodhi4>:
    42c4:	97 fb       	bst	r25, 7
    42c6:	09 2e       	mov	r0, r25
    42c8:	07 26       	eor	r0, r23
    42ca:	0a d0       	rcall	.+20     	; 0x42e0 <__divmodhi4_neg1>
    42cc:	77 fd       	sbrc	r23, 7
    42ce:	04 d0       	rcall	.+8      	; 0x42d8 <__divmodhi4_neg2>
    42d0:	49 d0       	rcall	.+146    	; 0x4364 <__udivmodhi4>
    42d2:	06 d0       	rcall	.+12     	; 0x42e0 <__divmodhi4_neg1>
    42d4:	00 20       	and	r0, r0
    42d6:	1a f4       	brpl	.+6      	; 0x42de <__divmodhi4_exit>

000042d8 <__divmodhi4_neg2>:
    42d8:	70 95       	com	r23
    42da:	61 95       	neg	r22
    42dc:	7f 4f       	sbci	r23, 0xFF	; 255

000042de <__divmodhi4_exit>:
    42de:	08 95       	ret

000042e0 <__divmodhi4_neg1>:
    42e0:	f6 f7       	brtc	.-4      	; 0x42de <__divmodhi4_exit>
    42e2:	90 95       	com	r25
    42e4:	81 95       	neg	r24
    42e6:	9f 4f       	sbci	r25, 0xFF	; 255
    42e8:	08 95       	ret

000042ea <__udivmodsi4>:
    42ea:	a1 e2       	ldi	r26, 0x21	; 33
    42ec:	1a 2e       	mov	r1, r26
    42ee:	aa 1b       	sub	r26, r26
    42f0:	bb 1b       	sub	r27, r27
    42f2:	fd 01       	movw	r30, r26
    42f4:	0d c0       	rjmp	.+26     	; 0x4310 <__udivmodsi4_ep>

000042f6 <__udivmodsi4_loop>:
    42f6:	aa 1f       	adc	r26, r26
    42f8:	bb 1f       	adc	r27, r27
    42fa:	ee 1f       	adc	r30, r30
    42fc:	ff 1f       	adc	r31, r31
    42fe:	a2 17       	cp	r26, r18
    4300:	b3 07       	cpc	r27, r19
    4302:	e4 07       	cpc	r30, r20
    4304:	f5 07       	cpc	r31, r21
    4306:	20 f0       	brcs	.+8      	; 0x4310 <__udivmodsi4_ep>
    4308:	a2 1b       	sub	r26, r18
    430a:	b3 0b       	sbc	r27, r19
    430c:	e4 0b       	sbc	r30, r20
    430e:	f5 0b       	sbc	r31, r21

00004310 <__udivmodsi4_ep>:
    4310:	66 1f       	adc	r22, r22
    4312:	77 1f       	adc	r23, r23
    4314:	88 1f       	adc	r24, r24
    4316:	99 1f       	adc	r25, r25
    4318:	1a 94       	dec	r1
    431a:	69 f7       	brne	.-38     	; 0x42f6 <__udivmodsi4_loop>
    431c:	60 95       	com	r22
    431e:	70 95       	com	r23
    4320:	80 95       	com	r24
    4322:	90 95       	com	r25
    4324:	9b 01       	movw	r18, r22
    4326:	ac 01       	movw	r20, r24
    4328:	bd 01       	movw	r22, r26
    432a:	cf 01       	movw	r24, r30
    432c:	08 95       	ret

0000432e <__divmodsi4>:
    432e:	97 fb       	bst	r25, 7
    4330:	09 2e       	mov	r0, r25
    4332:	05 26       	eor	r0, r21
    4334:	0e d0       	rcall	.+28     	; 0x4352 <__divmodsi4_neg1>
    4336:	57 fd       	sbrc	r21, 7
    4338:	04 d0       	rcall	.+8      	; 0x4342 <__divmodsi4_neg2>
    433a:	d7 df       	rcall	.-82     	; 0x42ea <__udivmodsi4>
    433c:	0a d0       	rcall	.+20     	; 0x4352 <__divmodsi4_neg1>
    433e:	00 1c       	adc	r0, r0
    4340:	38 f4       	brcc	.+14     	; 0x4350 <__divmodsi4_exit>

00004342 <__divmodsi4_neg2>:
    4342:	50 95       	com	r21
    4344:	40 95       	com	r20
    4346:	30 95       	com	r19
    4348:	21 95       	neg	r18
    434a:	3f 4f       	sbci	r19, 0xFF	; 255
    434c:	4f 4f       	sbci	r20, 0xFF	; 255
    434e:	5f 4f       	sbci	r21, 0xFF	; 255

00004350 <__divmodsi4_exit>:
    4350:	08 95       	ret

00004352 <__divmodsi4_neg1>:
    4352:	f6 f7       	brtc	.-4      	; 0x4350 <__divmodsi4_exit>
    4354:	90 95       	com	r25
    4356:	80 95       	com	r24
    4358:	70 95       	com	r23
    435a:	61 95       	neg	r22
    435c:	7f 4f       	sbci	r23, 0xFF	; 255
    435e:	8f 4f       	sbci	r24, 0xFF	; 255
    4360:	9f 4f       	sbci	r25, 0xFF	; 255
    4362:	08 95       	ret

00004364 <__udivmodhi4>:
    4364:	aa 1b       	sub	r26, r26
    4366:	bb 1b       	sub	r27, r27
    4368:	51 e1       	ldi	r21, 0x11	; 17
    436a:	07 c0       	rjmp	.+14     	; 0x437a <__udivmodhi4_ep>

0000436c <__udivmodhi4_loop>:
    436c:	aa 1f       	adc	r26, r26
    436e:	bb 1f       	adc	r27, r27
    4370:	a6 17       	cp	r26, r22
    4372:	b7 07       	cpc	r27, r23
    4374:	10 f0       	brcs	.+4      	; 0x437a <__udivmodhi4_ep>
    4376:	a6 1b       	sub	r26, r22
    4378:	b7 0b       	sbc	r27, r23

0000437a <__udivmodhi4_ep>:
    437a:	88 1f       	adc	r24, r24
    437c:	99 1f       	adc	r25, r25
    437e:	5a 95       	dec	r21
    4380:	a9 f7       	brne	.-22     	; 0x436c <__udivmodhi4_loop>
    4382:	80 95       	com	r24
    4384:	90 95       	com	r25
    4386:	bc 01       	movw	r22, r24
    4388:	cd 01       	movw	r24, r26
    438a:	08 95       	ret

0000438c <__prologue_saves__>:
    438c:	2f 92       	push	r2
    438e:	3f 92       	push	r3
    4390:	4f 92       	push	r4
    4392:	5f 92       	push	r5
    4394:	6f 92       	push	r6
    4396:	7f 92       	push	r7
    4398:	8f 92       	push	r8
    439a:	9f 92       	push	r9
    439c:	af 92       	push	r10
    439e:	bf 92       	push	r11
    43a0:	cf 92       	push	r12
    43a2:	df 92       	push	r13
    43a4:	ef 92       	push	r14
    43a6:	ff 92       	push	r15
    43a8:	0f 93       	push	r16
    43aa:	1f 93       	push	r17
    43ac:	cf 93       	push	r28
    43ae:	df 93       	push	r29
    43b0:	cd b7       	in	r28, 0x3d	; 61
    43b2:	de b7       	in	r29, 0x3e	; 62
    43b4:	ca 1b       	sub	r28, r26
    43b6:	db 0b       	sbc	r29, r27
    43b8:	0f b6       	in	r0, 0x3f	; 63
    43ba:	f8 94       	cli
    43bc:	de bf       	out	0x3e, r29	; 62
    43be:	0f be       	out	0x3f, r0	; 63
    43c0:	cd bf       	out	0x3d, r28	; 61
    43c2:	09 94       	ijmp

000043c4 <__epilogue_restores__>:
    43c4:	2a 88       	ldd	r2, Y+18	; 0x12
    43c6:	39 88       	ldd	r3, Y+17	; 0x11
    43c8:	48 88       	ldd	r4, Y+16	; 0x10
    43ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    43cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    43ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    43d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    43d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    43d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    43d6:	b9 84       	ldd	r11, Y+9	; 0x09
    43d8:	c8 84       	ldd	r12, Y+8	; 0x08
    43da:	df 80       	ldd	r13, Y+7	; 0x07
    43dc:	ee 80       	ldd	r14, Y+6	; 0x06
    43de:	fd 80       	ldd	r15, Y+5	; 0x05
    43e0:	0c 81       	ldd	r16, Y+4	; 0x04
    43e2:	1b 81       	ldd	r17, Y+3	; 0x03
    43e4:	aa 81       	ldd	r26, Y+2	; 0x02
    43e6:	b9 81       	ldd	r27, Y+1	; 0x01
    43e8:	ce 0f       	add	r28, r30
    43ea:	d1 1d       	adc	r29, r1
    43ec:	0f b6       	in	r0, 0x3f	; 63
    43ee:	f8 94       	cli
    43f0:	de bf       	out	0x3e, r29	; 62
    43f2:	0f be       	out	0x3f, r0	; 63
    43f4:	cd bf       	out	0x3d, r28	; 61
    43f6:	ed 01       	movw	r28, r26
    43f8:	08 95       	ret

000043fa <_exit>:
    43fa:	f8 94       	cli

000043fc <__stop_program>:
    43fc:	ff cf       	rjmp	.-2      	; 0x43fc <__stop_program>
